for many users with a physical or motor disability  using a computer mouse or other pointing device to navigate the web is cumbersome or impossible due to problems with pointing accuracy. at the same time  web accessibility using a keyboard in major browsers is rudimentary  requiring many key presses to select links or other elements. we introduce keysurf  a character controlled web navigation system which addresses this situation by presenting an interface which allows a user to activate any web page element with only two or three keystrokes. through an implementation of a usercentric incremental search algorithm  elements are matched according to user expectation as characters are entered into the interface. we show how our interface can be integrated with a speech recognition input  as well as with specialized on-screen keyboards for people with disabilities. using the user's browsing history  we improve the efficiency of the selection process and find potentially interesting page links for the user within the current web page. we present the results from a pilot study evaluating the performance of various components of our system.
categories and subject descriptors
h.1  information interfaces and presentation :  user interfaces - input devices and strategies. ; k.1  computers and society :  social issues - assistive technologies for persons with disabilities. 
general terms
human factors
keywords
web accessibility  keyboard access  web navigation
copyright is held by the international world wide web conference committee  iw1 . distribution of these papers is limited to classroom use  and personal use by others.
www 1  april 1  1  beijing  china.
acm 1-1-1/1.
1. introduction
　for people with physical or motor disabilities  using a pointing device accurately can be difficult or impossible. as modern graphical user interfaces  guis  are generally mouse driven  much work has been done to facilitate accessibility via the keyboard for those users unable or unwilling to use a pointing device. in general  this has resulted in modern gui applications being efficiently accessible for both keyboard and mouse users. however  with the proliferation of the web  more and more time is spent accessing web pages and web applications via a web browser  instead of using local applications.
　for users without the option of using a pointing device  manipulating the interface of web pages with a keyboard is often very cumbersome. although guidelines for web accessibility - which include best practices for keyboard accessible design - have been developed by the web accessibility initiative   adoption rates amongst web authors are still poor . currently  an alternative web navigation system is only practically useful if it is compatible with an overwhelming majority of popular websites  regardless of their conformance to accessibility standards.
　in previous work  we proposed a web navigation system that laid the framework for efficient navigation on the world wide web for any users able to use a keyboard or equivalent device  1  1 . this system  termed keysurf  is based on the concept of using a layered  incremental search mechanism to select links and other clickable elements on a web page. keysurf generates a suitable textual description for each clickable element and allows users to select these elements by entering several characters with any keyboardequivalent input device. in this paper  we refine our incremental search selection method  propose extensions that help users discover potentially interesting content  and make interesting content easier to select.
1. background
　in addition to our work  the problem of navigating the web for people with physical disabilities has been approached from various angles. schrepp surveyed the accessibility of current websites for both mouse and keyboard users   with the conclusion that while the state of website design for mouse users was quite good  the majority of websites are very cumbersome to navigate for keyboard users  using the tab key to move through links . for popular online resources  even able-bodied keyboard users  simulated with a goms model  required between 1 to 1 times as much time to complete navigation tasks than mouse users.
　the poor state of keyboard accessibility in major browsers and most websites has prompted several implementations of keyboard navigation systems based on automatically assigned keyboard shortcuts. for firefox  the extensions hita-hint  and conkeror  are examples of such a technique. with these systems  the user can press a key to bring up a small numbered label beside every clickable element on the page. by typing in the number code of the desired element and pressing enter  the system clicks on that element  thus following the link or activating the button.
　while these types of number code systems are quite effective  we believe the design imposes some limits on efficiency and adds an extra cognitive step to the navigation process. if the shortcut labels are not shown on page load  an extra key press is required to show them; while if they are shown on page load  the extra elements cause visual clutter and occlusion problems when there are many labels. in addition  there is no semantic connection between the keyboard shortcut and the clickable element  for instance  the shortcut for a link labeled  sports news  would be something like 1 . a user must bring up the labels  make the connection between the numeric shortcut and the element  and then type in the code. to the best of our knowledge  shortcuts are assigned sequentially with no consideration for user history or the relative importance of clickable elements.
　trewin et al. have approached the problem from a different perspective. instead of attempting to provide a keyboard navigation system for web users with disabilities  they proposed a method of steadying the mouse cursor such that users are able to more accurately hit targets with the pointer . bilmes at al. have provided an alternative to mechanical cursor control entirely  by proposing a vocal joystick to allow users to control a mouse pointer with continuous voice control .
1. target users
　the keysurf system is primarily designed for users with a physical disability that have trouble accurately using a pointing device  such as a mouse  joystick  or trackball  or are not able to use a pointing device at all. more generally  the system is suitable for any user who can type two or three characters  with a keyboard or equivalent input device  faster than they could acquire a small target  such as a hypertext link or form button  with a pointing device. for convenience  we refer to the process of entering characters into the keysurf interface as typing in this paper. however  the interface can be controlled by any input device capable of textual output at some stage  be it a regular computer keyboard  morse code from a single switch device  any specialized hardware or software for text input  or a speech-based interface as discussed in section 1.1.
　although the keysurf system is primarily designed for disabled users who are unable to accurately use a pointing device  it can also be beneficial to non-disabled users who are faster or more comfortable with keyboard input than mouse. with the proliferation of mobile devices and public wireless access points  it is often impractical to connect a computer mouse to a laptop or hand-held device  potentially making an efficient keyboard web navigation system very useful.
1. system overview
　the relationship between the major components of the keysurf system are depicted in figure 1. keysurf components can be logically classified as either part of the mechanism underlying link selection  or comprising the navigational support offered by the knowledge of user interests. the visible user interface is minimal  thereby maximizing available space for website display. keysurf is independent of the input device in the sense that it can be controlled by any input device that is capable of producing character output in some way. if information about which characters are easiest to produce with the given input device is available  the input device efficiency model   it can be used to generate more efficient labels for unlabeled elements on a page.
　the link selection mechanism relies on web page elements from the current page being extracted  assigned a relative priority for the current page  and unlabeled elements being given a label before selection can be commenced. once characters are entered into the browser  the user centric search module  section 1  determines which element is most likely to be that which the user intended  based on the characteristics of the matching elements. matches are marked by the match highlighter module  with a green highlight for the default match  and yellow for other possible matches.
　as pages are loaded  the user browsing history component keeps track of user browsing activity such as page viewing time and key terms from web pages  section 1.1 . more explicit indicators of user interest such as a user's search terms or pre-seeded interest keywords are taken into account as well  section 1.1 . web browsing history is used to calculate the interest score corresponding to keywords from extracted pages  which is used in conjunction with the elements on a loaded page to suggest potentially interesting links to users on long pages  section 1 .
1 user centric search
　the concept of using incremental search to find text or select links on a page is not new. for example  this type of search is implemented in the mozilla family of browsers under the name of find as you type  fayt . as the user types a character  the system searches the page starting from the top and focus the first text link that contains that letter. the match is continuously updated as more characters are typed. while this represents a marked improvement over simply iterating through links linearly  which is common in other major browsers   the matched links are often not what a user expects. since the fayt algorithm does not take the location of the matched substring into account  the first match is often found somewhere inside a word of link text  resulting in matches that do not necessarily correspond well with the user's expectations. by default  links are also searched starting from the top of the page  resulting in a jarring transition for users as the web page view jumps to off-screen matches.

figure 1: keysurf system overview.　to improve on this approach  we have implemented a series of algorithmic constraints on the incremental search algorithm to more accurately match the user's expectation of the link that should be selected given a certain query. these constraints are best summarized as a set of relations between which types of matches are prioritized over others. note that all following examples represent possible matches given that the user has typed an upper case  s .
1. currently visible links before off-screen ones.
1. visually prominent links before subtle ones. web authors often indicate important links with a larger font or emphasized text. ex. search before sports.

1. same case matches before case insensitive. we assumethe upper case letter was deliberately chosen  since upper case letters require additional effort to produce with most input devices. ex. sybase before systematic.

1. starting characters of link before others. left to rightreading order suggests that the beginning of the link text is the most logical location to start typing letters when starting to select a link. ex. sports news before download sdk.

1. starting characters of words before other substrings.word boundaries present a more logical starting point to begin typing than positions within words.
ex. download sdk before downloads.
　basic selection is accomplished using only these precedent rules. if two or more elements cannot be separated by typing two letters  we provide a shortcut method to uniquely select them with fewer keystrokes. for example  if the page contains the links download sdk and download sudoku  typing  d  will highlight the first in green  while the second link is highlighted yellow and the number  1  is overlaid in a translucent box. figure 1 shows an example of the three possible types of element highlighting on a web page. with only the rules previously mentioned  a user would have to type download su to select the second link  which is clearly not acceptable for users with low bandwidth key input.

figure 1: highlighted elements after typing  h .
　to select the second element with fewer inputs  the user may either type the number one  1   or press the down arrow key after they have typed  d . these shortcuts were added primarily for users with low bandwidth keyboard input  as it establishes an upper bound of two keystrokes to select any element  providing that the visible section of the page does not contain more than 1 links with the same first two characters  which is a valid assumption in most cases . users capable of faster character input retain the option of typing just the letters of their desired link  which requires less visual feedback  no processing of number overlays  at the cost of some extra keystrokes. in the example given above  an experienced user could also type su to select the second link  due to constraint number 1 .
1 integration with external input devices
　with prior knowledge of all possible selectable actions on a page  it is possible to improve the performance of certain types of input devices by constraining their set of possible outputs  and providing information about the relative priority of characters. although the additional information provided by the keysurf system can be used in any virtual keyboard to improve word completion  this type of integration has the most benefit in ambiguous layout virtual keyboards  which seek to improve typing efficiency by dynamically adjusting their layout based on the probability of possible upcoming letters. these types of keyboards aim to improve typing performance by making likely letters easy to type. the dasher project  and cogain's gazetalk   as well as canassist's dynamic keyboard  are examples of such applications.
　to facilitate the integration with input devices  our system exposes the labels for all elements extracted from the current web page  as well as their corresponding relative priority. any virtual keyboard or other dynamic input device may access these data to improve performance for the task of typing characters to select an element. as a proof of concept  we have begun implementing two interfaces using these data: one using a speech recognition engine  section 1.1   and one using canassist's dynamic keyboard  depicted in figure 1 .

figure 1:	the interface of canassist's dynamic keyboard.
　the canassist dynamic keyboard presents only five large buttons containing the letters of the english alphabet  which enables users to easily click buttons even with a very inaccurate pointing device  such as a head mouse or eye tracking system . during normal operation  the dynamic keyboard uses a statistical language model to filter the available letters  and move the most likely letters into their own buttons  such that they can be selected with one click . this rearrangement can decrease the required pointer movement and number of clicks per character. when the dynamic keyboard is used to control keysurf  the standard language model is replaced by a language model generated from the exposed website text and priorities. as there are far fewer distinct letter sequences on a web page compared to the entire english language  the probability of likely letters having their own button is much higher than with a complete language model  which reduces the required number of inputs to produce characters.
1.1 integration with speech recognition
　for users unable to use a keyboard or pointing device but able to verbalize their intentions  an alternative is the use of a voice controlled interface. although consumer speech recognition tools have improved dramatically in recent years  recognition accuracy for dictation is still an issue if the engine is not adequately trained or users have difficulty with clear pronunciation. however  it is clear that speech recognition accuracy and speed can be improved by restricting the recognition vocabulary to small sets and minimizing the word length of commands  1  1 . given our objective of selecting page elements with keysurf  we constrain the recognition set to only those words appearing in the link text and generated labels on the current page. thus  a user can directly select a link or other element by speaking words in its name. several similar interfaces have been developed in the past  beginning with speech integration for the mosaic browser over ten years ago .
　while the active vocabulary generated from each page is small  any word in the page's language can occur in this set  which dictates that users be able to clearly pronounce a very wide range of words. in a study by christian et al. comparing the performance of a direct selection voice browser with mouse interaction for non-disabled users  few recognition errors were encountered . however  the tested pages contained less than five visible links at a time  while modern web pages being displayed on high resolution screens can present dozens of selectable elements. in addition  words appearing in link text must be recognizable by the speech engine  which is often not the case for proper nouns or abbreviations. these limitations make direct selection systems unsuitable for users with disabilities who have difficulty with clear pronunciation  or who can only pronounce a small set of words with sufficient clarity to be recognized by speech recognition engines.
　an alternate voice interface is simple voice spelling. as selecting any element with the keysurf system is designed to require only two or three characters  recognizing a whole word is more than is required to uniquely select an element. to represent the letters of the english alphabet  we use a slightly modified version of the nato phonetic alphabet  alpha  bravo  etc.  which allows much more robust recognition than using the letters directly. this initial alphabet serves as a good starting set  but letters can be mapped to any word that is distinct from other words in the set and that a user is able to pronounce clearly. the addition of numbers and some common browser commands gives a final vocabulary size of 1 words. we use the cmu sphinx speech recognition engine  to recognize user commands and convert them to the appropriate character. these characters are then transmitted to keysurf  where they are treated the same as any other text input.
　we conducted a small scale user study involving 1 users of varying age  1 to 1 years   gender and ethnic background to assess the accuracy of the untrained sphinx speech recognition engine on our set of words. users achieved an accuracy of 1% on the first attempt. we anticipate that even higher recognition rates can be achieved with more advanced speech engines. this shows that the simplified spelling interaction combined with the keysurf system has the potential to be a very robust yet efficient voice browsing alternative.
1 accessing bookmarks
　for the most part  the major web browsers provide adequate keyboard shortcuts for common web browser actions  back/forward  bookmark page  etc . for these common actions  no additional support is necessary to facilitate use by people with disabilities. accessing bookmarks  however  is usually quite cumbersome  with users having to manually scroll through each bookmark entry in the menu to locate their desired bookmark  with a bidirectional menu containing n bookmarks  activating a bookmark requires on average at least n/1 + 1 keystrokes  depending on the exact organization of items in the menu . accessing even a moderate number of bookmarks can be slow.
　to address this problem  we have extended our link selection process to also select from bookmarks. since bookmarks can be represented as simple textual links  the same selection process applies as to that for web pages. if the user activates the  bookmarks mode   via the  .  key   the system renders all of the user's bookmarks on a single page  grouped by folder. individual bookmarks can then be selected by typing letters as normal. this system places an upper limit on the number of required keystrokes to activate a given bookmarked site to four keys  one key to show the bookmarks  and a maximum of three to activate any link  providing that all bookmarks can be rendered on a single page .
1. bringing interesting pages closer
　scrolling through long pages to find interesting content requires many repeated key activations  which can represent significant effort for users with low bandwidth input. to go beyond a navigation system for visible content  we have developed an addition to the keysurf system to help the user find interesting content on long pages. after a page loads  we use our estimation of user interest  section 1  to suggest a number of links that may be interesting to the user. if interesting links are found on the page  they are displayed beside the loaded web page in a list. these links serve to highlight sections of pages that may be of interest to users  thus potentially saving time when searching a page for relevant information. in addition  the links are numbered to allow fast access using the same selection process as for regular elements on the main page. links in the side bar are displayed with a small amount of surrounding text to assist users in assessing the context of the link and making a decision about whether to select it. a screen capture of the browsing interface showing the suggested links bar is depicted in figure 1.

figure 1: keysurf interface showing suggestion bar.
　for each word in each link on the page  the system queries the keyword list to find a match  section 1.1 . if a word cannot be located in the keyword list  it is stemmed  using a javascript implementation of the porter stemming algorithm   and the lookup is repeated. the score of each word in the set defined by the intersection of the current link text  l  and the keyword list  k  is summed to produce the link score ls = Σks ki  where ks ki  is the keyword score for each keyword ki （ l ” k. for performance reasons  we only check the highest priority elements in the keyword list when calculating the keyword score for link words on the page. the link interest scores are used to determine interesting links in the suggestion bar.
1 inferring user interest
　the browsing enhancement features of the keysurf system rely heavily on having a good estimate of the user's interests. to determine what may be of interest to the user  we look at various aspects of a user's browsing history  such as pages visited  page activity  and topics searched. these interest indicators are discussed in detail in the following sections. logging these interest indicators and computing the estimated user interest scores has minimal impact on browsing performance  as processing is performed after a page has loaded and the user is not actively interacting with keysurf.
1.1 page interest score
　as other authors have noted  while it may be more accurate to explicitly query the user about their degree of interest in visited pages or general topics  the rating process is too intrusive and time consuming for most users. especially when considering the target population  where any selection requires significant effort  explicit ratings are not feasible. to address this problem  there has been significant prior work in the area of implicitly determining user interest based on a user's browsing history. previous approaches have attempted to find a correlation between a user's interests and various factors such as page viewing time  scrolling time  mouse clicks  and related activity  bookmarking  printing . in a user study comparing explicit ratings with observed factors  claypool et al. concluded that time spent viewing a page and the total time spent scrolling provide the best indicators of interest in that page .
　since one of the goals of our system is to reduce scrolling time by bringing interesting links to the top of a page  measurements of scrolling time may no longer accurately reflect user interest. thus  page interest scores are calculated based on the maximum amount of time spent viewing a page in the user's web history. web page viewing times do not accumulate if a user revisits the same page at a later date. this prevents often loaded pages  such as the user's home page  from dominating the page viewing times  even though each session may only last a few seconds. additionally  pages that are visited repeatedly often contain very dynamic content  news sites present a prime example   such that key terms may change at every visit  and the page viewing time for the previous visit cannot be meaningfully added to the current viewing time.
　we define page viewing time as the time elapsed between when a page is rendered by the browser and the time just before the page is hidden from view  either by navigating to a new page or closing the browser . by only measuring time after a page is rendered  we exclude the variable loading time due to network congestion and page size. to detect when a user is actively viewing a page  versus being distracted by external events   we keep track of input activity  mouse movements  key presses  and mouse clicks  while a web page is open. if there are no input events for 1 minutes  the page timer is paused until another input event occurs. to calculate page score ps  we normalize page viewing times by defining a maximum viewing time of 1 minutes as maximum interest  and scaling times to this maximum to obtain page scores between 1 and 1.
1.1 web page keyword ranking
　the keyword extraction and scoring algorithm is executed on every web page visited by the user  starting from the time the page is initially displayed by the browser. the algorithm steps are as follows:
1. web page loads and is displayed to the user.
1. system begins recording page viewing time  see section 1.1 .
1. web page is converted to plain text format  and processed by a keyword extraction algorithm. to extract keywords from the document  we make use of the term extraction service  part of yahoo! search web services . this allows us to send plain text documents to the web service using xmlhttprequest and retrieve a set of key terms. although details of the algorithm are not available  the use of the term extraction service has the benefit of not requiring complex term extraction algorithms and supporting data to be implemented on the user's computer. users in need of assistive technology often do not have the resources for high performance computing hardware  and minimizing the computational requirements of our system is an important factor in its utility. in the future we may implement a keyword extraction component on our own servers to realize more control over the extraction process.
1. web page is closed  by navigating to another page .
1. page score ps is calculated from the recorded user activity on the page.
1. keywords are assigned a normalized weight based ontheir relative importance in the page  w1..wn for the n keywords on the page . relative importance is determined by the keyword extraction process. currently we weight keywords from highest to lowest in the order they are returned from the term extraction service.
1. the keyword scores in the keyword list are updated asfollows:
  for each keyword that appeared on the current page  a keyword score ksi is calculated from the current page score ps and the keyword's relative importance wi as follows:
ksi = ps   wi
keyword scores are added to the keyword list using the incremental mean formula:

where mks n   mean keyword score  is the value previously stored in the keyword list and n is the number of pages where this keyword has occurred. note that if the keyword does not exist in the list  the second term will be zero and the keyword will be added with an initial score of ksi. the value of n is incremented in the list for each of these keywords.
  if a keyword on the list is not present on the current page  its score in the list is reduced by a constant aging factor a  where 1   a   1. the aging factor is introduced to bias the list of keywords to more recent user interests  and to ensure that isolated high interest keywords do not dominate the top of the list. this factor is chosen empirically to balance prioritizing newer interests with maintaining long term interests in the list.
1.1 user searches
　a more direct indicator of user interest is search terms entered into search engines or the search fields of other websites. as we detect these search terms  they are processed by the same keyword extraction algorithm as discussed in section 1.1. we treat these keywords similarly to those extracted from visited pages. as there is no equivalent to the page score for terms extracted from search fields  we add these terms to the list with an empirically determined initial score  close to 1 .
　the key to making effective use of data entered into web forms is to differentiate between search fields and other text input fields  such as those used for web based email interfaces or other personal information fields commonly found on web pages. to detect search fields  we compare the text entered into text fields with the get parameters of the next loaded page. if a match is found  we assume that the text was a search term and process it as an indicator of user interest. although this simple method cannot detect all search fields  some custom search fields use post to submit terms   all major search engines are supported.
1. evaluation
　to evaluate the performance and usability of our web navigation system  we conducted testing to evaluate the quantitative navigation efficiency of the selection mechanism  as well as the usability for users with disabilities.
1 average navigation efficiency
　using the selection shortcut of the user centric search method  section 1   we determined the upper limit of the keys required to uniquely select any element to be two  three to activate . however  the actual number of keys necessary on typical web pages depends on the distribution and text of visible elements. as the number of visible elements increases  the probability of the first character of a desired link being unique amongst the starting characters of all visible links on the page decreases. due to the default selection that allows the activation of the  green highlighted  link even if there are other matches  if there are n visible links starting with the same character  then one link will be uniquely selectable with one keystroke  while n 1 elements will require two keystrokes  assuming that not more than 1 links start with the same two characters . to find the average number of required keystrokes  we implemented a modified version of the keysurf system that automatically loads randomly selected web pages  and calculates the average keystroke cost for each visible element on that page.
　the system analyzed a set of 1 unique web pages  chosen randomly by the system by following links from several root sites  various popular web portals . results are shown in figure 1.

figure 1: average required keys per element selection.
　the average number of visible elements  elements visible on page load  was 1  with each element requiring on average 1 keys to select. activating an element after it has been selected adds one key  giving an average of 1 keys required to follow a link or activate another web page element. performance with page sequences from real user sessions is expected to improve further over these results  as keysurf attempts to prioritize elements that the user is likely to select.
1 usability for people with disabilities
　to determine the usability of the system for those with disabilities  we conducted preliminary testing to gather evidence on how keysurf performs for some representatives of the target audience. this initial testing is aimed to compare our system to the browsing method that study participants are most familiar with. at this point we do not aim to compare keysurf to other keyboard navigation systems  as none of the participants were using such systems  and we wanted to initially determine if keysurf would be an improvement over their usual browsing method. participants are described in section 1.1  the experimental setup is detailed in section 1.1  and results are presented and discussed in section 1.1.
1.1 participants
　we conducted our test on four persons with cerebral palsy. participant age varied from 1 to 1  with all participants having experience using computers and navigating on the web. three participants used pointer based input devices to navigate the web at home  while one used a regular keyboard. one participant was deaf and non-verbal but was able to communicate by using sign language and reading lips. one other participant was also non-verbal and communicated with a text to speech assistive device.
　the test consisted of participants performing a web navigation task with a pointer device using a regular browser  and a keyboard device using keysurf. table 1 shows the
subjectuser's accustomed
devicekeyboard deviceapenny giles trackballregular keyboardbinfogrip joystick plusintellikeys usbcpenny giles trackballregular keyboarddregular keyboardregular keyboardtable 1: input devices used by test subjects.
input devices used during the test by each user. both the pointer and keyboard devices were chosen individually for each user to match the device they used at home as closely as possible.
　subjects a and c used a large penny giles track ball designed specifically for people with disabilities to control the mouse cursor. although pointing accuracy was a problem for subject a due to difficulty with fine motor control  subject c was quite accurate at the expense of movement speed. subject b used a joystick to control the mouse cursor with good accuracy and speed. subject d was not able to use any pointing device and used a keyboard for both tasks.
　for interfacing with keysurf  subjects a and c used a regular computer keyboard  on which they typed letters with one finger  while subject b used a larger  pressure sensitive keyboard designed for people with disabilities  intellikeys usb . the plastic key guard for this custom keyboard which subject b was accustomed to was not available during testing  which slightly impaired his/her typing performance. subject d used a regular computer keyboard for both tests  using his/her mouth to press keys. with an unmodified browser  subject d presses the tab key to advance the element focus on web pages.
1.1 experimental design
　we designed tests to measure the time necessary to select a visible link using each subject's accustomed input device and compared it to the time required using keysurf with a character based input device  such as a keyboard . we picked two sets of 1 wikipedia articles with similar layout such that one can navigate from page 1 to page 1 in each set by following links. the two sets were chosen such that the spatial location of each link leading to the next page was similar between sets  but different in successive pages. in other words  if lai represents the location of the target link in the ith page of set a  then lai 「 lbi and lai =1 lai+1. page content was not considered in our choice of articles.
　prior to commencing the test  operation of our system was verbally explained to users. as some subjects have communication difficulties  the time required for this was variable  but did not exceed five minutes. the steps required to select a link with keysurf were explained as follows:
1. type the first letter of your link.
1. if your link turns green  press  enter  to activate it.
1. if your link turns yellow with a number beside it  typethe number and press  enter .
1. if your link turns yellow without a number  type thenext letter in the link and press  enter .
users were given time to practice selecting links on several wikipedia pages of their choice with both input methods until they felt comfortable with both. two random subjects were assigned to start with keysurf  while the other two started with their usual method. times for the selection process on each page were recorded separately.
　to test selection performance  the first page in a set was loaded and the desired link was pointed out to the user  by physically pointing at the link on the screen . at the same time  a timer was started which measured the time the user required to follow the link. the procedure was repeated on all pages in the set and again using the other selection method on the other set of pages.
1.1 results and discussion
experimental results for each user are presented in figure
1.

figure 1: mean link acquisition times with keysurf and unmodified web browser.
　for users accustomed to using a pointing device to navigate on the web  the resulting times show that the relative performance of keysurf depends on the user's typing rate versus their ability to accurately control the on-screen pointer. to determine the significance of the differences in mean selection times  we performed independent t tests assuming unequal variances and a null hypothesis of no difference in means. p values for subjects a through d were 1  1  1  and 1  indicating that the null hypothesis could be rejected with high confidence for all subjects except a.
　while the mean selection times for subject a were not significantly different between methods  the range of values is more constrained using keysurf than with the pointing device. this is due to the fact that subject a frequently had problems with involuntary movement when controlling the track ball. this led to highly variable selection times  as some links could be selected very quickly  while others required several attempts. in contrast to this  subject a's typing performance was quite constant  making selection times with keysurf much more predictable. however  more study is necessary to determine if the use of keysurf would be beneficial to subject a.
　although subject c was accurate with the trackball device  performance with the keysurf was significantly better  with a mean time of 1 seconds versus 1 for the trackball selection. in an informally extended testing session with subject c  the advantage of keysurf was found to increase further for selection tasks that required scrolling  since with the trackball the subject has to move to the scroll bars to scroll down  and then move back to the web page content to make a selection.
　subject b did not benefit from the keyboard selection process used in keysurf. in fact  mean link activation time with the joystick was significantly lower than with the keyboard. this result stems from the fact that subject b was very accurate with the joystick  but had trouble accurately pressing keys without the help of the plastic key guard. although keysurf performance for subject b may increase with the use of a better keyboard  we anticipate that for this subject the regular pointing interaction is more suitable.
　since subject d already used a keyboard to navigate the web  it was expected that any improved keyboard navigation system would have a large effect on element activation times. this was verified by our testing  where mean selection time using keysurf decreased by 1% over this subject's accustomed method. subject d was very pleased with keysurf and has begun using the system at home.
1. future work
　although we hypothesize that the sidebar with suggested links will be useful to find interesting content and to reduce scrolling time  this component of our system remains to be tested. effective user testing of this component is difficult  as the performance of the recommendation system depends on an accurately populated interest keyword list for a given user  which can only be obtained through regular use. we are currently planning extended user testing  where users will be asked to use the keysurf system as part of their home web browsing routine for a period of several weeks. during this time  the system will record usage statistics such as sidebar use  page activity  and element selection cost to build a more accurate estimate of the system's performance for real world use.
　an additional important factor determining the viability of the keysurf system is its perceived usability by users. as keysurf presents an interface that users are likely not familiar with  qualitative feedback will be very important to judge its value as a web navigation tool.
1. conclusions
　we have presented keysurf  a novel character controlled web navigation system designed for users with disabilities that prevent them from accurately controlling a pointing device. by implementing several constraints on the matching algorithm that prioritize likely elements  we improve on the incremental search selection process and allow the user to select any element on a web page with very few keystrokes. taking into account indicators of user interest  we provide a link suggestion system to aid in finding interesting content  and reduce the need for scrolling on long pages. results from a pilot study indicate that the keysurf web navigation system can significantly decrease selection time for people who have difficulty with accurate pointer control  even if their typing speed is slow.
