in this paper  we present an outline of a software system for buzzbased recommendations.  this system is based on a large source of queries in an ecommerce application.  the buzz events are detected based on query bursts linked to external entities like news and inventory information.  a semantic neighborhood of the chosen buzz query is selected and appropriate recommendations are made on products that relate to this neighborhood.  the system follows the paradigm of limited quantity merchandizing  in the sense that on a per-day basis the system shows recommendations around a single buzz query with the intent of increasing user curiosity and promoting user activity and stickiness.  the system demonstrates the deployment of an interesting application based on kdd principles applied to a high volume industrial context. 
categories and subject descriptors 
h.1  information storage and retrieval : information search and retrieval - information filtering. 
general terms 
design  experimentation  human factors. 
keywords 
large-scale buzz detection  semantic relatedness  surprise a day. 
1. introduction 
in the offline world  buzz marketing   is a well-known approach for merchandizing.  when marketing communication in general  is expensive and weighted with clutter buzz marketing - a combination of word-of-mouth  viral marketing  and trendspotting is effective because it is both interruptive and subversive.  buzz marketing could be one of many kinds  starting with paid agents to serendipitously introducing products to the public to something like the recent creation of bzzagent  www.bzzagent.com  where a few users get early access to the product which they help spread to the general community. 
sites with a  deal a day  model like  recommend random items  
 
 
  
 copyright is held by the author/owner s . 
kdd'1  august 1  1  las vegas  nevada  usa.  acm  1-1-1/1. 
 
 
by focusing on one item that typically lasts for 1 hours and is cheaper than market price.  woot.com  is an internet retailer and the pioneer of the  one deal a day  business model on the internet.  woot's main web site generally offers only one discounted product each day and their tagline is  one day  one deal .  there are many sites that have become popular by following the paradigm of limited quantity merchandizing.  one such example is audreybags.com where limited quantity of audrey hepburn handbags are sold at high prices for charity .  some others include www.midnightbox.com  www.yugster.com  www.maczot.com  www.bitsdujour.com and www.bfiz.com.  this is an indication that limited quantity merchandizing and fresh daily content are great traffic drivers in today's web world.  our surprise of the day system stresses on the following four aspects of recommendations: freshness  novelty  popularity and 
limitedness.   
the software system detects query bursts that are unusual and infrequent and are worth displaying in headlines.  for large online communities bursty activities carry information about wisdom of crowds and about events  trends  things in vogue or products in sudden demand.  for large communities  a substantial percentage of the community may not be aware about such events and trends and hence such bursts if shown to them would be surprising.  therefore we refer to bursts in query activities as surprises. 
our system detects current trends and products with a buzz around them by mining them from a massive set of ebay queries on a daily basis.  it detects buzz of the day and also a semantic space around the buzz to use for recommendations.  the surprise of the day web system recommends products around one buzz term daily which might be related to sports  celebrities  movies  interesting ebay auctions  new products  death of famous personalities or anything else that could generate a spike in user interest. 
1. surprise of the day 
1 surprise of the day system 
figure 1 below shows a screenshot of our surprise of the day system.  it displays a unique page everyday.  figure 1 shows the content for one particular day  the 1rd of may 1.  the buzz query for the day is  oscar de la hoya .  the following sections describe the content on the page in more detail. 
 
 
 	 
 	 
 

 
figure 1 screen-shot for surprise of the day web system for the 1rd of may 1.  the buzz of the day is  oscar de la hoya .  the buzz is because oscar de la hoya outpointed steve forbes as indicated by the news articles on the left.  ebay items in the form of rookie card  poster  dvd and picture are shown.  the temporal graph shows the spike in user interest after his win.  a network of queries recommends other semantically related queries  clicking on which might show products related to other popular boxers.  there is a date picker on the top of the page  to view the page for any particular day.  
1 buzz queries 
we start with a state-based burst detection model described by kleinberg  for bursty structures in streams and extend it to become incremental for large datasets.  the interested reader can find more details in our paper .  bursts in queries are detected by applying this model to ebay queries.  these bursts are then ranked using ranking algorithms which include external dimensions like occurrence of burst query in recent news articles and the availability of inventory satisfying that query on ebay.  community feedback can be added to the ranking algorithm to increase the variety of recommendations.  after ranking the daily query bursts in such a manner  the top burst is picked up and is used for surprise of the day application.  ranking the bursts in these ways ensures that we pick something that is interesting to be identified as the representative query of the day and also that there will be some interesting news event or causality around it to satisfy the reasoning of the users. 
 
1 semantic space around the buzz 
as shown in figure 1 we not only display the buzz term and related products but also a network of queries which gives the users an option to view products related to a variety of terms that might be related to the buzz term. 
we use an ensemble of algorithms including a kernel function that can map short queries to a higher dimensional space using closed transaction data  to find queries that are semantically related to the buzz query  . 
 
figure 1 shows the query network for the buzz query  ryan newman .  as is evident from the recommendation for  ryan newman jacket   our algorithm captures specialized products related to the buzz query.  also  the recommendations for  tony stewart    kacy kahne  and  kurt busch  show that our system can recommend competing products or similar personalities and products.  all these people are related to nascar racing.  the query network is able to find current trends.  it recommends  ryan newman 1 .  it can capture the general theme around the buzz query; it recommends  daytona 1 . 
 
 
figure 1 the query network shown for  ryan newman  as 
surprise of the day for 1th of february  1.  the font sizes are proportional to the interest level for the query on ebay.  the connections are based on textual relationships measured by term distance  relationships based on community activity mining  searches in same session / similarity inference based on buying behavior  or a combination of both methods.  the thickness of the edges indicates the strength of semantic 
similarity between the buzz query and the recommended queries. 
 
1 related news  products for sale  and more 
as shown in figure 1  the left side of the page has a panel which shows related news.  for users who see different recommendations everyday  the related news section acts as an explanatory factor for the recommendations to the user.  it also sometimes acts as an information source and serves the logical curiosity of users.  if the buzz is around a sports star who starred in a win  a celebrity who died  or around an interesting 'out of the blue' ebay auction  the news panel on the left will automatically reflect this causality.  the bottom of the page displays the related products in the form of four matching items.  by default it shows product items for the buzz query.  when a user clicks on different query recommendations in the network  the items shown change according to the recommendation that is clicked on.  this system is a social recommender system.  there are also two emoticons on the page for social feedback  which a user can click to show surprise or disappointment sentiments on viewing the page.  there is a  surprise me  button  which randomly shows one surprise of the day page from the archives.  the temporal graph indicates the intensity with which the query suddenly became popular.  also alongside the query  we show a value of the query which is calculated based on amount and price of recent inventory matching that query sold on ebay. 
1. technical specifications 
the technical specifications of our software system are described via a block-diagram below in figure 1. 
 
 
figure 1 back-end and front-end components of surprise of the day software system 
 
 
as shown in figure 1  the back-end for our system mostly comprises of components written in c++ and the front-end for our application is written in adobe flex .  our system is based on recommendations that are mined from a massive set of data and having our back-end in c++ running on a  cluster of sun x1 bit  1 cpu   1 ghz  i1 processor supermicro h1qc1 with 1gb ram  machines helps us achieve better performance.   
ebay is the world's online marketplace r   enabling trade on a local  national and international basis.  with a diverse and passionate community of individuals and small businesses  ebay offers an online platform where millions of items are traded each day .  millions of collectibles  decor  appliances  computers  furniture  equipment  vehicles and other miscellaneous items are bought  and sold daily by a community of around 1+ million users .  this generates a lot of activity on the ebay site  which is recorded and stored in the form of daily log files.  at the end of the day these log files are fed to two data crunching jobs shown in figure 1.  the burst detection engine looks at the daily queries and also some historical temporal data for the queries.  it implements a state-based burst detection algorithm described in  and .  it provides a configurable system which can accept input parameters to change the precision and recall of the mined bursts.  based on experimentally determined optimal settings it detects around 1 daily bursts in queries.  these bursts are then ranked using a burst interestingness ranking algorithm described in .  the coefficients for the algorithm are configurable and are set to give considerable weightage to linkage of bursts to current events.  in order to do the ranking  the burst detection engine calls publicly available news apis for getting information about current events and also the ebay api  to get information about ebay inventory.  the top ranking burst is selected as the buzz query for the day.  the burst detection engine then outputs an index file which has the buzz query  the value of the buzz query and buzz related news events.  the value of the buzz query is obtained by querying ebay transactions to find the average value of products matching the buzz query sold in the past week.   
the current day's user events along with some historical logs are also fed to a semantic relations indexer which looks at all queries in the logs and also at user activity to infer semantic relationships among queries.  the output of this indexer is a multi-graph  network of ebay queries   where query nodes could be connected by any of three kinds of edges: textual relationship  same session search relationship  inferred relationship based on community buying behavior.  in order to connect related queries based on term similarity  any query q1 that can be formed by either removing words from or adding words to query q1   is connected to query q1 with a textual relationship edge.  in order to build these relationships efficiently the semantic relations indexer first builds an inverted index from the queries.  the index provides fast lookup to find all queries that contain a particular term.  it also provides fast lookups to find all queries that have a particular number of terms.  this index is then used to find the textual edges connecting the query nodes.  the same session search relationship edges are found by connecting queries done by a user in the same session.  also  the buying behavior of the users is used to map queries to a higher dimensional feature space  and the query nodes found to be similar using a similarity function in this higher dimensional space are connected using an inferred relationship edge.  these edges are detected efficiently by using some techniques described in .  the semantic relations indexer outputs an index in the form of a graph which is consumed by the semantic relations server.  the semantic relations server is a server written in c++  it uses http as the input/output protocol.  it can support 1+ queries per second.  given an input query it can return a relevant sub-graph around the input query  which is used for recommendation purposes. 
whenever invoked by the user the flex front-end queries a perl aggregation service.  the perl service is a simple service which can aggregate data from buzz index and semantic query index and output it in an xml format back to the flex client. 
the perl service also ranks the neighborhood nodes around the buzz query returned by the semantic relations server using a committee styled approach.  the relationships between nodes in the multi-graph which are connected by all three kinds of edges are ranked higher than those connected due to two kinds of edges  which are in turn ranked higher than relationships based on only one kind of an edge.  this is useful to prune the sub-graph and show only the strongest connections for the buzz query  to make the best possible use of the limited real-estate on the web interface. 
adobe flex  was chosen for the client-side framework because of the convenience it offers in building interfaces.  the code gets compiled to a swf file that runs in the flash player.  this is beneficial because the flash player today is a pervasive software platform.  also by using flex as the client side framework  we were able to use the adobe flex 1 springgraph component  to display the query network. 
 
1. summary 
we described a software system which shows how a combination of various data mining techniques can be applied to high volume industrial data  query logs  to mine novel and interesting content.  using this software system we would like to analyze how users react to the buzz based recommendations and would also like to study community reaction and feedback. 
