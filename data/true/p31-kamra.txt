data represent today a valuable asset for companies and organizations and must be protected. most of an organization's sensitive and proprietary data resides in a database management system  dbms . the focus of this thesis is to develop advanced security solutions for protecting the data residing in a dbms. our strategy is to develop an intrusion detection  id  mechanism  implemented within the database server  that is capable of detecting anomalous user requests to a dbms. the key idea is to learn profiles of users and applications interacting with a database. a database request that deviates from these profiles is then termed as anomalous. a major component of this work involves prototype implementation of this id mechanism in the postgresql database server. we also propose to augment the id mechanism with an intrusion response engine that is capable of issuing an appropriate response to an anomalous database request.
1.	introduction
　data represent today an important asset for companies and organizations. some of these data are worth millions of dollars and organizations take great care at controlling access to these data  with respect to both internal users  within the organization  and external users  outside the organization. recently  we have seen an interest in database activity monitoring solutions that continuously monitor a database management system  dbms  and report any relevant suspicious activity . this step-up in data vigilance on part of the organizations is partly driven by various government regulations concerning data management such as sox  pci  glba  hipaa and so forth . organizations have also come to realize that current attack techniques are more sophisticated  organized and targeted than the broadbased hacking days of past. also  with greater data integration  aggregation and disclosure  preventing data theft has become a big challenge  both from outside and within.
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee.
proceedings of the second sigmod phd workshop on innovative database research  idar 1   june 1  1  vancouver  canada.
copyright 1 acm 1-1-1/1 ...$1.
lebanon ece.purdue.edu
standard database security controls such as access control mechanisms  authentication  encryption technologies and so forth are not of much help when it comes to preventing data theft from insiders. the above mentioned threat scenarios have forced organizations to re-evaluate security strategies for their internal dbmss . so what new strategies can be adopted to develop and deploy a dbms with high-assurance security  in all its flavors   we see two distinct yet complimentary ways of achieving this goal. the first strategy is to monitor database activity  using third-party products  to detect any potential abnormal behavior. gartner research has identified database activity monitoring  dam  as one of the top five strategies to dramatically limit data loss information leaks for organizations  1  1 . moreover  there are already several products on the market today that try to address these concerns of organizations . the second strategy is to revise architectures and techniques adopted by a traditional dbms . an important component of this new generation security-aware dbms is an intrusion detection  id  mechanism built as an integral part of a dbms . however  despite the fact that building id systems for networks and operating systems has been an active area of research  few id systems exist that are specifically tailored to a dbms. the goal of this work is to develop efficient and effective algorithms for detecting intrusive user behavior in context of a dbms  and augment that with an intrusion response engine. we next present the problem statement for this thesis.
1	problem statement
　the goal of this thesis is to develop architectures  mechanisms and algorithms for a dbms equipped with activity monitoring  intrusion detection and response capabilities. within this broad context  the research issues that we address are as follows:
1. creating profiles that succinctly represent user/application-behavior interacting with a dbms.
1. developing efficient algorithms for online detection ofanomalous database user/application behavior.
1. developing strategies for responding to intrusions incontext of a dbms.
1. creating a system architecture for database intrusiondetection and intrusion response as an integral component of a dbms  and a prototype implementation of the same in postgresql relational database .
1	paper roadmap
　the rest of the paper is organized as follows. the next section presents some of our existing work in detecting anomalous database requests. we then discuss in detail the related work in this area. we end with some preliminary ideas for future work.
1.	our approach
　we discuss the various pieces of our approach in this section. we start off with a discussion of the system architecture.
1	system architecture
　the system's architecture consists of three main components: the conventional dbms mechanism that handles the query execution process  the database audit log files and the id mechanism. these components form the new extended dbms that is enhanced with an independent id system operating at the database level. the flow of interactions for the id process is shown in figure 1. every time a query is issued  it is analyzed by the id mechanism before execution. first  the feature selector extracts features from the raw user query and converts it into one of the forms supported by our id mechanism . the detection engine then checks the features against the existing profiles and submits its assessment of the query to the response engine. the response engine consults a policy base of existing response mechanisms to issue a response depending on the assessment of the query submitted by the detection engine. notice that the fact that a query is anomalous may not necessarily imply an intrusion. other information and security policies must also be taken into account. for example  if the user logged under the role is performing some special activities to manage an emergency  the id mechanism may be instructed not to raise alarms in such circumstances. if the response engine decides to raise an alarm  certain actions for handling the alarm can be taken. the most common action is to send an alert to the security administrator. however other actions are possible  figure 1   such as disable the role and disconnect the user making the access or drop the query. if by assessment  the query is not anomalous  the response engine simply updates the database audit log and the profiles with the query information. before the detection phase  the profile creator module creates the initial profiles from a set of intrusion free records from the database audit log.
　we next describe some of our current work in detecting database anomalies.
1	detecting anomalous database requests
　in   we have described algorithms for detecting anomalous user/role access to a dbms. in order to identify normal behavior  we use the database audit files for extracting information regarding users' actions. the audit records  after being processed  are used to form initial profiles representing acceptable actions. each entry in the audit file is represented as a separate data unit; these units are then combined to form the desired profiles. we consider two different scenarios while addressing this problem. in the first scenario  we assume that the database has a role based access control  rbac  model in place. under a rbac system  permissions are associated with roles  grouping several users  rather than with single users. our id system is able to determine role intruders  that is  individuals that while holding a specific role  behave differently than expected. an important advantage of providing an id technique specifically tailored to rbac databases is that it can help in protecting against insider threats. furthermore  the existence of roles makes our approach usable even for databases with large user population. when role information does exist  the profile learning problem is transformed into a supervised learning problem. the classification engine used by us is the naive bayes classifier. a profile for a naive bayes classifier consists of the table and column access probabilities for a specific role. the roles are treated as classes for the classification purpose. the id task for this setting is as follows: for every new user request  its role  or class  is predicted by the trained classifier. if the predicted role  or class  is different from the original role associated with the query  an anomaly is detected. for benign queries  the classifier can be updated in a straightforward manner by adjusting the probabilities of the relevant features in the user request.
　in the second case  we address the same problem in the context of dbms without any role definitions. this is a necessary case to consider because not all organizations are expected to follow a rbac model for authorizing users of their databases. in such a setting  every transaction is associated with the user that issued it. a naive approach for id in this setting would be to build a different profile for every user. for systems with large user bases such an approach would be extremely inefficient. moreover  many of the users in those systems are not particularly active and they only occasionally submit queries to the database. in the case of highly active users  profiles would suffer from over-fitting  and in the case of inactive users  they would be too general. in the first case we would observe a high number of false alarms  while the second case would result in high number of missed alarms  that is  alarms that should have been raised. we overcome these difficulties by building user-group profiles  clusters of similar behaviors  based solely on the transactions users submit to the database. given such profiles  we define an anomaly as an access pattern that deviates from the profiles. the specific methodology that we use for the id task is as follows: we partition the training data into clusters1 using standard clustering techniques. we maintain a mapping for every user to its representative cluster. the representative cluster for a user is the cluster that contains the maximum number of training records for that user after the clustering phase. for every new query under observation  its representative cluster is determined by examining the user-cluster mapping. note the assumption that every query is associated with a database user. for the detection phase  we outline two approaches. in the first approach  we apply the naive bayes classifier in a manner similar to the supervised case  to determine whether the user associated with the query belongs to its representative cluster or not. in the second approach  a statistical test is used to identify if the query is an outlier in its representative cluster. if the result of the statistical test is positive  the query is marked as an anomaly and an alarm is raised.

figure 1: system architecture　we have performed experiments on both synthetic and real-world data sets. for generating synthetic sql queries  the database object access pattern of such queries was modeled using a zipf probability distribution. our experiments showed that the detection accuracy of our methods improved as the access pattern of the users/roles became more differentiated. for the real data set  the experiments for the supervised case demonstrated a false negative rate of less than 1% and a false positive rate of approx. 1%. more details on these techniques and experiments can be found in .
1	detecting sql injection attacks
　sql injection is an attack exploiting applications that construct sql statements from user-supplied input. when an application fails to properly validate user-supplied input  it is possible for an attacker to alter the construction of backend sql statements. several threat scenarios may arise because of these altered sql queries. injecting sql queries may allow an attacker to get unauthorized access to the database. moreover  the modified sql queries are executed with the privileges of the application program. an attacker may thus abuse the privileges of the program in a manner unintended by the application program designers.
　in   we propose a framework based on anomaly detection techniques to detect malicious behavior of database application programs. our approach is as follows: we create profiles of application programs that can succinctly represent their normal behavior in terms of sql queries submitted by these programs to the database. query traces from database logs can be used for this purpose. we then use an anomaly detection model based on data mining techniques to detect behavior deviating from normal. the anomalous behavior that we focus on in this paper is behavior related to sql injection attacks. sql injection  traditionally  has been considered as an application level vulnerability and solutions have been proposed at that level . however  even though the mechanism of a sql injection attack is through an application  the resource the security of which is directly threatened is the database. therefore  we propose a solution to enhance the traditional security mechanisms of a dbms to protect against such attacks. the essential idea motivating our approach is that sql injection can be modeled as an anomaly detection problem. in a typical database application  the input supplied by the users is used to construct the where clause of queries at run time. an sql injection attack typically involves malicious modifications to this input either by adding additional clauses or by changing the structure of an existing clause. the projection clause of the query  however  is not modified and remains static because it is not constructed at run time. driven by this observation  we use association rule mining techniques to derive rules that represent the associative relationships among the various query attributes. we derive two sets of rules specific to our task. the first set consists of rules binding the projection attributes of the query to the attributes used in the where clause. the second set of rules represent the relationship among the attributes in the where clause of the query. these two sets of rules together form the profile of an application. to detect an attack query  we check if the relationship among its query attributes can be inferred by the set of rules in the application profile. if not  our system raises an alarm. in summary  our contributions in this work are as follows:
1. we propose novel encoding schemes for sql queriesto extract useful information from them.
1. we present an approach for fingerprinting database applications based on the sql queries submitted by them to a database.
1. we then present an anomaly detection model to detectanomalous behavior of database applications.
1. we further demonstrate how this model can be usedto detect sql injection at the database level.
　for this work  we have performed experiments on synthetically generated sql queries. the experiments were performed to show the performance of our methods by varying the minimum support  for the association rules  and detection theshold parameters. as value of minimum support was increased  we observed an increase in the false positive rate. more details on this technique and experimental results can be found in .
1.	related work
　we first present an categorization of the database activity monitoring products available in the market today. we follow that up by describing existing work in database intrusion detection. finally  we give an overview of related work in detecting sql injection attacks.
1	database activity monitoring
　as we mentioned earlier in section 1  there are several database activity monitoring products on the market today . we categorize them into two broad categories : network-appliance-based and agent-based. networkappliance-based solutions consist of a dedicated hardware appliance that taps into an organization's network  and monitors network traffic to and from the data center. these appliances can either be operated in a passive mode in which they observe the traffic and report suspicious behavior  and an inline mode where all traffic to the data center passes through them. agent-based solutions  on the other hand  have a software component installed on the database server that interacts with the dbms in order to monitor them. each method has its own advantages and drawbacks. a passive network-appliance does not increase network latency but its ability to block an actual attack is limited . moreover  network appliances in general  are handicapped by their inability to monitor privileged users who can log into the database server directly. agent-based solutions  on the other hand  impose extra overhead of an additional software running on the database server and using cpu cycles. but communicating directly with the database server also gives them a better view of the database structure thus enabling them to monitor the server usage in a more effective manner .
1	database intrusion detection
　several approaches dealing with id for operating systems and networks have been developed  1  1  1  1  1 . however  they are not adequate for protecting databases. the reason is that actions deemed malicious for a database application are not necessarily malicious for the network or the operating system; thus id systems specifically designed for the latter would not be effective for database protection.
　an abstract and high-level architecture of a dbms incorporating an id component has been recently proposed . however  this work mainly focuses on discussing generic solutions rather than proposing concrete algorithmic approaches. similar in spirit is the work of shu et al.  who have developed an architecture for securing web-based database systems without proposing any specific id mechanisms. finally  in  a method for id is described which is applicable only to real-time applications  such as a programmed stock trading that interacts with a database. the key idea pursued in this work is to exploit the real-time properties of data for performing the id task.
　anomaly detection techniques for detecting attacks on web applications have been discussed by vigna et al. . a learning based approach to the detection of sql attacks is proposed by valeur et al. . the motivation of this work is similar to ours as in the use of machine learning techniques to detect sql based attacks on databases. their methodologies  however  focus on detection of attacks against backend databases used by web-based applications. thus  their id architecture and algorithms are tailored for that context. we  on the other hand  propose a general purpose approach towards detection of anomalous access patterns in a database as represented by sql queries submitted to the database.
　an anomaly detection system for relational databases is proposed by spalka et al. . this work focuses on detecting anomalies in a particular database state that is represented by the data in the relations. their first technique uses basic statistical functions to compare reference values for relation attributes being monitored for anomaly detection. the second technique introduces the concept of   relations that record the history of changes of data values of monitored attributes between two runs of the anomaly detection system. this work complements our work as it focuses on the semantic aspects of the sql queries by detecting anomalous database states as represented by the data in the relations  while we focus on the syntactic aspects by detecting anomalous access patterns in a dbms.
　another relevant approach towards a database-specific id mechanism is by hu et al. . they propose mechanisms for finding data dependency relationships among transactions and use this information to find hidden anomalies in the database log. the rationale of their approach is the following: if a data item is updated  this update does not happen alone but is accompanied by a set of other events that are also logged in the database log files. for example  due to an update of a given data item  other data items may also be read or written. therefore  each item update is characterized by three sets: the read set  the set of items that have been read because of the update; the pre-write set  the set of items that have been written before the update but as consequence of it; and the post-write set  the set of items that have been written after the update and as consequence of it. such approach identifies malicious transactions by comparing those sets for different item updates.
　an approach which is conceptually most similar to ours is the one underlying the demids system . demids is a misuse-detection system  tailored for relational database systems. it uses audit log data to derive profiles describing typical patterns of accesses by database users. essential to such an approach is the assumption that the access pattern of users typically forms a working scope which comprises sets of attributes that are usually referenced together with some values. demids assumes domain knowledge about the data structures and semantics encoded in a given database schema. distance measures are then used to guide the search for frequent item-sets describing the working scope of users. the drawback of such an approach is that the number of users for a database system can be quite large and maintaining  or updating  profiles for such large number of users is not a trivial task. moreover  the approach used by demids to build user profiles assumes domain knowledge about a given database schema. this can adversely affect the general applicability of the method. our approach  on the other hand  builds profiles using syntactic information from sql queries appearing in the database log  which makes our approach more general than others.
　lee et al.  present an approach for detecting illegitimate database accesses by fingerprinting transactions. the main contribution of this work is a technique to summarize sql statements into compact regular expression fingerprints. the system detects an intrusion by matching new sql statements against a known set of legitimate database transaction fingerprints. in this respect  this work can be classified as a signature-based id system which is conceptually different from the learning-based approach that we propose in this thesis.
　in addition to the above approaches  our previous work on query floods  can also be characterized as a dbmsspecific id mechanism. however  in that work we have focused on identifying specific types of intruders  namely those that cause query-flood attacks. a user can engineer such an attack by  flooding  the database with queries that can exhaust a dbms's resources making it incapable of serving legitimate users.
1	sql injection attacks
　to date  there have been few approaches that apply anomaly detection techniques to identify anomalous database application behavior. one such technique is by valeur et al. . it builds a number of different statistical query models using a set of typical application queries  and then intercepts the new queries submitted to the databases to check for anomalous behavior. our work is similar in spirit to their work but uses association rule mining techniques to build application query profiles. another work by lee et al.  considers the use of learning techniques for identifying web-based attacks on databases. however  their methods for learning query fingerprints are fundamentally different from ours. apart from the above two learning based techniques  there have been other approaches proposed in the literature that use application code analysis to detect sql injection attacks. we direct the reader to  for an in-depth survey of these approaches.
1.	future work
　in this section we discuss some preliminary ideas for future work in this thesis.
1	intrusion response
　intrusion detection for a dbms also invokes another interesting research question. once a database request is detected as malicious by an id mechanism  how can a response be issued for it  standard security violations in the context of a dbms can be dealt with simple and intuitive responses. for example  if a user tries to exercise an unassigned privilege  the access control mechanism denies the access request. however  in order to respond to anomalous database requests  the response mechanisms are not trivial to define. the response can either be conservative and only raise an alarm but let the anomalous request proceed. a more aggressive approach would be to drop the request along with raising an alarm. in most situations  a hybrid approach may be necessary. the key observation is that the id mechanism should have the capability to decide which response action to take under a given situation. we envisage future id systems to be augmented with an intrusion response mechanism that is responsible for providing the end-user with a framework for defining appropriate response actions to intrusive behavior. as part of our future work  we propose to design and implement an intrusion response mechanism within the context of a dbms.
1	prototype implementation
　a major component of this thesis is to illustrate the feasibility and efficiency of our methods. for this purpose  we intend to implement a prototype intrusion detection mechanism integrated with the postgresql database server. the main objectives of this implementation are as follows :
1. to illustrate efficient implementation strategies for developing an intrusion detection and response mechanism inside a dbms.
1. to measure the overhead on normal query processing introduced by the intrusion detection and response mechanism.
