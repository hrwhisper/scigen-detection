most of the content available on the web today is not suitable for wireless devices such as mobile phones or pdas  which are characterized by small sized display  small memory  low power  and low bandwidth access. the industry has developed wireless application protocol  wap   a standard that specifies the application framework and network protocols for wireless devices. in this paper  we propose a solution where users can build a personalize portal of traditional content on the web and they can specify the relevant part of the content they would like to view on wap enabled devices. 
keywords 
mobile devices  wap  wml 
1. introduction 
most of the content available on the web today is not suitable for wireless devices such as mobile phones or pdas  which are characterized by small sized display  small memory  low power  and low bandwidth access. the industry has developed wireless application protocol  wap   a standard that specifies the application framework and network protocols for wireless devices.  the protocol stack defined in wap optimizes standard web protocols  such as http  for use under the low bandwidth  high latency conditions often found in wireless networks. a number of enhancements to the session  transaction  security and transport layers provide http functionality better suited to the wireless network environment. the wap requires the content to be encoded in wireless markup language  wml  to minimize the data sent to the wireless device and to minimize the computational energy required by the client to process the data. 
the importance of this problem can not be overstated; almost all mobile phones sold today are wap enabled and do have the small screen problem. there are phones and palmtops being developed by  for example  nokia and psion that have larger and high-resolution screens but due to their expense they are not expected to gain a significant market share over the next three years.  similarly  there are currently not more than a few percentage points of all web sites that are wap enabled and it is not expected to reach double digit figures in the next three years. 
it will be though a long time that all content on the internet is wap enabled. it requires a large investment for an organization to maintain dynamic content in two formats. industry is addressing this by developing transcoding solutions  where the content in html is transformed to wml. few examples under this category are: transcoding solutions from ibm   up.link wap enhanced services from phone.com   and spyglass prism from opentv . however  these solutions apply generic filters while translating the content and consequently the transformed content may still contain information that a users do not want to view on their  wap enabled devices. in this paper  we propose a solution where a users can build a 
personalize portal of traditional content on the web and they can specify the relevant part of the content they would like to view on wap enabled devices.  
1. architecture of personalized wireless portal system  pwps  
the basic approach we have taken is one of separating the process of identifying what a user wants to see on a web site and when that part of the web page is actually displayed on the wap device for real-time access. that is  we want the wap device user to indicate to the pwps system  using a standard browser  what she would like to see and what part of a page she wants displayed on the wap device. let us illustrate this process by a sample scenario. 
user sets up the wireless portal using a standard browser: for this part we assume that a user wants to set up her portal consisting of a single link. this link when clicked on a wireless device will show her information she selected from  the stock query result page that is typically returned on the nasdaq web site when a user queries for a quote for specified stocks. please note that here we are referring to the nasdaq site  see http://www.nasdaq.com  that does not have wap enabled content.  1.the user visits the pwps web site and follows the instruction to access an arbitrary web site  in our example the nasdaq web site. next she types in the appropriate input fields the stock symbols she wants to track.  1. after hitting submit  the user is now seeing the nasdaq result page through a regular browser that shows all the fancy graphics  other links  other buttons and many details she is not interested in seeing on the wap device. on the wap device she only wants to see  for example  for each stock symbol she submitted   the current quote and the trade volume. she communicates this to the pwps. 
user accesses the wireless portal using a wap enabled device: 1. she visits the pwps web site using her wap device and views her portal  which consists of one link in our example.  1.the user clicks the link and she views the selected information from the query result page of the nasdaq web site in real time. in other words  the user can track the desired information about stocks of her interest by one click on her wap device.  
during the personalized portal set-up phase the user downloads a  controller web page  from the pwps web site. from this page a user starts another browser window to visit the nasdaq web site. next when she is viewing the query result page from the nasdaq web site  she clicks a button on the  controller web page  to indicate the pwps that she is ready for setting up the preference on the displayed web page. consequently  pwps prepares  a new page that shows the original page but with different background color added so that individual components on that page can be selected by the customizer. in addition a select button is added to each component. the customizer then selects  using the buttons provided  all the components that should be displayed on the wap device and submits it back to the pwps. the pwps keeps the selection information and the original url   including any query information that was added to the base url . it then adds a new link  call it 'stock quotations'  to the wml portal of the user that is stored on the wsp. when the wap device user accesses the personal portal on the pwps  the user will see this new link and can click 'stock quotations'. when the pwps receives this wap request  it will send the stored query to the associated url and process the return page to filter out all information not to be returned. next it translates the page into wml and returns it to the user. 
1. prototype implementation 
we have implemented the above strategy by concentrating on web sites where the  highest level structures are tables. in our analysis we have found that 1% of all web sites fall into that category. we decided to  show the user this structure of the page by color coding the table entries and do so recursively as our first attempt to solve the selection problem. that is  every element in a table is highlighted by a different color and that includes tables within tables. we then added a button to each entry  and let the user select what to display in the wap device by clicking as many of the buttons and then submitting a done signal back to the wsp. we have also implemented the parsing of the return page and the selection of the indicated table entries using the stored profile of the appropriate pwps. in our implementation we take this reduced html page and using standard translators produce a wml page that is returned to the wap device. in our implementation the wap device is simulated using the phone.com  simulator and the access of the personal portal is hardwired  that is for convenience we have only one pwps that is accessed when the simulated wap device is initiated. in figure 1  we show the target web page and figure 1 shows the color-coded version that we are going to customize and add to our portal; it is from nasdaq web site.  in figure 1 we show the mobile phone simulator displaying the selected content from the target web page. 
 
  
figure 1. selection from target page. 
 
figure 1. color coded target page. 
 
figure 1. phone simulator selection. 
1. conclusion 
we strongly believe that at least for the next few years our approach for using wap devices for interacting with the web is a viable approach. separating the process of capturing the type of interaction wanted and what to see from the process of actually doing it on the device has its advantages as well as disadvantages. the significant advantage in our approach is that general web sites do not have to adapt their site for wap devices or even worse  maintain dual web sites. secondly  we significantly reduce the traffic between the wap device and the wsp which is usually where the bandwidth bottleneck is. thirdly  we let the user choose what is displayed on the small screen of the wap device.  
