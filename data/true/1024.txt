the emergence of xml has lead to a change in the development style for web sites. xml's advantages  such as the separation of content and presentation  or the possibility to develop application specification markup languages  have changed the creation  management and presentation of web sites. we will investigate the suitability of xml technologies for authoring and delivering virtual  i.e. web-based  courses. we will include various educational services including lectures  tutorials  and lab sessions in our investigation. in particular  we will consider the development of content  navigation  and interactive elements for virtual courses.
keywords
web-based courses  xml-technologies  e-content authoring and delivery  navigation  interactive services.
1. introduction
the creation and delivery of educational systems using the world wide web has seen a lot of support over the last couple of years. the emergence of xml-technologies  offers a new potential infrastructure for these systems. since educational web-sites differ from commercial ones in their objectives  an investigation into technologies for this context is necessary. we shall discuss the benefits and limitations of xml for authoring and delivering virtual courses  i.e.  courses delivered using the web  1 . we shall investigate whether the technologies needed to satisfy implementation requirements of advanced courseware do exist.
our analysis includes the aspects of authoring and delivery. we do not consider collaboration and communication issues here  even though they are of major importance in courseware systems . instead  we focus on individualized systems. maintenance problems caused by evolving systems or systems that have to be configured in various ways shall be considered.
we shall review requirements for web-based educational systems and how they can be matched by suitable xmltechnologies. we shall structure our investigation along the activities of authoring and delivery. we start with a brief introduction to virtual courses  and then look at authoring of static content  authoring of dependencies and navigation structures  managing content and finally at the problems arising in dealing with interactive course material.
1. virtual courses
virtual courses are software environments that provide educational services supporting various learning activities. we shall in particular look at virtual courses that provide a variety of integrated  possibly interactive services   and  are examples . different services provide different views on the material    or different learning activities around the given material   but their content and presentation shall nevertheless be integrated. interactivity is an essential part of learningoriented systems - students learn by doing. this can include simple interactive features such as online multiple-choice questions or more complex ones such as web-interfaces to simulation tools or other software packages.
we shall look at these courses from two perspectives: a teacher's view focusing on educational or authoring problems and a support view focusing on technical delivery issues.
1. authoring content
we will look at the authoring of static course material first  i.e.  material that is delivered without student interaction. authoring is the process of generating knowledge and the representation of structured knowledge. support for authoring should provide at least the following elements: the possibility to define a vocabulary and rules to express knowledge structure and a methodology guiding the authoring process. xml satisfies these requirements in that tags form the vocabulary  dtd-element definitions describe rules how to use these tags  and the document hierarchy lends itself as a guideline for topdown development.
a particular problem is the need of different structural dimensions. we might like to structure the course material in terms of educational elements such as concepts  examples  exercises  definitions etc  but we might also want to use subject-specific tags  e.g.  programming concepts  function  variable  assignment  in a computer programming course. the requirement is a namespace technique that allows a course developer to define vocabularies separately and combine them as needed. modularity is particularly important for the maintenance of evolving systems. xml schema provides an alternative to dtds and namespaces offering the required modularity  but widespread tool support is currently not available for schemas.
1. authoring dependencies
dependencies between course elements form a course topology in the virtual world. in traditional classroom teaching these dependencies have to be transformed into a sequence; in virtual courses a more flexible hypertext topology can be realized through which the student can navigate. a course designer needs to be supported by a notation for specifying this dependency structure. the notation should be based on a suitable formal model  e.g.  petri-nets  or statecharts  for analysis purposes and should allow course developers to describe dependencies between units of the course material in an abstract way. a dependency specification forms then the basis for the creation of the navigation infrastructure.
xlink/xpointer is a technology that allows a course developer to describe links. this includes concepts such as links with a
number of targets and also the possibility to annotate links with meta-data. the authoring of individual course units and their dependencies and configuration for the system's navigation structure need to be kept separate. this supports modular design and  therefore  the maintainability of the system. flexibility is required in order to deal with evolving content and also in order to configure material in various ways for different users or user groups.
1. managing static content
activities that shall be subsumed under the term 'management' are editing  parsing  transformation  storage  and retrieval. we do not look at the first three activities here  since they are classical tasks and well supported by xml-technologies  e.g. through xslt and supporting tools .
the storage and retrieval functionalities are part of both an authoring and a delivery subsystem. in order to support consistency  flexible access and configuration in particular in evolving systems  database support in form of general-purpose systems or xml-databases is needed. the advantages of using xml-databases for storing and retrieving xml-documents are obvious. in general-purpose database management systems two strategies can be followed:
1. use any existing xml-support  available in some recent systems  or any kind of support for document storage and retrieval  e.g.  the sql1 standard supports large character objects .
1. xml-documents form hierarchies  or trees  whose nodes can be stored as records allowing very flexible access to and configuration of material.
retrieval is certainly supported by database facilities  but the xml query language is without doubt a more appropriate tool  since queries are based on the xml elements also used in the creation of the documents.
1. authoring and managing interactive material
content delivery  or content publishing  can in general be supported by xml-technologies such as xslt or programming language apis such as java sax  which can be used to transform xml-documents into an output format. the specification and delivery of interactive material poses a more severe problem. we assume that a separate tool exists which performs the interaction based on some student input. this tool has to be integrated into the delivery subsystem and interfaced via the web to the student. more precisely  the processing of xml-documents and external applications has to be integrated. two alternative scenarios shall be discussed:
1. the xml-document processor  e.g.  a java program using the sax-api  invokes the external processor  which could return its results in terms of xml-fragments that can be inserted into the xml-document. the output document is then created from the completed xml-input document.
1. the xml-document is extended based on a notation that can be processed in a suitable way. xsp - extensible server pages - is such an extension of xml . xsp overcomes some jsp  java server pages  drawbacks such as the lack of separation of content and presentation or the output-orientedness. an xsp-document could contain instructions how to invoke an external processor.
we can see from this discussion that an xml-extension towards a distributed computation protocol is needed allowing communication between the server and various applications in an educational system to happen. corba-idl style invocations described in xml-documents would support the solution of this problem.
1. conclusions
this investigation of xml-technologies for advanced virtual courses has been motivated by the development of our own virtual course system . the most appropriate existing support framework for our requirements is the cocoon system from the apache project . cocoon is an xml-based webpublishing framework. due to the lack of interactivity and database support we opted to develop our system from scratch.
xml is in principle suitable for individualized  integrated and interactive courseware. competent web users will be able to create static content and to publish/deliver it. in particular the integration and processing of interactive elements is currently not sufficiently supported and can currently only be implemented involving some software development. current and future developments for xml schema  xml query  xprotocol and xsp are expected to improve this aspect of advanced educational systems.
