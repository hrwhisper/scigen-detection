with proliferation of published web services  the task of finding relevant ones for the developers of service oriented application becomes more and more difficult. several existing tools or mechanisms allow this discovery; however  those approaches often skip different elements such as service's quality  reuse  evolution and users' comment making the discovery result feebly relevant to requesters' need and prevent the requesters from using up-to-date and available web services efficiently. in this research work  we present a framework for web service discovery taking into account the reuse of web service search result through caching technique  the quality of service through qualitative test result  the web service's evolution through version track technique and we provide a novel scheme of discovery using user's annotating information. 
keywords 
web service discovery  web service version evolution tracking  user's annotation  quality of web service  web service caching 
1. introduction 
　web services are autonomous software components widely used in various service oriented applications according to their platform-independent nature. web services are described before being published and they can be discovered and finally invoked via web infrastructure by using the stack of known standards such as soap  wsdl and uddi . despite their visible advantage and accessibility  the rapid growing number of published web services prevents users or requesters  ordinary users or software developers  from finding easily and efficiently the services relevant to their specific needs. discovery process can be realized either manually or automatically in the application design phase by software designers or in the execution phase by different software agents . nonetheless  this discovery can be done semi-automatically by combining the automatically found services and the choices provided by human users to refine final result. thus  web service discovery is undeniably considered as a vital phase in the process of service oriented application development. 
　several algorithms seek to deal with web service discovery in different ways: from computing textual description similarity based on information retrieval techniques up to using complex logical formalism  particularly description logics  to rewrite queries and develop inference engines accordingly without setting aside the structural matching  ontology mapping and semantic processing  description logics  rdf  owl  etc.  in their proposals. except from focusing on the discovery of web services itself  many other important features such as service reuse  service quality  and service evolution are often ignored. users' comments or opinions on a found service are not completely or even poorly considered by the discovery system either  though they are a very interesting source of information capable of enriching the provedto-be insufficient web services' textual description . some other drawbacks found in most of the actual existing approaches represent the motivation and challenges  mostly seen from the users' perspective  of our study. they can be highlighted as following:  
challenge 1:  
　web services found after a discovery process are poorly considered as a pertinent source of information or result to be reused in a future similar search  similar query . 
scenario 1: 
　bob would like to include in his application a web service realizing a weather forecast given the name of a city. he uses a query with  weather forecast  as key word to search for the set of web services that would be relevant to his request. the web service discovery system provides him a set of found services as result. next time  alice uses the same discovery system and the same keyword in her query to request for the same service. assuming that there is no change in the source of the discovery tool  set of web services available for search   the query of alice 
　
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are 
　
is unavoidably computed once again by the system before providing the exact result comparing to what the system proposed to bob.  
　
not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  or republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee. 
proceedings of the second sigmod phd workshop on innovative database research  idar 1   june 1  1  vancouver  canada. copyright 1 acm 1-1-1/1 ...$1. 
challenge 1: 
　even when a web service is found at the end of the discovery process  none can assure that the service is operational or obsolete.  
scenario 1: 
　the discovery system proposes to alice a number of web services relevant to her request. alice would like to check if a chosen service is really usable in her application. she would prefer that the system propose a testing interface allowing her to make sure that the service she decides to utilize will operate correctly after being integrated into her application.  
challenge 1: 
　a web service evolves just like other software components do in terms of version. web service's users need particularly to be informed of any change made by the service provider in order to maintain their application up to date and operational. 
scenario 1: 
　the  weather forecast  web service is provided by jane. bob uses this service inside his application. jane is working on another better release of  weather forecast  and finally releases the actual version of  weather forecast  and still keeps the old version in her repository during a limited period of time. by searching in the discovery system using the same keyword again  bob may realize that there are two versions of  weather forecast  made publicly accessible by jane and that the latest version will be more appropriate to his application.  
challenge 1: 
　a new requester may learn more about a service if it is enriched by various comments from past users. 
scenario 1:  
　bob describes his personal views on the  weather forecast  web service provided by jane and makes his comment publicly accessible after using successfully the mentioned service in his application. ted is a new user of the web service discovery system that bob has used ever since. ted searches in the system for a web service related to  weather . the web service provided by jane is present in the result set output by the system. the comment of bob on  weather forecast  web service will support ted's decision to choose it.   
challenge 1: 
　an only entry point to use the discovery system is not good enough to make it provide interesting and highly relevant result.  
scenario 1: 
　ted would like to express his query other ways than using key word to discover a set of pertinent services. he may combine his key word based and his input-output based queries given to the system and get a better relevant set of web services than the one output by the system when ted provides uniquely a key word based query.  
　aware of the exclusions mentioned above and perceived in the existing tools and mechanisms for web service discovery  we will try to propose a all-in-one framework for web service discovery handling the reuse of discovery result via the following skills: caching mechanism  the quality of service through qualitative systematic test  test by users  and the web service's evolution through version track technique. we provide as well  a novel scheme of discovery using user's annotating information. 
　this paper is organized as follows. section 1 discusses related works and the current existing algorithms proposed in the field of web service discovery. section 1 presents and describes our proposal and finally section 1 concludes and offers the future work perspectives.  
1. related work 
　as web services discovery is an important and difficult task in the development cycle of service oriented application  many algorithms  tools and mechanisms are proposed to solve for the best this problem. woogle  makes use of a clustering technique by grouping the parameter's name of service operations into semantically significant concepts. these concepts are then used to compare the similarity between web services' operations. using this mechanism makes woogle hard to deal with complex data types presented structurally as either a tree or a graph.  synthesizes the issues of uddi related to the discovery based on catalog browsing and tries to solve the web service searching by combining the textual description similarity of web services with their semantic structural similarity. the textual description similarity is computed based on information retrieval technique through the usage of wordnet1 thesaurus and the semantic structural similarity is finally dependent on the similarity of data types used in wsdl files. this approach may lead to erroneous semantic structural similarity when the structures of the data types in comparison have numerous identical sub-structures.  and  define the pair-wise similarity of web services as the wordnet metrics distance between their textual descriptions. by simply neglecting the structural aspect of wsdl files  this idea may not provide exact final similarity of web services. wsxplorer   inspired by   proposes a web service discovery tool taking a textual description as input. this approach processes not only the textual similarity based on vector space model technique of information retrieval domain but also the structural similarity by introducing a modified tree edit distance method in their comparison module. however  web services' textual descriptions are not enriched by wordnet before and even during their similarity computing; and this approach does not after all handle the graph structure of wsdl files.  
　in the same attempt to make web services discovery more efficient  in semantic web community  certain approaches turn to the usage of description logics.        and  use basically description logics to express their queries and develop inferring mechanisms accordingly to compute the similarity between web services and a given query. despite the interesting advantages of description logics  expressing a query in this formalism is still not an intuitive and easy task for an ordinary user or even for a software developer. moreover  we do not see many of description logics based web service discovery tools made available to large public.  
　instead of providing only one type of input query   is an inspiring approach that offers two kinds of query: key word based and wsdl file based  i.e. requesters can look up for web services by inputting key word or a wsdl file . even though  this tool can provide interesting ranked result after the look up process  requesters can not go any further to make sure that a chosen service is not obsolete  i.e. there is no possibility for users to test online the functionality of a web service in the discovery result set . wsce  provides a web service discovery tool that  given an input keyword  proposes a set of similar web services. this tool  by crawling different universal business registries and web service portals  collects the web service's instances and stores them in a centralized registry. however  requesters desiring to test a discovered web service or track its evolution  e.g. version  have no possibility to do so.  keeps the users' habit of information search by using conventional web search engines  e.g. google  yahoo  etc  to discover published web services.  due to the natural characteristic of wsdl files which is particularly partially text based  unlike html documents  a great effort will have to be done in incorporating wsdl files' content into html documents. different types of meta-data will have to be added into html documents as well in order to facilitate indexing process done by web search engines. through this analytical study on the existing proposals related to web service discovery  we can determine some conclusive remarks: a  information retrieval techniques are commonly used  b  slight number of tools proposes multiple entry points to discover web services  several kind of queries can be employed on single system   c  testing a web service online is rarely possible  d  users' information or comments are frequently ignored  e  users are not informed about the versioning or evolution of found web services. 
　thus  we come up with a schematic proposal  thoroughly described in section 1  of a novel platform for web service discovery including: a  the usage of multiple types of queries and strategies of result combination helping to leverage the quality of discovery output  b  the processing of users' participative annotation or tagging on web services  c  the interface for online  aliveness  test on a found web service and d  the detection and processing of changes undergone by web services. 
1. our proposal 
　in this section we present in detail our proposed framework  see figure 1  1  1 and 1  that contributes in solving different issues discussed in the section 1. this framework is composed of different modules and their roles are described in depth within this section.  

figure 1: overall view of our platform 
　we attempt also to provide a system allowing semi-automatic web service discovery through a simple web interface. a user or requester does not need to install anything  except a web browser at their side allowing them to query and test online a web service resulting from their request.  
1 collection  internal storage and systematic test of web services 
　this important part of our tool is done regularly in background and consists of collecting different web services from various providers and storing them in a single and accessible source.  and  have proven that most of the existing web discovery mechanisms do not utilize uddi as the only source for the process but also and more frequently different registries or customized portals containing wsdl files. inspired equally by    and   the  collection engine   see figure 1  crawls the web and identifies wsdl or wsdl-like files  there can be possibilities to find wsdl contents inside non-wsdl files e.g. xml or html  files   validates them before inputting them into the central repository. if a wsdl file is valid  its copy and its location  url  will be saved into the central repository. additionally  our platform offers a possibility to the set of stored wsdl files to be enriched with the working status of a web service  binary information indicating that the service is operational or not  and several other information related to the quality of web service such as response time  availability  documentation  etc. the working status and the mentioned qualitative information are injected automatically into the central repository by the  testing module   see figure 1 . this module is in charge of analyzing the content of each stored wsdl file and prepares automatically the test scenarios and data accordingly.  
　the systematic test's output will be used to update the correspondent wsdl instances in the central repository.  by doing so  we can assure that the source employed in our discovery system is populated by several external sources making the information's richness in our tool better than using a single source of web service provision. the output of  testing module  associated with each entry of our central repository offers valuable information supporting requesters' decision in choosing a discovered web service.  
1 indexing module 
　the content in central repository is indexed by different indexers  see figure 1 . each indexer provides an index representing the entire entries in the central repository. each index is used by a matcher in the  matching module   see figure 1 . every entry of each individual index has a reference corresponding to a web service stored in the central repository. this indexing module is designed to be extensible because several indexers implementing various indexing techniques can be incorporated and used within this  indexing module . proceeding this way  we believe that even though there is a common source used by the discovery process  it will be better optimized by the indexers to be employed more efficiently by a specific matcher according to a query expressed by the users.  
1 matching module 
　this module hosts several matchers  see figure 1 . each matcher implements a matching algorithm treating a kind of query and using an index  defined in the previous section . these matchers are core components of our system because they compute the similarity between the query expressed by a user and the set of web services in the corresponding index. the output of each matcher is an ordered set of web services in descending order of similarity value with the input query  the higher the value is  the more exact the similarity becomes . thus  a result of each matching process is a discovery's one.  
1 query customization and combination module 
　we offer many entry points to use our discovery system via different types of query. each query conforms to a query model  e.g. keyword based  input - output based  wsdl instance based  etc . users can express different queries through the guided model proposed by our system. they can then customize the way their queries will be processed by the system. parameters provided by users are used by the  combination module   see figure 1  to compute the final result of the discovery process. in this context of combination strategy   proposes 1 kinds of combination techniques that can be done to the matching result sets: a  mixed: the result of query qi is fused with the one of query qj by weighted sum  b  cascade: the result of query qi provided by the matching mi is filtered by a query qj using the matching mj and c  switching: user decides to use the same query qi but different matching techniques mi and mj to assess the result. in addition to these presented combination techniques  we also offer and include in our platform other boolean-like combination operators such as: a  and  intersection between the result provided by using a query qi and the one provided by using query qj   b  or  union between the result of a query qi and the one of a query qj   c  minus  difference between the result of a query qi and the one of a query qj   etc.  
　we believe that such customization mechanism will allow users to have an enriched and more relevant result set of web services proposed by our system rather than using a unique way to look up for web services.  
1 annotation based discovery and caching 
　this part is the cornerstone of our work and it defines our system as a participation platform giving consideration to users' comment on what they have discovered using our system. in effect  in this era of web 1   users do not only retrieve information but also share and participate in the content publication on the web. we can see this kind of model in    or  and users form a certain kind of community to share and participate in their published content therein. we therefore take into account the user's dimension in our platform as well. we  however  analyzed    and  before proposing this search by annotation mechanism. in   each user has to install a component at his/her side in order to use the system. every user's action is communicated to and logged in the remote client component. this approach uses implicit culture framework and helps a new user to discover web services through a recommendation system based on past users' experiences. despite this interesting technique  the transaction between client site and remote site may cause system overload if the number of sessions increases.  and  use machine learning techniques to leverage the discovery result given users' preference. we can remark some handicap in these approaches related to the number of users' examples to feed the systems before they return interesting results.  

figure 1: search by annotation and result caching 
