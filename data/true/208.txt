because of the increasing sophistication of internet auctions  a user can participate in many different auctions held around the world  each of which offers a wide variety of items. in this paper  we present multiple-bidding support framework based on multiagent system  which can support bidding and browsing information. to extract information on items from real-life internet auction sites  we implement a web wrapper component which can be connected with a template generator. in this paper  we present a process of generating a template.
keywords
multiagent system  bidding support agents  and browsing support
1 introduction
increasingly  there has been a growing interest in internet auctions as a means of electronic commerce. because of the increasing sophistication of internet auctions  a user can participate in many different auctions held around the world  each of which offers a wide variety of items. however  there are two difficulties with bidding at multiple auctions. one is determining bidding strategies for winning the items. it is difficult for common users to determine a bidding price depending on the progress of multiple auctions. the other is collecting information on the many items. to compare the price of items on different auction sites  users must access each site  search for desired items  and get their prices. to overcome these difficulties  we have constructed a multiple bidding support framework that consists of multibidder and multihammer. multibidder is an extension of biddingbot  that enables bids to be made on any combinations of items. in this paper  we focus on the multihammer  a system which can support extracting information on items from real-life internet auction sites.
   in multihammer  multiple agents can extract information on items simultaneously and present integrated information. users can access multihammer using an appropriate interface for their browsing environment  and then they can browse many information on items efficiently. here  because of the difference in the description format of html document  each agent behaves as a web wrapper . to extract information  agents need data on the document structures. to determine the meanings of extracted information  agents need data on the semantics of the information. we use these data as a template for extracting information. however  it is difficult and time-consuming for users to develop this template because they must analyze the description formats of the html documents in detail. to make it easier for users  we have developed a template generator  the basic idea is proposed in  . using our template generator  users can semi-automatically generate a template.
1 multiple-bidding support framework

figure 1: multiple bidding support framework
   figure 1 shows our multiple bidding support framework  which consists of multibidder and multihammer. in this figure  we emphasize an architecture of multihammer. this framework has been developed using java language and milog  a logic-based intelligent agent framework   which enables us to develop an intelligent web-agent easily.
   multihammer consists of three types of agents  i.e.  auction agents  data storing agents  and information collecting agents. the information collecting agents extract information from various real-life internet auction sites. because these agents are implemented as mobile agents  each can work at a different host for efficient information extraction. the data storing agent stores the collected information in a database using a sql. the auction agent provides auction services using the stored information. users can access the auction agent via web browser. the auction agent provides three different types of interfaces  i.e.   default view    list view   and  simple view.  using the default view  users can browse many information efficiently  and there are enough links to other information sources  e.g.  the web page representing detailed information on item . the list view presents information on items as a list form. users can browse information roughly using this interface. since there is no large data  the simple view is suitable for accessing from pda  e.g.  palm pilot . furthermore  users can browse many information smoothly because the information collecting agents extract information in parallel with the browsing information.
1 the process of information extraction
figure 1 shows an outline of the process for a template generation. the process consists of following four steps.
 i  extract two html documents on two different items from the same auction site and convert theminto tree structures. to generate a template  at least two html documents described based on the same description format must be input. to convert each document into a tree structure  each html tag and character string is regarded as a node. in the following steps  we represent the two input documents as x and y . the tree structures of x and y are represented as p and q  respectively.

figure 1: process of the template generation
 ii  compare p and q  and obtain common description pattern r. in p and q  we trace and compare the nodes from the root-node to each leaf node according to a depth-first search algorithm. concretely  we compare pi and qi  which are elements of p and q  to obtain ri  an element of r. if pi = qi  then = $diff  which means that nodes pi and qi are characteristic information.  iii  extract information by matching common description pattern r to tree structure p. if r i = $diff  in figure 1  we represent such nodes as   a  and   b    we extract pi and add it to list sr. sr is the list of extracted information  so it represents the characteristic information of document x.  iv  determine the meaning of the extracted information. in this step  we determine the meaning of each extracted information si ¡Ê sr. if si is required information  we determine meaning li by referring to p  and add li to list lr. on the other hand  if si is not required  li is  useless  and is added to lr. as a result  lr is the list of the meanings of sr. for example  when the extracted information list sr =  'palmpilot' '$1' '1days 1hours'  is extracted  we would determine the meanings l r =  'item name' 'current price' 'time left' .
although we must determine in step  iv  the meaning of the information  the template can be generated without analyzing the description format in detail.
1 conclusion
in this paper  we present multiple-bidding support framework based on multiagent system  which can support bidding and browsing information. to extract information  we implement a template generator for a web wrapper in our framework. we present the process of the template generation.
