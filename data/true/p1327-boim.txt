this demonstration presents rmfinder  related messages finder   a system that retains the simplicity and efficiency of topic-based p1p pub-sub  while providing a richer service where users can automatically receive all messages related to those in the topics to which they are subscribed. rmfinder is based on a novel  dynamic  distributed clustering algorithm  that takes advantage of similarities between topic messages to group topics together  into topic-clusters. the clusters adjust automatically to shifts in the focus of the messages published by the topics  as well as to changes in the users interest  and allow for an effective delivery of related messages with minimal overhead.
categories and subject descriptors
c.1  network architecture and design :  distributed networks 
; c.1  distributed systems :  distributed applications 
; h.1  information search and retrieval :  clustering 
general terms
algorithms  performance  experimentation
keywords
publish-subscribe  p1p  dynamic clustering  related content
1. introduction
　the amount of information available to internet users is increasing rapidly. the need of users to be constantly updated with an up-to-date  accurate  and relevant data  out of this ocean of information  makes the publish-subscribe interaction scheme  pub-sub  for short  particularly appealing. in this demo we focus on a relatively simple class of such systems  called topic-based systems  where users subscribe to topics and are notified on messages that belong to those subscribed topics  1  1 .
　the main reason for the popularity of topic-based pub-sub systems is their simplicity. it allows for a simple intuitive user interface as well as a very efficient implementation  and is thus a perfect fit for application areas where messages divide naturally into groups that correspond to users interest. a typical example is the increasingly popular rss news syndication. an rss system is a simple topic-based pub-sub system. publishers publish their news by putting them into an rss feed and providing the url for the feed on their website. it is interesting to note that many existing rss applications rely on a rather primitive implementation where rss readers poll the feeds periodically. but with the continuous dramatic increase in the number of rss users  it is anticipated that  for scalability  future implementation will move to push-based peer-to-peer  p1p  platforms.
　the simplicity of topic-based pub-sub  however  has a price: a user subscribes to a set of topics  feeds  that she considers interesting. but related messages  possibly of great interest  may be published in other topics that she is not subscribed to  and may even be completely unaware of their existence . these relevant messages will never reach her. clearly  a possible solution is to move to a more sophisticated class of pub-sub systems such as contentbased systems . in such systems  subscribers specify their interest through message filters  which are boolean queries on the message content. this added flexibility however does not come for free - content-based pub-sub typically requires much more sophisticated protocols with higher runtime overhead  as well as more sophisticated user interaction.
　the goal of this demonstration is to present rmfinder  related messages finder   a system that retains the simplicity and efficiency of topic-based p1p pub-sub  while providing a richer service where users can automatically receive all messages related to those in the topics to which they are subscribed. rmfinder is based on a novel  dynamic  distributed clustering algorithm  that takes advantage of similarities between topic messages to group topics together  into topic-clusters. the clusters adjust automatically to shifts in the focus of the messages published by the topics  as well as to changes in the users interest  and allow for an effective delivery of related messages with minimal overhead.
　it should be stressed that our aim here is not to invent yet another topic-based pub-sub system  but rather to present a generic novel technique for better utilization of existing platforms. indeed  while our implementation uses the scribe pub-sub system to manage topics and user subscriptions  the technique that we propose can similarly be used on any such network.
remark the grouping of topics into sets has been previously proposed in the literature in a different context: to provide users with varying subscription granularity it was suggested to group topics into sets forming a sub-set hierarchy. a main difference with the present work is the static nature of that grouping. in contrast  our solution adapts continuously the topic-clusters to the actual correlations between the topics messages  guaranteeing  as we shall see  stable good results even when the type of the messages published by the topics changes significantly.
1. rmfinder overview
we start by providing some background on topic-based pub-sub systems and the challenges encountered when trying to enrich them to deliver related content. next we present rmfinder. topic-based pub-sub. the interfaces of typical p1p topic-based pub-sub systems share four common operations: create  publish  subscribe and unsubscribe. to send messages  the publishers first create topics. each topic is virtually represented by an individual peer  often called a channel   which is recognized by a unique id  called a topic-id   and serves as a mediator between the publishers' side and the subscribers' side. to publish a message for a given topic  the publisher calls the publish operation with a specific topic-id. the message is passed to the appropriate channel and propagated from it to the topic subscribers. to become subscribers of a given topic  interested users call the subscribe operation  with the appropriate topic-id. the corresponding unsubscribe operation removes the subscription. enriched topic-based pub-sub. in our enriched topic-based pub-sub  before a message is sent from the channel to the subscribers  it is enriched with information on related messages recently published by other topics. this may include just the identifiers of such related messages  the topic-id and the message id within that topic   some message summary  e.g. title and date  or the full message text.
　how can one find these related messages  channels often store recent messages for a certain time interval to allow users that were not connected to catch up. but a naive approach that simply queries all the channels  e.g. using some search criteria that defines what qualifies as related messages  is clearly infeasible: the number of topics in a typical pub-sub system is very large. furthermore  most topics are completely irrelevant to the message at hand. thus  querying all topics each time that a message is sent is prohibitively wasteful. to avoid this  we cluster together topics that are likely to contain related messages. this is done as follows. we build for each topic a  profile   features set  that concisely describes the nature of messages recently published by the topic. we then use these profiles to group topics with similar profiles into a set  which we call a topic-cluster. just like individual topics  each topic-cluster is given a unique id and is represented by a channel  peer . when such a cluster is created  the channels of its topics are informed.  in general  the clusters are not required to be disjoint and a topic may belong to more than one cluster . now  when a publisher passes a message to the topic's channel  before propagating the message to the subscribes  the peer first sends the message to the channels of all those clusters to which the topic belongs and awaits their response. the  cluster  channels then each match the message to the profiles of the topics in the cluster. they determine which topics are most likely to contain relevant messages and query only those topics. the message is then enriched with the retrieved data and returned to the topic channel to be sent to the subscribers. to efficiently retrieve relevant messages at the queried peers  each message is also assigned a profile  features set  and a dedicated query optimization technique is used to identify messages with similar profiles.
for optimal results  we would like to form the  best  topic-clusters 
s.t. most of the relevant messages are indeed retrieved while the overhead of querying irrelevant topics is minimized. while this may appear to be a traditional clustering problem  there are three requirements  derived from the specific context  which together make the problem particularly challenging.
  adaptivity. a p1p pub-sub environment has a dynamic nature: not only that topics and publishers may come and go  but also the focus and type of the messages published in each topic may change over time. for instance  a sports channel may focus at different times on baseball  basketball  or soccer. a good solution thus must have a dynamic nature  continuously adapting the topics profile and clusters to the current system state.
  distribution. the decentralized p1p nature of pub-sub systems  where no central coordinator has full knowledge about the system s state and the topics behavior  calls for a corresponding distributed clustering algorithm.
  low overhead. finally  the continuous clustering efforts  as well as the adjustment of the topics profile  should incur only very minimal overhead  not to harm the overall system performance.
　to address these requirement  rmfinder uses a novel dynamic distributed clustering algorithm that we developed recently in . the algorithm employs local cluster updates to change the overall system configuration. each local update is performed only when it is estimated to be  globally  cost effective. furthermore  to minimize the overhead involved in gain estimations  a probabilistic component is employed to guarantee that  with high probability  gain estimation are computed only for updates that are likely to be beneficial. the clustering algorithm was originally introduced in  as a technique for reducing communication overheads in topic-based pub-sub systems  and is adjusted in the present work to enable efficient retrieval of related messages.
1. dynamic clustering
　to complete the picture  let us go briefly over the main component of the clustering algorithm and see what is required to apply it in our context.
clusters quality. the clustering algorithm is based on a set of local  cluster update  operations  performed by individual channels  of topics and clusters  consulting only a relatively small neighborhood. these operations include: the grouping of two individual topics to form a new cluster; the addition of a topic to an existing cluster; the merge of two existing clusters into a single cluster; and conversely the removal of topics from a cluster and the destruction of clusters. the algorithm uses a formula f that estimates the quality of the current clusters. only updates that are determined to be beneficial  i.e. increase the value of f  are performed.
　the formula f used by rmfinder is given below. it uses the following notation. t denotes the set of all topics. c denotes the current set of clusters. for a topic t （ t  ct denotes the set of clusters in which t is a member  and tt denotes the set of all topics that are members of these clusters. for two topics t t1 rm t t1  ★  1 : 1  is a function that estimates the likelihood for t and t1 to publish related messages.  rm will be discussed in more details below . recall that a  good  clustering is one where most relevant messages are indeed retrieved while the overhead of querying irrelevant topics is minimized. to capture this  f considers each topic t （ t. for each topic  the first summand estimates which portion of the related messages  out of all related messages  will be found when considering only the topics in the clusters to which t belong. the second part of the formula measures the  tightness  of the clustering - it estimates how many topics irrelevant for t  out of all the potentially irrelevant topics  might be queried by the clusters. the relative importance of these two criteria is tuned using the weight  constant  w.

　it should be noted that since all the cluster update operations are local in nature  to evaluate the potential benefit of an update  there is no need to evaluate the full formula but only the changes entailed to the small neighborhood involving the updated topics/clusters.
features extraction and relevance estimation. to measure the quality of the clustering  we need to estimate the likelihood for t and t1 to publish related messages.  the function rm used above . for that  we build for each topic a  profile   features set  that concisely describes the nature of messages recently published in this topic. more specifically  for each topic we consider a sliding window that includes its recent messages of a given time interval. from this set of messages we extract a features set of size k  for some predefined constant k . the features set is incrementally updated as time advances and the window slides. in our implementation we use a simple tfidf features selection   where the selected features are words that appear in the messages with highest tfidf score. stop words are excluded and words appearing in the title get higher weight. finally  for two topics t t1  the likelihood for them to contain related messages is estimated by the similarity of their feature sets.
　we will show in the demonstration that even with these very simple feature extraction and relevance estimation  rmfinder yields impressive results. but clearly  if desired  more sophisticated features extraction/relevance estimation can easily be plugged in  including ones that take users' feedback into consideration . triggering cluster updates. to complete the picture  let us explain what triggers cluster updates. looking at the formula f above we can see that when the features set of some topic changes  hence its relevance to other cluster topics decreases or increases   the formula needs to be re-evaluated to determine if the topic should be removed from existing clusters or be added to some other clusters  and if consequently some clusters should be merged . to determine which cluster and topic pairs should be considered  rmfinder uses a simple heuristics based on the observation that people that subscribe to a given topic are likely to subscribe also to related topics. clusters thus search for new candidate topics  or clusters  by probing the subscribers of the cluster topics and checking to which other topics  clusters  they are subscribed  belong .
utilize applicationrmfinder apirmfinderpub-sub interfacepublis-subscribed h tnetworkfigure 1: rmfinder architecture
1. demonstration scenario
　rmfinder is developed in java  designed to be deployed on any pub-sub network by simply implementing its pub-sub interface. we provide the implementation for the popular topic-based pub-sub platform scribe . scribe itself is built over pastry  - a dht  distributed hash table  1  1   that provides the overlay network services. rmfinder exposes to users the same api as scribe for defining topics  publishing messages  and  un subscribing. in addition  to support all rmfinder features  a few more functions have been added to its api. it uses the dynamic clustering algorithm described above to automatically group topics into clusters and to enrich messages with related content. figure 1 illustrates the layered architecture that we adopted in our design  starting from the highest level - the application that utilizes rmfinder through its api  and ending with the network itself.
　to illustrate the power of rmfinder we will show how it can be used to enrich typical rss feeds with related content. in our demonstration we will use real life rss feeds whose messages we accumulated over the last six months from popular sites such as cnn  espn  and yahoo. these include in particular fifteen different feeds from three main categories  news  basketball and entertainment . throughout the demonstration we will follow the operation of the system from three angles:  1  we will show how the news publishers post messages   1  we will see how the feed readers receive the  enriched  messages  and  1  we will follow what happens behind the scene using a surveillance panel. the panel will show the topics and their selected feature sets  the formed  and dynamically updated  clusters  and the message enrichment process.
　the demonstration has two main parts. the first part aims to illustrate the daily system operation. we will show how standard rss messages are posted and enriched before they are delivered to the readers. the importance of this enrichment will be illustrated by showing how critical related messages are automatically discovered and delivered to the users. the second part of the demonstration focuses on the dynamic aspects of rmfinder. it illustrates the adaptability of the clustering  and of the messages retrieval  to changes in the type of the messages  as well as to the addition  resp. removal  of feeds. for that we will simulate a scenario where the news reporters of some feeds switch to write for some other feeds  hence the style and content of the messages in these feeds will dramatically change . we will see how the selected features of the feeds  and consequently the clusters  adapt to the new setting  and how related messages are properly identified and sent to the users.
　finally  to conclude our demonstration we will show an application of rmfinder to rss archives  where enriched messages are archived and a standard web browser provides a simple  intuitive navigation between  transitively  related news items.
