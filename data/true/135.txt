xml itself does not support hypermedia  but the xlink standard has been defined to make xml usable for hypermedia. one of xlinks most interesting features is its support for external links and linkbases  which makes it possible to create links between resources without having to change the resources. in order to use these links  user agents must access linkbases and query them for relevant links  and we present our approach to create a protocol for linkbase access.
1 introduction
the extensible linking language  xlink   is one of the most important developments for the future of the web as a hypermedia system  because it defines how to use links with xml documents. xlink's features are far more powerful than html's linking capabilities  and a fully xlinkenabled web will provide many new features  in particular open hypermedia functionality  with links being treated as separate entities  in html  links are always embedded in the resource that they are linking .
　xlink itself is a stable standard  but some of the problems which also need to be solved in order to make xlink usable are still under investigation. one area is the question of how to display resources which have been assembled from different sub-resources  and w1c has published a note  dealing with this problem. another area is the question of how linkbases can be managed and accessed  and this is the question we address in this paper.
1 xlink linkbases
xlink introduces the notion of a linkbase  which is defined by the standard as:  documents containing collections of inbound and third-party links are called link databases  or linkbases . xlink defines a special type of link  technically  a special arc role for links  for locating linkbases  so from xlinks point of view a resource can refer to a linkbase  and an application processing this resource can access the linkbase and extract all relevant links from it. this is a pretty simple way of dealing with linkbases  but from xlink's point of view  it is sufficient.
　however  one of the core ideas of open hypermedia is that linkbases contain a huge number of links  and the resources that are being linked by these links are not aware of it  very similar to a bookmark store in a browser  which also contains links without the resources being linked being aware of it . thus  linkbase access must be handled in a
　more powerful and flexible way.
1 the open web
our vision of the open web are browsers which not only access resources  but simultaneously access linkbases every time they access a resource  and query the linkbase for links for this resource. the links being exchanged between the linkbase and the browser should be xlinks  but so far there is no access protocol for linkbases which could be used.
1 design axes
thinking of a linkbase access protocol  two major design aspects come into play. the first aspect is the service which is provided by the linkbase  ie the functionality that can be used by the browser. the second aspect is the actual protocol being used for accessing the service  ie the embedding into a specific encoding and some kind of data transport mechanism.
　it is important to keep in mind that we do not expect linkbases to store their information as xml/xlink linkbases. we simply define a mechanism for accessing and querying linkbases  and we expect a linkbase to send the response as an xlink linkbase  but the linkbase's internal design is of no concern to us. in fact  it is likely that large linkbases will often use relational database systems rather that xml/xlink for storing the links.
1 service axis
at first sight  querying a linkbase could be regarded as a special case of querying an xml document  so that the xml query language  xquery   would be a good candidate as a query language. however  we believe that xquery is not the ideal candidate because of two reasons:
  complexity
xquery is a rather complex standard  and it is much more complex and powerful than required by the linkbase scenario. profiling xquery  if possible  might help  but even then the second reason still would be valid.
  data model
xquery builds on the xml information set  xml infoset    the abstract data model of xml. xlink extends this model  a first approach to formalizing this model has been given in a w1c note    so the problem of using xquery for querying linkbases is a mismatch in the data model.
　because of these reasons  we have decided to define our own query method  which is tailored to xlink and rather simple  but powerful enough to query linkbases. every request in our model has four distinct elements  which are
  request properties  describing the request as a whole and specifying what should be returned  
  size limits  defining limits for the size of the response  such as the maximum number of links being
returned  
  filters  filtering links according to certain characteristics  such as arc roles   and
  attribute assertions  making further assertions about attributes of xlink elements .
　the most interesting aspect of the requests is that they are executed on the xlink information set  which we defined according to the w1c note . however  we think that  in the same way as the xml infoset was a very important specification for a number of activities xlink's information model should also be defined more formally than the prose used in the xlink specification. the w1c note  provides a good starting point  however  it does have holes and was never intended to provide a complete model of xlink's contributions to the xml infoset .
1 protocol axis
after finishing the service definition  the question remains how to access the service. looking at today's web infrastructure  it becomes clear that the transport protocol must be http. however  even when looking at http there are several possibilities how to use it:
  uri query strings
in the simplest case  information can be appended to the uri in the request. this is most frequently used with html forms using the get method. however  this method is not well suited for larger amounts of data  and also requires all data to be uri encoded.
  http extensions
http can be extended with new methods and/or headers by using the http extension framework . this method can be used to introduce new features into http. however  it requires all participating http implementations to be extended to support the new methods and/or headers.
  http entities
information can also be transmitted as http entity. this is the approach of the simple object access protocol  soap    the most widely used generalpurpose method for using http as the foundation for web services.
　we decided to choose the third approach  modelling the linkbase access protocol as a web service. this gives us the advantage of available tools and infrastructure  in particular the web services description language  wsdl    which we use to define the linkbase access service.
　using this wsdl definition  it is very easy to access the linkbase access service. from the wsdl definitions  stubs can be generated which automatically encode linkbase requests as soap messages and automatically decode linkbase responses  interpreting the soap message that has been sent as response.
　so far  we only provide read-only services  but in future versions  the service definition could be updated to also include write access  such as deleting links from the linkbase or inserting new links into it.
1 implementation
we have finished a prototypical implementation of a linkbase server  which takes an xml linkbase as input and then uses xslt to generate an xlink infoset from it. another xslt then interprets the request and selects all links form the xlink infoset which satisfy the request. a third xslt then transforms the resulting xlink infoset into an xml linkbase  which is then returned as response. this implementation is not capable of handling large linkbases  but it is sufficient for test purposes.
　in the process described above  we use our own xml schema for representing the xlink infoset in xml  so that we can use xslt for working on it.
1 further work
even though xlink should be one of the most important standards of the xml-based web  it has not received a lot of attention. this is partly due to the fact that  even though xlink itself has been finalized  some of the really important specifications that would be required to actually implement full xlink support are not available. we hope that the linking and style activity and the linkbase access protocol activity will contribute to make xlink more popular.
