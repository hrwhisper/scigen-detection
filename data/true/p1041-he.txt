rapidly leveraging information analytics technologies to mine the mounting information in structured and unstructured forms  derive business insights and improve decision making is becoming increasingly critical to today's business successes. one of the key enablers of the analytics technologies is an information warehouse management system  iwms  that processes different types and forms of information  builds  and maintains the information warehouse  iw  effectively. although traditional multi-dimensional data warehousing techniques  coupled with the well-known etl processes  extract  transform  load  may meet some of the requirements in an iwms  in general  they fall short on several major aspects: 1. they often lack comprehensive support for both structured and unstructured data processing; 1. they are database-centric and require detailed database and warehouse knowledge to perform iwms tasks  and hence they are tedious and time-consuming to operate and learn; 1. they are often inflexible and insufficient in coping with a wide variety of on-going iw maintenance tasks  such as adding new dimensions and handling regular and lengthy data updates with potential failures and errors.
　to cope with such issues  this paper describes an iwms  called biwtl  business information warehouse toolkit and language   that automates and simplifies iwms tasks by devising a high-level declarative information warehousing language  giwl  and building the runtime system components for such a language. biwtl hides system details  e.g.  databases  full text indexers  and data warehouse models  from users by automatically generating appropriate runtime scripts and executing them based on the giwl language specification. moreover  biwtl supports structured and unstructured information processing by embedding flexible data extraction and transformation capabilities  while ensuring high performance processing for large datasets. in addition  this paper systematically studied the core tasks around information warehousing and identified five key areas. in particular  we describe our technologies in three areas  i.e.  constructing an iw  data loading  and maintaining an iw. we have implemented such technologies in biwtl 1 and validated it in real world environments with a number
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee.
sigmod'1  june 1  1  beijing  china.
copyright 1 acm 1-1-1/1 ...$1.
of customers. our experience suggests that biwtl is light-weight  simple  efficient  and flexible.
categories and subject descriptors
h.1  database management : database administration-data warehouse and repository; h.1  database management : database applications-data mining
general terms
design  languages
keywords
information warehouse  warehousing language  data mining
1.	introduction
　today's businesses increasingly rely on vast amount of information. data warehousing is an essential step towards exploring  understanding and analyzing business information for better and faster decision making. according to idc  data warehousing market is expected to grow from 1 billion in 1 to 1 billion in 1 at a cagr of 1 . although data warehousing techniques  such as multi-dimensional data warehouse models and etl processing  have been widely studied by academia and practiced in industry  they are increasingly inadequate in their functionalities due to several major changes in today's information dynamics:
comprehensive support for structured and unstructured data: existing data warehousing techniques are mainly designed to handle structured data. however  a large fraction of the enterprise data is in unstructured or semi-structured formats  e.g.  call center problem tickets  customer complaints. it is vital for an iwms to support both types of data.
simple and high-level warehouse operations: the prominent and rapid adoption of the information analytics technologies such as text mining and business intelligence  bi  tools mandates for simple and efficient iwms systems that can quickly process various information sources and build information warehouses. however  today's data warehouse systems often are hard to use and require detailed database and data warehouse knowledge. even with skilled staff  building data warehouses often takes multi-person weeks and months to complete.
　with the emergence of unstructured data  knowledge and skills about full-text indexers and search engines also become necessary. such requirements are often impractical to assume in real world situations based on our customer experiences. for instance  organizations that want to use bi and text mining tools may not have strong database administrators  dbas  for handling complex etl processing. clearly  a simpler and more efficient approach is needed.
we believe that an iwms that supports high-level operations for users to specify what they want to do  automatically figures out the details of how-tos  and handles all the operations accordingly could be a promising approach. such an approach can significantly improve the system usability  robustness and performance and allows users without sql and database expertise to perform iw tasks without significant training. this paper presents such an approach.
on-going iw maintenance operations: today's etl solutions mainly focus on only one aspect of the information warehouse management - building the iw. it is often assumed that once the warehouse is fully constructed and the data is completed loaded from the given set of data sources  the project is completed. that is  no subsequent modifications to the data warehouse is needed. unfortunately  this assumption is no longer valid in today's informationdriven age. in practice  information is constantly changing. it is common for users to frequently adjust the information warehouses by adding new dimensions to an existing iw or modifying and loading new data on a regular basis. all such operations must ensure the overall iw integrity and consistency.
　furthermore  due to the on-going data updating and loads  it becomes extremely important for the iwms system to cope with various forms of system failures and potential error conditions. today's warehousing systems have little or no support for fast failure recovery or error correction. neither do they support on-going iw schema changes well. the common practice is to simply rebuild the data warehouses from scratch each time when the changes are required or perform lengthy and error-prone manual iw operations. clearly  this is not acceptable.
　this paper takes a holistic and systematic approach towards understanding the general iwms requirements for bi and information analytics purposes and devising an iwms system to fill the gaps identified above. in particular  the key contributions of this paper lies in the following:
  we systematically studied the information warehousing activities and identified five major information warehouse management activities which guides the design and architecture of a comprehensive iwms system. those five categories of activities include building iw  loading data into iw  maintaining iw  data cleansing  and querying.   we presented a high level declarative language based approach to simplify and automate the etl processing  and demonstrated how to use such language to drive three of the iw key activities.
  we presented a working light-weight iwms system  biwtl which leverages the language and its runtime components to address the core issues in three iwms tasks: building iw  loading data  and maintaining iw. the biwtl 1 system has been bundled with the ibm business insights workbench  and deployed to a number of customers.
　to our knowledge  this is the first-of-the-kind effort in a systematic study of the requirements  issues  and solutions for an iwms system in today's information world. in the rest of the paper  we first compare our work with the related areas in section 1. we then highlight the five types of iw activities and describe the key issues to be addressed in each of those areas in section 1. we also present the high level language based approach in addressing the key issues using the giwl language designed for biwtl. sections 1  1  and 1 describe the giwl language syntax and the system components for three aspects of the iwms system respectively  i.e.  warehouse construction  data loading and warehouse data maintenance. the overall system framework of biwtl is presented in section 1 and the real world case studies are presented in section 1. finally  we conclude our work in section 1.
1.	related work
　our work is tightly related to the traditional data warehousing work. however  it differs from them in several aspects: first  traditional multi-dimensional data warehouse is mainly designed for olap applications on structured data alone. it also assumes that skilled dbas are available for most of the data warehousing tasks. the main research effort has been on data warehouse schema model design  1  1   olap operations  1  1  1  1   olap indexing  1  1   olap query optimization  1  1  1  1   view selection  1  1  1  1  1   and view maintenance  1  1  1  1  1  1 . although there are some initial effort on developing a highlevel data mining language for warehouse data  called dmql   the major focus is on warehouse schema design and data mining operations for structured data.
　biwtl  however  is designed for both text mining as well as bi applications. it integrates both structured and unstructured data  and is much simpler  more efficient  and easy-to-use iw toolkit than those that exist today in the marketplace. for instance  existing etl products  such as kalido   sunopsis   ibm db1 data warehouse edition   ibm websphere information integrator  formally ascential    microsoft bi accelerator  are often too complex to use or cannot handle structured and unstructured data in the same system. also  no incremental data maintenance operations are supported in these products.
　moreover  to our knowledge  none of the existing research and development in data warehousing has taken a holistic view of all major warehousing activities or designed a comprehensive iwms system that can cope with today's iw requirements. biwtl is the first attempt in this direction while leveraging existing data warehousing  rdbms  and full-text indexer technologies whenever appropriate.
　in the development of biwtl  we also observe many research opportunities. some of them are existing research topics but may bring new challenging issues to solve. others are novel research problems that have not been extensively studied in the literature. we believe that the development of an iwms is not only useful for facilitating industrial development of warehousing products  but also for bringing many novel and challenging issues to the research community to study.
1.	a big picture
1	iwms core activities
　in an attempt to understand the requirements of the next generation iwms system  we took a holistic look at the key activities around information warehousing. our study based on the past few years of experience with customers suggests that today  the major information warehousing activities are centered around five areas  as shown in figure 1 :
building warehouse: the first task involved in information warehousing is to construct an iw by designing the right data warehouse model  defining the appropriate schemas  e.g.  tables and dimensions that constitute the iw  and implementing the schema in the designated iw. today  such tasks are time-consuming and complex. the next generation iwms must allow warehouse administrators to build an iw in an easy  quick and flexible fashion without burdening them with the details of data warehouse models and database specific operations.
loading data into warehouse: once an iw is defined  the next step is typically to load data into the warehouse. loading data is tightly related to the well-known etl  i.e.  extract  transform  load  process in that proper data fields needs to extracted  transformed  and loaded into the target iw. due to the requirements originating from unstructured data  the new iwms must support flexible data extraction for various sources with different formats  such as xml files  sophisticated data transformations  and efficient loading mechanisms for large amount of data. none of the traditional etl tools can handle the level of flexibility  complexity  and efficiency imposed by semi-structured data and unstructured data today.
maintaining warehouse data: because of the potential changes in information sources and the need for different types of analytics  an iwms must allow flexible changes to iw while automatically maintaining the data consistency and integrity  e.g.  data and their indices in rdbms and full-text indices. furthermore  an iwms must be able to cope with various failure and error situations without requiring users to rebuild iw all the time. such areas have received very little research in the past.
data cleansing: an iwms should support actions to clean the data already loaded in the warehouse or before the data is loaded. such cleansing includes cleansing for structured  semi-structured  and unstructured data  e.g.  changing and merging dimension values  coping with invalid xml files  handling different character encodings  etc. although data cleansing techniques exist in various contexts  they have not been systematically studies in an iw environment.
querying warehouse data: once the iw is built  it will be used to serve various forms of queries. an iwms must support efficient processing of iw queries  e.g.  olap operations  as well as text search and retrieval operations. thus far  work has been done in isolation on supporting olap queries on structured information in an iw. the combination of structured and unstructured queries require some new innovation.
1	biwtl- the next generation iwms
　as a step towards developing the next generation iwms system that encompasses capabilities to facilitate all five core iw activities  we built a light-weight iwms called biwtl  business information warehouse toolkit and language . biwtl closes the major gaps as identified in section 1. in this paper  we describe the key solutions embedded in biwtl to support the first three types of iw activities  i.e.  building warehouse  loading data and maintaining data. these three tasks are essential to enable the data cleansing and querying capabilities.
　underlying biwtl is a declarative high level language based approach which is instrumental to simplify and automate the iw tasks. in particular  we designed a general and declarative iw language  giwl  for all iw tasks. with giwl  users only specify what they want rather than how to execute the operations. the analogy is that of sql language  and its relationship to relational database management systems  rdbms . with sql  users only need to define what they want in the query result rather than how to execute the query. the runtime system handles the query automatically.
　similarly  giwl language can be used to declaratively define various iw tasks. the runtime system  i.e.  biwtl  provides inherent support to carry out operations automatically without human intervention. biwtl manages both structured and unstructured data. biwtl uses databases to store and index structured data  and file systems or databases for unstructured data. to support highperformance and complex keyword queries  biwtl integrates with

figure 1: information warehouse management systems.
full text indexers  e.g.  juru   lucence   to automatically build indices for unstructured data. biwtl maintains the data and index consistency between databases and file systems at all times.
1.	iw construction
　to illustrate our giwl based approach and how it is applied to all iw tasks  we focus on key iw activity areas one at a time. in this section  we discuss the issues we face in iw construction and our solutions using the giwl language and runtime components.
　one of the major issues with today's iw tools is that they are often system-dependent  e.g.  db1  oracle  sql server  etc. . they require detailed rdbms  iw modeling  and text indexing knowledge. moreover  they often require highly skilled iw administrators to perform tedious  time-consuming  and error-prone customization when utilized in different customer environments. such customizations are necessary mainly due to idiosyncrasy of different rdbmss  file systems  and full-text indexers. even though there are standards such sql  for rdbms and posix for file systems  such standards often contain many non-standard variations  even for simple operations  which require customization at customer sites. the following examples in example 1 illustrate some variations in different rdbmss. such customization tasks create barriers for timely iw construction and require significant training even with proficient dbas.
example 1: 1  databases may use different keywords for defining the same data type. for instance  for the integer type  db1 uses  integer  and mysql uses  int ; for the lob  large object  data type  db1 uses  clob  size   and mysql uses  tinyblob    blob    mediumblob   and  longblob .
　1  databases may have different ways to drop an index. for instance  in db1  oracle and postgresql  the syntax is  drop index index name . sql server  however  uses  drop index table name.index name . mysql uses  alter table table name drop index index name .
　1  databases may have different ways to define automatically incremental attributes. for instance  in db1  the syntax is  not null generated always as identity . in mysql  the syntax is  not null auto increment . in sql server  the syntax is  not null identity . other databases also have their own syntax.
　1  since creating  and dropping  databases are not supported in jdbc and odbc  to create  and drop  a database  one has to use database-specific command line utilities that are often different from one database to another. for instance  db1 has its command line utility  db1   mysql has  mysql   and sql server has  sqlcmd . they all have a very different set of options to execute.
　to exacerbate the situation  full-text indexers are far less standardized than file systems and rdbmss. even building text indices may require users to link in very different libraries  e.g.  juru versus lucene . in order to integrate structured and unstructured data in a single iw  iw designers must not only be a highly skilled dba  a data warehouse modeling guru  but also a file system and full-text indexer expert. clearly  this can create significant roadblocks for the adoption of iw  text mining  and bi technologies.
　to alleviate such pains  biwtl utilizes a high level declarative language giwl to clearly separate the high-level iw design and low-level iw implementations. with biwtl  iw designers design an iw by creating a language script that contains a set of declarative statements defined in giwl. the language script indicates which database and full text indexer the user wishes to use and what tasks needs to be carried out. biwtl automatically generates low-level database-specific and full-text indexer-specific commands at runtime based on the script and executes them without human intervention. such an approach removes the customization burden from users and enables overall iw task simplification and automation. the following section describes the detailed language specification for iw construction.
1	language specification
