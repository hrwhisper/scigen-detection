we present a new incremental knowledge acquisition approach that incrementally improves the performance of a probabilistic search algorithm. the approach addresses the known difficulty of tuning probabilistic search algorithms  such as genetic algorithms or simulated annealing  for a given search problem by the introduction of domain knowledge. we show that our approach is effective for developing heuristic algorithms for difficult combinatorial problems by solving benchmarks from the industrially relevant domain of vlsi detailed routing. in this paper we present advanced techniques for improving our knowledge acquisition approach. we also present a novel method that uses domain knowledge for the prioritisation of mutation operators  increasing the ga's efficiency noticeably.
1	introduction
searching for good or even optimal solutions for complex combinatorial problems has been a challenge in artificial intelligence research ever since ai's earliest days.
　while it has been long recognized that the effectiveness of a particular search approach depends on the chosen representation as well as certain characteristics of the problem to be solved  to date there is no systematic approach available that allows one to efficiently engineer a special-purpose search strategy for a given search problem.
　in this paper we present an approach that allows humans to articulate their intuition about how to search effectively for a given search problem. this appears to be a promising approach as humans often have good intuitions about how to find acceptable or good solutions to search problems  if they had to search manually.
　we embedded our approach in the probabilistic search framework of genetic algorithms  ga . while gas have a reputation as being general purpose  in practice it requires usually substantial adaptation effort to the search problem at hand. for complex problems this process may well take months in order to allow the ga to find an acceptable solution within reasonable time.
　we chose a probabilistic search algorithm in which to embed the problem specific knowledge about effective search strategies as this allows one to stop the knowledge acquisition process at any time. a smaller knowledge base  kb  results in a less effective search process  but may still find a
　satisfactory or near satisfactory solution for less challenging problem instances. incremental additions to the kb improve the effectiveness of the search.
　as part of our discussion  we present a novel technique of varying ga mutation strategy based on execution history  having implications beyond our work for gas in general.
　for the knowledge acquisition process we build on the idea of ripple down rules   which allows us to incrementally refine the given  initially empty  knowledge base. ripple down rules  rdr  ensure that a knowledge base is only amended in a way that does not deteriorate its accuracy on previously seen instances.
　our variant of rdr is a significant extension of the rdr approach. we also introduce an expanded knowledge acquisition process in which we help the expert find examples in past search history where the quality of the kb needs attention. this work is based on .
　in section 1 we provide a short overview of genetic algorithms and rdr. this is followed by section 1 where we describe our framework heureaka!. section 1 introduces a case study of how heureaka! was applied to detailed routing  an industrially relevant problem in vlsi design. we discuss our experiments and results to these in section 1  demonstrating that our approach is successful. the conclusions follow in section 1.
1	background
before we discuss our approach to combining gas and knowledge acquisition  we start with a brief summary of these two areas:
1	probabilistic search with genetic algorithms
a number of evolutionary algorithms exist; we base our approach on genetic algorithms which is one such algorithm. basic gas are relatively easy to implement. a solution candidate for the given problem instance is encoded into a genome. a set of genomes makes up a population of potential solutions. the ga performs a search through the solution space by modifying a population of genomes  guided by an evolutionary heuristic. when a suitable solution has been identified  the search terminates.
　gas usually start with a randomly initialized population of individuals  and guide their search by a fitness function of the individuals. in a probabilistic fashion  using operators for selection  mutation and crossover  the ga attempts to direct the search to promising areas. i.e. the ga maintains a certain population size by replacing less fit individuals by newly generated ones. the new individuals are generated by mutation or cross-over based on parent individuals of high fitness.
　due to their generality and flexibility  gas have been applied in many domains  demonstrating their effectiveness on hard problems  1; 1 . in very complex domains there are significant challenges where generic ga techniques do not scale well. this includes high sensitivity to problem encoding and operator formulation  selection strategies  as well as selection of operator weightings  population size and running time 1; 1; 1 . thus in practice substantial tuning of the ga is necessary to augment the generic algorithms.
　in our approach  we do not use an encoding of our problem into a binary code as is often seen with conventional gas. instead  our encoding is a direct representation of a solution  see below for a better description . our crossover operator is designed for this representation and thus is very effective in maintaining sub-solution coherence in the genome  and also identifying which areas of the genome appear fitter than others. we have a simple yet effective crossover operator  and chose to concentrate our work on the mutation operator - mainly because it was better suited to our the knowledge acquisition approach.
　our approach integrates with the ga a knowledge base where humans can codify their intuition about useful search steps and strategies for the given type of problem.
　in addition  we present a novel method that uses domain knowledge for the prioritisation of mutation operators  increasing the ga's efficiency noticeably. because we have sufficient domain knowledge in our fitness function  we can identify parts of the genome that are desirable or undesirable and use that knowledge to influence mutation strategy. we also show how using the mutation history of these identified characteristics to change mutation selection strategy.
1	knowledge acquisition using ripple down rules
rdr  allows one to add rules to a knowledge base incrementally without compromising the previously shown satisfactory performance of the kb. an extension of rdr allows hierarchical structuring of rdrs -  nested rdr   nrdr  . nrdr allows the re-use of definitions in a kb  as well as the abstraction of concepts  which allows for more compact kbs.
　single classification ripple down rules  scrdr  use a binary tree where the root node is also called the default node. to each node in the tree a rule is associated  with a condition part and a conclusion which is usually a class - in our case it is an operator application though. a node can have up to two children  one is attached to an except link and the other one is attached to the so-called if-not link. the condition of the default rule in the default node is always true and the conclusion is the default conclusion. when evaluating a tree on a case  the object to be classified   a current conclusion variable is maintained and initialised with the default conclusion. if a node's rule condition is satisfied  then its conclusion overwrites the current conclusion and the except-link  if it exists  is followed and the corresponding child node is evaluated. otherwise  the if-not link is followed  if it exists  and the corresponding child node is evaluated. once a node is reached such that there is no link to follow the current conclusion is returned as a result. indicates the path taken & rule executed  v   for ade  box indicates how action z would be added for
.
　figure 1 shows a simple rdr tree structure. in bold is a rule that a user might have added for the case where conditions adghij hold  causing action z to be executed  instead of w.
　for the purpose of integrating with the genetic algorithm  in our approach each case is a genome and conclusions are actually a sequence of actions that can be applied to the genome. in typical rdr implementations  any kb modification would be by adding exception rules  using conditions which only apply to the current case for which the current knowledge base is inappropriate. by doing this  it is ensured that proper performance of the kb on previous cases is maintained.
　nesting rdrs allows the user to define multiple rdrs in a knowledge base  where one rdr rule may use another  nested rdr tree in its condition   and in heureaka! as part of an action  see section 1 . i.e. the nested rdr tree is evaluated in order to determine whether the condition is satisfied. a strict hierarchy of rules is required to avoid circular definitions.
1	heureaka! - our framework for improving search with domain knowledge
the heureaka!  heuristic evolutionary algorithm with knowledge acquisition  framework is composed of a general ga scheme and a knowledge acquisition  ka  component.
　each genome in the ga population represents a potential solution to the problem to be solved. while searching  the ga needs to perform a fitness evaluation and the mutation of a genome. for this it uses the two knowledge bases  the mutation kb and fitness kb. the ga presents a genome to the relevant kb  which responds by suggesting a mutation or fitness score.  the crossover function is handled differently  more details below .
　the ka module handles maintenance of the kbs  which contain collections of nrdrs. the nrdrs are incrementally developed by the expert through the addition of rules  the next section contains a detailed description of this process .
　the fitness kb contains rules based on past examples given by the expert about desirable and undesirable traits of genomes. the ga requires a fitness value  so the rules contain various calculations the expert adds to reflect these traits.
　the mutation kb similarly contains rules accumulated from expert recommendations. each rule contains an action to be executed under certain conditions. each action is one or more commands which can modify the genome. the kb contains a set of nrdrs which contain these rules. when a genome is presented to the mutation kb  it is evaluated against these nrdrs. in accordance to the rdr algorithm  actions which satisfy the relevant conditions are selected for execution. a non-deterministic element is introduced by letting the expert attach probabilistic weights to selected nrdrs and letting a random procedure pick which one to execute. this allows the expert leeway to speculate about what the best actions might be  effectively letting the gas heuristics  decide  the most appropriate action.
　as opposed to other methods related to case-based reasoning and gas  e.g.  or    the expert uses past cases to formulate rules to explain improvements  rather than using past examples or similar solutions injected into the evolutionary process  or trying to extract the rules automatically.
　the overall architecture of heureaka! is domain neutral. the implementation contains kb management modules  ga  a graphical user interface as well as range of utilities supporting the expert evaluate past searches. this is complemented with a smaller component that needs to be implemented for each problem domain containing a relevant solution representation. the user interface also requires a small addition to translate this representation for visualisation.
