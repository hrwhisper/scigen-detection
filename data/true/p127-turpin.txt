the presentation of query biased document snippets as part of results pages presented by search engines has become an expectation of search engine users. in this paper we explore the algorithms and data structures required as part of a search engine to allow efficient generation of query biased snippets. we begin by proposing and analysing a document compression method that reduces snippet generation time by 1% over a baseline using the zlib compression library. these experiments reveal that finding documents on secondary storage dominates the total cost of generating snippets  and so caching documents in ram is essential for a fast snippet generation process. using simulation  we examine snippet generation performance for different size ram caches. finally we propose and analyse document reordering and compaction  revealing a scheme that increases the number of document cache hits with only a marginal affect on snippet quality. this scheme effectively doubles the number of documents that can fit in a fixed size cache.
categories and subject descriptors
h.1  information storage and retrieval : information
search and retrieval; h.1  information storage and retrieval : systems and software-performance evaluation  efficiency and effectiveness ;
general terms
algorithms  experimentation  measurement  performance
keywords
web summaries  snippet generation  document caching
1. introduction
　each result in search results list delivered by current www search engines such as search.yahoo.com  google.com and search.msn.com typically contains the title and url of the actual document  links to live and cached versions of the document and sometimes an indication of file size and type.
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee.
sigir'1  july 1  1  amsterdam  the netherlands.
copyright 1 acm 1-1-1/1 ...$1.
in addition  one or more snippets are usually presented  giving the searcher a sneak preview of the document contents. snippets are short fragments of text extracted from the document content  or its metadata . they may be static  for example  always show the first 1 words of the document  or the content of its description metadata  or a description taken from a directory site such as dmoz.org  or query-biased . a query-biased snippet is one selectively extracted on the basis of its relation to the searcher's query.
　the addition of informative snippets to search results may substantially increase their value to searchers. accurate snippets allow the searcher to make good decisions about which results are worth accessing and which can be ignored. in the best case  snippets may obviate the need to open any documents by directly providing the answer to the searcher's real information need  such as the contact details of a person or an organization.
　generation of query-biased snippets by web search engines indexing of the order of ten billion web pages and handling hundreds of millions of search queries per day imposes a very significant computational load  remembering that each search typically generates ten snippets . the simpleminded approach of keeping a copy of each document in a file and generating snippets by opening and scanning files  works when query rates are low and collections are small  but does not scale to the degree required. the overhead of opening and reading ten files per query on top of accessing the index structure to locate them  would be manifestly excessive under heavy query load. even storing ten billion files and the corresponding hundreds of terabytes of data is beyond the reach of traditional filesystems. special-purpose filesystems have been built to address these problems .
　note that the utility of snippets is by no means restricted to whole-of-web search applications. efficient generation of snippets is also important at the scale of whole-of-government search services such as www.firstgov.gov  c. 1 million pages  and govsearch.australia.gov.au  c. 1 million pages  and within large enterprises such as ibm   c. 1 million pages . snippets may be even more useful in database or filesystem search applications in which no useful url or title information is present.
　we present a new algorithm and compact single-file structure designed for rapid generation of high quality snippets and compare its space/time performance against an obvious baseline based on the zlib compressor on various data sets. we report the proportion of time spent for disk seeks  disk reads and cpu processing; demonstrating that the time for locating each document  seek time  dominates  as expected.
　as the time to process a document in ram is small in comparison to locating and reading the document into memory  it may seem that compression is not required. however  this is only true if there is no caching of documents in ram. controlling the ram of physical systems for experimentation is difficult  hence we use simulation to show that caching documents dramatically improves the performance of snippet generation. in turn  the more documents can be compressed  the more can fit in cache  and hence the more disk seeks can be avoided: the classic data compression tradeoff that is exploited in inverted file structures and computing ranked document lists .
　as hitting the document cache is important  we examine document compaction  as opposed to compression  schemes by imposing an a priori ordering of sentences within a document  and then only allowing leading sentences into cache for each document. this leads to further time savings  with only marginal impact on the quality of the snippets returned.
1. related work
　snippet generation is a special type of extractive document summarization  in which sentences  or sentence fragments  are selected for inclusion in the summary on the basis of the degree to which they match the search query. this process was given the name of query-biased summarization by tombros and sanderson  the reader is referred to mani  and to radev et al.  for overviews of the very many different applications of summarization and for the equally diverse methods for producing summaries.
　early web search engines presented query-independent snippets consisting of the first k bytes of the result document. generating these is clearly much simpler and much less computationally expensive than processing documents to extract query biased summaries  as there is no need to search the document for text fragments containing query terms. to our knowledge  google was the first whole-ofweb search engine to provide query biased summaries  but summarization is listed by brin and page  only under the heading of future work.
　most of the experimental work using query-biased summarization has focused on comparing their value to searchers relative to other types of summary  1  1   rather than efficient generation of summaries. despite the importance of efficient summary generation in web search  few algorithms appear in the literature. silber and mckoy  describe a linear-time lexical chaining algorithm for use in generic summaries  but offer no empirical data for the performance of their algorithm. white et al  report some experimental timings of their webdocsum system  but the snippet generation algorithms themselves are not isolated  so it is difficult to infer snippet generation time comparable to the times we report in this paper.
1. search engine architectures
　a search engine must perform a variety of activities  and is comprised of many sub-systems  as depicted by the boxes in figure 1. note that there may be several other sub-systems such as the  advertising engine  or the  parsing engine  that could easily be added to the diagram  but we have concentrated on the sub-systems that are relevant to snippet generation. depending on the number of documents that the search engine indexes  the data and processes for each

	query	results page
figure 1: an abstraction of some of the sub-systems in a search engine. depending on the number of documents indexed  each sub-system could reside on a single machine  be distributed across thousands of machines  or a combination of both.
sub-system could be distributed over many machines  or all occupy a single server and filesystem  competing with each other for resources. similarly  it may be more efficient to combine some sub-systems in an implementation of the diagram. for example  the meta-data such as document title and url requires minimal computation apart from highlighting query words  but we note that disk seeking is likely to be minimized if title  url and fixed summary information is stored contiguously with the text from which query biased summaries are extracted. here we ignore the fixed text and consider only the generation of query biased summaries: we concentrate on the  snippet engine .
　in addition to data and programs operating on that data  each sub-system also has its own memory management scheme. the memory management system may simply be the memory hierarchy provided by the operating system used on machines in the sub-system  or it may be explicitly coded to optimise the processes in the sub-system.
