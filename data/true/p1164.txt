markup languages  representations  schemas  and tools have significantly increased the ability for organizations to share their information.  languages  such as the extensible markup language  xml   provide a vehicle for organizations to represent information in a common  machine-interpretable format.    although these approaches facilitate the collaboration and integration of inter-organizational information  the reality is that the schema representations behind these languages are reasonably difficult to learn  and automated schema integration  without semantics or ontology mappings  is currently an open problem. in this paper  we introduce an architecture and service-oriented infrastructure to facilitate organizational collaboration that combines the push features of the publish/subscribe protocol with storage of distributed registry capabilities.  
categories and subject descriptors 
d.1  software : software engineering: software architectures - domain-specific architectures.  
general terms keywords 
design  experimentation  standardization  languages 
distributed and heterogeneous information management  management of semi-structured data 
1. introduction  
web data can be defined as a form of data marked-up for web use  sometimes also called semi-structured data. xml is a markup language that provides a universal format for organizations to represent their underlying web data.  objects in xml data are specified using elements.  a list of elements and their attributes represent the fundamental structure for defining an xml schema.  a major problem occurs when two organizations develop their schemas independently and produce different xml schemas for essentially the same data or capability.  in the future when these organizations need to merge their capabilities  there is a requirement for schema integration.  although there are modeling approaches that facilitate integration   the idea of schema integration without context information or semantics is an open problem.  in fact  automated tools for schema integration  when semantics are not present  are practically nonexistent  and humanintervention and organizational collaboration are required. 

instead of addressing the problem of schema integration first  we believe the initial step should be creating a seamless organizational collaboration environment which will facilitate web data sharing.  although registries  have typically facilitated data sharing  they lack the capability of real-time distribution of data. we introduce an architecture that extends standard registry capabilities with an integrated messaging infrastructure. furthermore  the architecture supports a suite of graphical services that allow users to create  store  and activate query instructions on the web data prior to distribution. this architecture can serve as a first enabling step towards a fullyautomated collaboration architecture  perhaps employing ubiquitous  agent-supported technologies.  in the next section  the usage of the architecture is discussed in an applied setting.  the subsequent sections discuss the design of this proposed architecture and the underlying implementation. 
1. intelligence sharing scenario 
under the sponsorship of the air force research lab  afrl   new infrastructures  that support information sharing and advanced analytical collaboration  are being created to support intelligence analysts. many companies and universities are creating intelligence tools containing analysis information and complex models.  these tools publish assets in some form of structured mark-up language.  a major challenge in this domain is making these assorted capabilities available on a single analyst desktop.  
as an example  intelligence analysts typically issue or receive urgent requests for information.  these requests spur the formation of a team of perhaps a dozen relevant experts who must construct accurate responses in a short period of time.  due to the nature of this domain  the composition of these communities of interest will evolve as intelligence needs change and the cognitive support tools employed will vary according to the shifting group membership.  such a dynamic environment cannot rely on a strict schema applied to all analysts without undermining the capability to bring in new users  new points of views  and new tools.  one key to facilitating collaboration in a dynamic environment is the capability of comparing schemata without merging them  thereby exposing different perspectives among members of the community of interest.  the knowledge of varying perspectives accelerates team formation by exposing potential points of miscommunication.  
currently  the team formation and processes are relatively ad-hoc.  
using the proposed architecture  an analyst will employ a 

copyright is held by the author/owner s . www1  may 1  1  chibu  japan acm 1-1/1. 

principled approach using his/her desktop to create and participate in an on-demand  virtual community of interest. the proposed 

1

architecture supports advanced collaboration by providing data sharing as a first step so that the differences of the schema and the subsequent merging activities can be included as part of the community of interest definition. 
1. architecture description 
the publish/subscribe collaboration architecture can be discussed in terms of server-side modules and requester-side modules. a provider organization can register with the system by providing a schema or a specific type of web-based information. a new requester organization can subscribe to the instance data  based on pre-registered schemas  as it is populated on the server.  the requester can choose to receive complete data files or a subset of the web-based data. during regular operations  web-based information is distributed in real-time using interface modules on both the requester-side and server-side.  on the requester-side  there are two modules that package and unpackage the instance data for transmissions to and from the server.  there is a humandriven module  and a module that enables machine-to-machine interface. at operations time  provider organizations will transmit instance data regularly and propagate the subscribed data to requesters while recording the transactions in a local data repository. 
1. sharx prototype 

figure 1. sharx architecture design and implementation diagram. a service-oriented  component-based prototype was created that leverages technologies such as java-based web services  xml querying software  a relational database  and web server packaging techniques.  entitled sharx  i.e. derived from share xml   the prototype consists of five major high-level components and is packaged as a java web archive file  i.e. war file  easily deployed on a network-accessible server. once deployed  the initiator uses the server-side graphical user interface component developed as a java servlet to name the community of interest and perhaps enter the initial schemas and instance data.  others invited to the community of interest can also enter schemas and information by hand  or download a pre-configured client proxy component to connect their local tools to the distributed transmission component  both developed as java web services  of the server.  all communication is captured in communication objects and stored with the data management component to a both a relational database and a xml registry. as a service  stakeholders can subscribe for and query against information using the user interface and the collaboration processing component that incorporates xquery techniques. the sharx prototype is shown in figure 1. 

1. discussion 
probably the most closely related architecture work in the area of assisting human collaboration for schema integration was the blackboard system introduced by ram et al. .   ram introduces a black-board system for integrating relational schemas. this work is related by nature of the support for human collaboration.  the sharx approach relies on technologies that push information to the stakeholders  whereas the blackboard approach relies mostly on human-driven collaboration.  by addressing schemas for web data  sharx addresses a different domain than that of relational schemas.  
1. acknowledgments 
students of cosc 1  software engineering ii   georgetown university  washington dc  spring 1  helped in software development.  we also acknowledge conversations with dr. leo 
1
obrst and dr. len seligman of the mitre corporation. this work was partially funded under the afrl's topsail program. 
