in system management applications  an overwhelming amount of data are generated and collected in the form of temporal events. while mining temporal event data to discover interesting and frequent patterns has obtained rapidly increasing research efforts  users of the applications are overwhelmed by the mining results. the extracted patterns are generally of large volume and hard to interpret  they may be of no emphasis  intricate and meaningless to non-experts  even to domain experts. while traditional research efforts focus on finding interesting patterns  in this paper  we take a novel approach called event summarization towards the understanding of the seemingly chaotic temporal data. event summarization aims at providing a concise interpretation of the seemingly chaotic data  so that domain experts may take actions upon the summarized models. event summarization decomposes the temporal information into many independent subsets and finds well fitted models to describe each subset.
categories and subject descriptors
h.1  database management : database applicationsdata mining
general terms
algorithms experimentation  human factors
keywords
event summarization  temporal dependency  ern  log

 the work is partially supported by an ibm faculty research award  an ibm sur award  and nsf iis-1.
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee. kdd'1  august 1  1  san jose  california  usa.
copyright 1 acm 1-1-1/1 ...$1.
1. introduction
　with advancement in science and technology  computing systems are becoming increasingly more difficult to monitor  manage or maintain. traditional approaches to manage systems have been largely based on domain experts through a knowledge acquisition process to translate domain knowledge into operating rules and policies. this has been experienced as a cumbersome  labor intensive  and error prone process. therefore data mining techniques have been applied to discover frequent and interesting patterns from system temporal events to monitor and manage computing systems  1 
1 .
　in system management applications  temporal event data are generated and collected in the form of temporal events. data mining approaches for analyzing temporal events generally focuses on discovering frequent or interesting patterns in the data-albeit their occurrences may only account for a small fraction of the entire data. it has attracted intensive research efforts  and as a result  a variety of temporal data mining algorithms have been proposed to speed up the discovery of such patterns  as scalability and efficiency are the major focus of these efforts. however  the extracted temporal patterns tend to be massive  without emphasis  intricate  and uninterpretable. most of them are meaningless or useless to nonexperts  even analysts.
　hence correctly understanding and interpreting patterns is a big challenge. it is of critical importance to enable temporal relationships between events hierarchical and more user-friendly for monitoring and managing complex systems. in this paper  we take a novel approach and demonstrate that an effective way to understand the seemingly chaotic temporal data is through event summarization  which attempts to use well-fitted models to describe the entire data set. good summarization leads to models that provide concise and comprehensible interpretation of the data so that domain experts can take actions upon each subset of the data. in this paper  we introduce event summarization as a systemic process that summarizes and interprets datasets.
1 a motivating example
industrial and government track short paper

figure 1: system management events　to illustrate the problem  we present a real-world example. figure 1 shows a set of system management events taken from a business-to-business gateway facility. after preprocessing  each event contains two attributes: timestamp and event type which are mapped to x and y axis. by visually analyzing the events  it is not difficult to conclude the following:
1. the three event types  labeled by a with the lowest id's are densely populated events. figure 1 shows a more detailed view of the event and exhibits the biperiodic pattern with periods 1 minutes and 1 minutes.
1. the event type labeled by b forms another bi-periodic pattern with period 1 hours and 1 hours.
1. the event type labeled by c appears to be randomly distributed with no apparent period.
1. the three event types indicated by d almost always occur at the same time. there is a dominating periodic pattern that governs the event group. however  there are some occurrences such as those indicated by e that appear randomly.
1. the 1 events labeled by f tend to appear together in a relatively random pace. sometimes there are another two event types on top that appear along with the group.
1. the event groups labeled by g and h appear a few times randomly.
1. the event groups labeled by i and j only occur once.
　the above observations are usually useful for decision making. for system management experts  the above summary provides a very good way to itemize patterns and to devise action plans. for example  the a section has strong bi-periodicity  so it would make better sense to monitor any violation of such bi-periodicity instead of the normal occurrences; also  1 of the 1 event types in f section can be turned off without losing any information.

figure 1: the events labeled a in figure 1
1 content of the paper
　currently  such type of data analysis suffers from the lack of a systematic way to discover and describe interesting phenomena and patterns contained in the data. some analysts pay more attention to the vertical patterns  event spike   some focus on temporal relationship between events  and some regard the event rate as the most important. in this paper  we describe our research efforts on event summarization for system management. we define several measures for describing temporal patterns and use them as an essential foundation for weighting and ranking relationships between temporal events. we then propose a divide-andconquer progress to summarize the datasets.
1. notations and measures
1 events and patterns
　an event has two components: the event type and the time stamp  occurring time or arrival time . throughout the paper  we assume a finite set e of event types. we use the symbol e  possibly with subscripts to denote event types. an event is then a pair   e t   where e （ e is an event type and t is the timestamp of e. our data  called an event sequence  is then a collection of all events occurred within some time range  say  between 1 and t  d = {  e1 t1     e1 t1    ...   en tn  }  where ei （ e ti （  1 t   and ti ＋ ti+1.
1 temporal dependency
　in general  the dependence relationships are essential factors/patterns to be discovered: they assert that an event usually happens after another event. such patterns of interest appear naturally in the system management applications . in our work  we start with pairwise temporal dependencies. let ta and tb be the sequence of timestamps for event a and b respectively. let the distance from a point z  or  a timestamp   to an event sequence ta to be d z ta  = minx（ta x−z x   z   i.e.  the distance from the point z to its nearest neighbor in ta which occurs after z. in order to whether b is dependent on a  we compare the typical distance of random points z to tb to the typical distance of points z （ ta to tb. this technique is motivated by the following idea: if the occurrence of b is predictable by the occurrence of a  then the conditional distribution which models the waiting time of event type b given event type a's presence would be different from the unconditional one . in particular  we compare the following two interarrival distributions:  1  the unconditional distribution of the waiting time of event b: fb r  = p{d x tb  ＋ r};  1  the conditional distribution for the waiting time of event b with respect to event a: fba r  = p d x tb  ＋ r|x （ ta . the conditional distribution can be regarded as the conditional probability distribution given there is an event of a at time x. if the two distributions fb r  and fba r  are different  then we say that b is directly dependent on a. this technique is extended from our earlier work  and can be used to discover temporal dependencies without using predefined time windows.
　after temporal dependencies have been discovered  the time intervals between the two events can be discovered by applying existing lag detection algorithms  see   e.g.  peak finding  clustering  and density estimation  on the collection of time distances between them. these time intervals can be easily incorporated into our event relationship network.
1 discovering temporal dependencies

 a  cdfs of  b  cdfs of two independent two dependent events.	events.
figure	1:	cumulative	distribution	functions  cdfs .
1	1
	d x b 	d a b 
 a  the boxplots of	d x b 	and d a b  of independent	events a and b. 1	1	 1	1
	d x d 	d c d 
 b  the boxplots of d x d  and d c d  of dependent events c and d.　to illustrate the procedure for discovering pairwise temporal dependencies  figure 1 a  plots the cumulative distribution functions cdfs  of unconditional fb and conditional fba for two sample independent events a and b in our dataset  and figure 1 b  plots the two cdfs for two dependent events c and d. the difference between the two cdfs clearly indicates the dependencies between these two events. in order to compare the differences between the independent relationship and dependent relationship  figure 1 a  shows the boxplots of d x b  where x is a random event and d a b . figure 1 b  shows the boxplots of d x d  and d c d . the lines in the approximate middle of boxes are medians. by using a robust order statistics method which compares the ranges of confidence intervals  we can also conclude that event b is independent of event a while event d is dependent of event c.
figure 1: boxplots.
1 ranking dependencies
　in order to summarize temporal datasets  we use entropy to rank the event dependency relationship. entropy indicates the amount of information contained in the event patterns and measures the uncertainty of conditional probability distributions on a particular event. we use fcp ej | ei  to denote the forward conditional probability of event ei followed by ej relative to all event pairs starting from ei. bcp ei | ej  is used to denote the backward conditional probability of ej preceded by ei relative to all event pairs ending at ej.
　the forward entropy of an event q can be defined as follows :
 1  fe q  =  	fcp e | q  〜 logn fcp e | q   
e（e
 where e is the set of all event types  n is the number of events in e  and e（e fcp e | q  = 1. for an instance  if event a is always only followed by b  the forward conditional probability of ab  fcp b|a  = 1  and the forward conditional probabilities of the sequences that a is followed by the other events are 1. the higher the entropy  the less deterministic the conditional probabilities are distributed. this means that if an event has a lower forward entropy  it has more confidence or liability to select some events to proceed. similarly the backward entropy can be calculated as follows:
 1  be q  =  	bcp e | q  〜 logn bcp e | q   
e（e
 where e（e bcp e | q  = 1. if an event  or an event sequence has a lower backward entropy  it has more deterministic precedents. in summary  entropy aims to capture the temporal dependence relationships among events.
1 concurrent behaviors
　concurrency indicates that multiple events are reported or performed in parallel rather than sequentially. suppose an event e1 has a forward conditional probability- distribution of  1 1  1  1  on four events; it is obvious this event has a more deterministic successor. suppose another event e1 has a distribution of  1  1 1  1 . obviously e1 has a 1-peak distribution  i.e.  there might be concurrent behaviors after e1. hence  to detect concurrent behaviors  for each event  we compare its conditional probability distribution with the prototype distributions peak1 =  1 1 ，，，  1   peak1 =  1 1 1 ，，，  1   ，，，  peakn =  1/n 1/n ，，，  1/n   where n is the number of event types  allowing all possible permutations.
1. event summarization process
　in this section  we discuss how to summarize an event set to an easy-to-understand plot based on the pair-wise event relationship. we also discuss some typical ways to reduce summarized patterns into action rules.
1 event relationship network
　event relationship networks  erns   1  1  is a graphical representation of temporal relationship among events. ern is widely used in it system management and business services management area as a product-agnostic format for bridging the knowledge discovery process with the system implementation process. event summarization discussed in this paper is aiming to render output in a form of ern that is richer and more expressive than what the industry is using. here we will explain both the representation and the construction process through an example.

figure 1: event relationship network
　besides the statistics discussed in the previous section are computed  an additional required input is a threshold tuple for distinguishing whether a particular statistics is significant enough. threshold tuples are in the form of hΘfe Θbe Θfcp Θbcpi.
note that Θfe and Θbe are upper bounds while Θfcp and Θbcp are lower bounds. the intended output  ern  use nodes to denote events with low Θfe or Θbe. these are the events with either more certain leading events or more certain following events. erns also need to show significant event relationship as links. the ern construction process includes the following steps:  1  plot all the events with fe ＋ Θfe or be ＋ Θbe as nodes in color yellow with two peripheries. as event a in figure 1.  1  plot all the events with fcp − Θfcp or bcp − Θbcp as nodes in color blue and green respectively with two peripheries. as event b and d.  1  for each event pair x and y with
industrial and government track short paper
fcp y |x  − Θfcp  plot a forward link as the one from a to b.  1  for each event pair x and y with bcp y |x  − Θbcp  plot a backward link as the one from a to c. the result is an ern looks like figure 1.

figure 1: usual event patterns
　in figure 1  we show a few common event patterns:  1  periodic patterns: an event with self-loop like event a with near-constant interval is a periodic event pattern. typical examples are events results from periodic probing and system heartbeat monitoring.  1  circular patterns: a set of events forming a loop is a circular pattern.  1  simultaneous patterns: a set of events always occur together as f in figure 1 is a simultaneous pattern. if the intervals among d e f g and h in figure 1 are close to 1  then they form a simultaneous pattern.  1  event chain: event i j and k form an event chain. such patterns are frequently observed from events that represent different stages of a problem and the problem progresses in a predictable sequence.
1 derive action rules from event summary
　as mentioned  the ern is a product-agnostic and vendorneutral representation of event dynamics. consider action rules in the form of if condition is true  take action
erns contain the information required by the condition part of the rule. the action part is usually invocation of self-healing scripts or notification for system administrators. some popular types of rules can be derived from erns almost directly. here are some examples:  1  event reduction rules: a self loop with a nearly constant arrival rate means an event keeps occurring in a constant pace. in system management  such a periodic event pattern is usually a series of probing reports. for those reporting normal  a typical action rule is to invert it - only report the missing of it. for those reporting abnormal  each consecutive  episode  is converted to a start and and an end of an anomaly  those in between can be suppressed.  1  event correlation rules: an event is usually a  symptom  of a problem. each problem may have many symptoms. for system administrators to correctly take remedial actions  the monitoring system provides root cause analysis  rca  capabilities. one way to achieve rca is to use erns. an ern built from a system management event set is usually a set of disconnected subgraphs. each subgraph contains a set of correlated events and hence represents a problem.  1  problem avoidance rules: some events indicate a problem as reached a severe stage and immediate actions should be taken to prevent them from occurring. erns provides a natural way to predict these severe states.

figure 1: the ern model summarizing the extracted patterns.1. a case study for system management
1 system log data description
　we collect log files from several windows machines in the graduate lab of the computer science school of florida international university. the detailed information about the log files can be found in . here each message is represented as a three-tuple hs c ti where s is the state type  c is the source component of this log message  and t is the timestamp. in order to discover event relationships among components  we map each distinct pair of hs ci into a unique event type e. this representation enable us to analyze the historical event data across multiple components and to discover interesting patterns embedded in the data. in our dataset  we have 1 different states including start  stop  dependency  create  connection report  request  configuration  and other. we have 1 different event sources  denoted by 1，，，1.
1 experiment results
　we perform a case study on a real log dataset using event summarization. the dataset contains the following event types: start1  dependency1  other1  other1  dependency1  create1  report1  configuration1  connection1  report1  report1  stop1  request1  stop1  request1  dependency1  stop1  request1  report1 where the prefix words in indicate the event states and the last number is the component id  i.e.  event sources  that reports the events. due to the space limit  we omit the detailed decomposition process of the dataset by event summarization. the ern summarization model constructed from the extracted temporal patterns is given in figure 1.
　the event summarization approach is obviously useful for system management experts to make decisions. first  the dependency patterns are extracted based on the rank. the divide-and-conquer process provides a systematic way to decompose the dataset. second  the ern model provides a good guideline for identifying patterns and to devise action plans. for example  the temporal pattern event 1  i.e.  dependency1: event source 1 in dependency situation  followed by event 1  i.e.  create1: event source 1 in create situation  implies the creation requests in component 1 are generally resulted by the lack of resources. so to reduce the creation requests  we need to allocate more resources to the component. as an another example  the temporal pattern event 1  i.e.  stop1: event source 1 in stop situation  followed by event 1  i.e.  configuration1: event source 1 in configuration situation  implies the stop process in component 1 often leads to the configuration procedure. so to speed up the exit process of component 1  we need to either eliminate the configuration procedure when exiting or improve the configuration procedure.
1. conclusions
　in this paper  we present a novel approach  event summarization  to understand and interpret temporal log data for system management. event summarization aims at providing a concise interpretation of the seemingly chaotic data  so that domain experts may take actions upon the summarized models. a divide-and-conquer process is employed to extract temporal patterns based on entropy ranking and an ern is constructed to provide concise representations. we present a case study using the real-world system log data. it should be noted that event summarization is a general concept that can be applied to various types of applications.
