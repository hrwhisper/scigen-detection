current methods for finding relevant content  especially in media-rich web environments  suggest that metadata is critical for accurate and efficient information retrieval. we describe a media browser tool  which enables users to access content by visually browsing and searching metadata that is stored in a distributed fashion over the web. the basic constraint imposed by the media browser tool is that the distributed metadata can be represented in xml which uses xlink semantics  and preferably defined with xml schema . the media browser tool enables users to access content from a single interface from which they can maintain their own information landscapes  which comprise links to metadata of interest to the user.
keywords
metadata  information retrieval  multimedia  information landscape  xml schema.
1. introduction
currently we use web browsers to explore and view textbased content in which links have been manually authored  and search engines to locate and explore content that has not been explicitly linked. this information retrieval process has evolved based on text-based content and is not necessarily well-suited to media rich web environments where the only means for finding non-textual content is using metadata and specific tools for accessing that metadata. we describe a general-purpose multimedia browsing and searching tool  called media browser. this tool integrates the current concepts of browsing and searching in a single rich browsing and searching visual interface in which the entity being browsed is metadata. only when users have established from the metadata that they wish to view/play the content is the content accessed. playing/viewing of the content is then enabled using media-specific plug-ins. the metadata used by media browser can be stored in disparate repositories on the web and must contain navigable links to the relevant content. it is preferable  though not essential  that the structure and semantics of the metadata are defined using xml schema. media browser does not require prior knowledge of the schemas that define the metadata.
media browser visually represents metadata to users for the purposes of browsing and searching. it achieves this by differentiating between those components of the metadata  descriptors  which represent structural information about the content  e.g.  a component which describes a clip of a video  from those descriptors that represent properties or index information  e.g.  the date an image was captured . the structural descriptors typically contain links to either further structural descriptors or to content and are used to construct a browsable table of contents  toc . the index descriptors are used to enable searching for content. the motivation behind this separation into a toc and an index is that people are generally familiar with this concept. also metadata creators  either consciously or unconsciously  often use this concept in their design of metadata schemas. although the general concept of metadata-based browsing is not new  we believe our method of generating a visual representation of available metadata for the purpose of browsing and searching using a toc and index is novel. also the ability to enable users to browse metadata which has been defined using schemas of which media browser has no prior knowledge is a valuable capability.
media browser attempts to visually represent any xml metadata that uses w1c recommended xlink  semantics. however  it can provide a higher level of interpretation and thus functionality for metadata defined using xml schema  for the following reasons. first  media browser can use the type extension/restriction and element substitution information of xml schema to infer relationships between descriptors and thus provide more useful search results. second  descriptor definitions in schemas can be used to provide lists of possible index descriptors for toc descriptors. these lists can be used to construct structured query expressions and to enable metadata editing. finally the datatype functionality of xml schema can be used to constrain metadata editing.
each xml metadata object fetched by media browser is firstly transformed into a native media browser description with its descriptor components being defined as either toc or index descriptors. the transformation can be achieved by using an xslt  stylesheet for commonly used metadata standards  e.g.  dublin core   mpeg-1  and dig  . alternatively  the transformation can be performed dynamically using a set of interpretation rules that we have defined. these rules use linking semantics  e.g.  the xlink:href attribute  to infer whether a descriptor should be treated as part of the toc or index for a description. the transformation step enables media browser to visualize metadata using a wide range of vocabularies and thus act as a general-purpose metadata-based browser.
media browser allows users to access legacy metadata repositories in a standards-compliant manner. the mechanism requires the content provider  or owner of the legacy database  to provide a module called a metadata server. this server receives requests for metadata using a request syntax that is based on xpath . it then responds by effectively translating the stored metadata which is relevant to the request into dynamically-generated xml metadata  defined using xml schema . this means that media browser users can include items in their tocs that contain links to a metadata server  the links identifying particular metadata item s  of interest in a legacy database.
some general-purpose media browsers exist  perhaps the best known of which is windows media player 1 . however typically with such browsers  the entity being browsed is local workstation content  the metadata available is limited because it is often extracted directly from the content  and the accessible media types are usually limited because of the tight coupling between content and metadata. media browser removes these limitations by allowing the user to browse metadata directly and by using media-specific plug-ins for the viewing/playing of content. media browser also provides some advantages over existing search engines by providing a general-purpose integrated browsing and searching interface and by allowing users to access remote and disparate metadata repositories.
1. media browser implementation
media browser is implemented as a client-server application using a standard web server  apache  and browser. the client is implemented using flash. the server is implemented using jserv  servlets  and swift generator   with the swift generator tool being used to dynamically generate flash objects from templates. the  media  contentdependent tasks of media browser are achieved using media tools plug-ins. standard web browser plug-ins can be used or specific tools can be developed.
media browser can operate as either an intranet or internet service. in both scenarios users are required to subscribe to the service to be able to access their personal links to metadata. the media browser server stores a toc and a set of stacks  collections of links to descriptors  for each subscribed user. a user's toc consists of a tree of toc descriptors. each toc descriptor is a node of an xml document that either contains child nodes or a link to a further xml document node or metadata server. the user can add or remove descriptors to their toc and thus it comes to represent their personal information landscape  which selectively identifies internet or intranet metadata which refer to content of interest to the user. stacks are used to store collections of links to descriptors of interest. stacks are also used to contain the results of searches.
the predominant feature of the user interface is a browse window  which contains a grid of visual identifiers for the child descriptors of the currently-selected toc descriptor. the visual identifiers are indicative of the linked content and may represent thumbnails or key frames  or can be generated automatically using a textual identifier  which may have been inferred as part of the metadata transformation process . the user interface provides two methods for users to navigate through their toc. first  they can use the standard method of simply double clicking on visual identifiers in the browse window to display any child descriptors of the selected descriptor. second  we provide a  breadcrumb   which is composed of a hierarchical sequence of toc descriptors. within each level of the breadcrumb users can select to pull down a menu showing the child toc descriptors of the selected parent at that level of the breadcrumb. the main advantage of the latter navigation approach over the standard tree-based method is that it is simple to exit from one sub-tree and directly enter another without having to navigate up and down the tree.
users can search the metadata contained in one or more descriptors from their toc. simple text-based and structured queries are possible. for structured queries  users are presented with a list of all the possible index descriptors that have been defined for either the selected toc descriptor s  or their toc children. currently  this requires the presence of xml schema definitions and therefore this functionality is only available to that metadata that has been defined using xml schema. on presentation of the list of index descriptors  the user can then specify required constraints for particular descriptors.
index descriptors that apply to a selected toc descriptor  and thus refer to an item or a collection of items of content  can also be viewed and edited. editing requires that a schema definition for the descriptor exists so that the datatype of that descriptor can be appropriately constrained and that the descriptors for the item are defined to editable. lists of relevant descriptors for the item can be obtained using the method described above for structured queries. creation or editing of metadata is particularly useful in cases where personal media content is being accessed  e.g.  personal digital images and video .
1 conclusions
any method of browsing that is suited to media-rich web environments must use metadata. it is difficult to believe that a single metadata vocabulary is sufficient to express all the concepts one would like to convey with multiple media types. however  it is possible that much metadata may eventually be represented using  or translated into  a wellaccepted standard that is both easy to use and sufficiently powerful to express the desired concepts. the media browser tool that we describe is just one such method of browsing. by being technically based on the powerful evolving markup language  xml schema  and by attempting to enable access to existing distributed metadata and metadata repositories  we believe that media browser is a step in the right direction.
