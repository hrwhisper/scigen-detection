in this paper  we present webguard  a content protection system for web documents. webguard allows content owners to exercise control over usage conditions governing access to their content. we first introduce the concept of transparent digital rights management  and then show how webguard realizes it  using existing web browsers.  
1. introduction 
with the advent of digital distribution and the many mechanisms available for it on the internet  it is now possible for a single person to make a perfect copy of a digital content and distribute it to millions of others. while in most cases content owners welcome this widespread distribution  in some cases the content owners may wish to enforce some control over the distribution and access to high-value digital content. highvalue digital content can be commercially valuable content  e.g. course material  artwork  or personal and confidential property  e.g. medical records . 
digital rights management  drm  technology allows content owners-such as publishers  artists and instructors- to distribute high-value digital content with the confidence that the terms and conditions they set for the use of their content will be respected. for example  the content owners may wish to specify terms and conditions that prevent the digital content from being copied or disable the content after it has been accessed a certain number of times. 
these benefits of drm technology have been available for some time in the specific industries of music and e-books  and there are several systems currently available on the market . however  for general multimedia web content-html  gif and jpeg images  animations  audio- drm technology has been less successful.  
the reason for this  to a large measure  lies in the current state of the art of the drm technology and the specific requirements it imposes on the end-user. typically a drm system works by encrypting the content and providing a program capable of playing  or displaying  the content to the user. this player ensures that the user does not make unauthorized use of the digital content. this  however  restricts the number of players available and requires users to obtain a separate player for each protection system. this approach is particularly problematic in the case of web content. on the one hand  users are not willing to use a different browser to access protected content  especially if the user has to use a different web browser to access content protected by different drm systems. on the other hand  the drm developers would be burdened by the need of providing and maintaining a fully featured web browser  making the drm solution cost effective only for large scale distributions and commercially viable content. 
 
 
in this paper we present webguard  a content protection system that allows users to access protected content using existing web browsers and plug-ins. our solution centers around three major components: an application certification process  a drmenabled http protocol handler  and an application-independent user-interface control module. we show that using these three components a complete end-to-end content protection system can be achieved. we have built a prototype of webguard using the internet explorer browser and the microsoft protocol handler technology. 
1. webguard components 
by  transparent drm   we mean that drm functions are provided to an application without requiring it to be specially drm-enabled. our approach has three main elements:  1  browser code verification   1  a trusted content handler  and  1  ui control through event blocking. these are shown in figure 1.  
the trusted content handler is a protocol subsystem responsible for retrieving and decrypting the content according to the terms and conditions set by the content owner. the browser code verification mechanism ensures that the decrypted content is delivered to a known  and trusted  application  e.g. a known version of the microsoft internet explorer browser. the ui control subsystem prevents users from performing actions that are not allowed by the usage terms  e.g.  print  save as  etc.  
1. browser code verification 
our approach uses a three-step process of establishing the trust of an application at call-time:  1  the application goes through an off-line certification process that generates a trust certificate containing the digital signature of the application   1  this signature is checked against the signature of the executable image of the application at run time  and  1  this validation is remembered and checked by the trusted content handler  tch  upon each request the application makes for content. 


 

figure 1. the webguard content protection system. 

we have developed two variations of the run time verification process: one that verifies the application at launch time  and another that verifies the application at content-request time. we describe only the former below; please see  for a description of the latter. 
the verifying launcher  vl  is responsible for verifying at launch time that the viewer application is certified as a trusted application for safely handling protected content entrusted to it. as mentioned above  each trusted viewer must undergo an offline certification process  which results in a trust certificate that includes the signed digest s  of the application code modules. before launching the viewer  vl verifies the integrity of the code. if the code installed on the client host is identical to the one certified  it is safe to handle the content. vl then instructs the operating system to load the application from the verified code files. by virtue of its role as the application launcher  vl obtains os-specific information  such as the process id or the process creation date  which uniquely identifies the loaded application instance within the system. vl uses this information to compute a stamp that still uniquely identifies the application instance but is hard to guess or forge. the stamp is computed using a hashing function  which is known to tch as well. the algorithm used by the hashing function must be deterministic  always generating the same result given the same input  for reasons described later. one such algorithm may be a common encryption algorithm using a predetermined key. 
when an application makes a call on the trusted content handler  tch  to access a protected resource  the tch first verifies that the application was launched and verified by the vl. it does this by computing the stamp for the application using the same uniquely identifying information and scrambling information that the vl did  and then contacting the vl for comparison. if the tch-computed stamp and the vl-computed stamp are the same  then the tch was called by the same application instance that the vl verified and launched. the tch may then cache its stamp so that no further communication with the vl is necessary  for this session with the application. the tch and the vl communicate through a secure connection. 
1. trusted content handler 
webguard use internet explorer's protocol handler extension mechanism to implement a trusted content handler. urls for webguard-protected content use the protocol names rmfile 
 for local content  and rmhttp  for remote content . when the browser receives urls with these method names  the webguard trusted content handler is invoked. the tch invokes the necessary drm functions  decrypts the content  and passes it back to the browser. 
the interface that the drmc offers to the ie protocol handler is similar to a file system interface in following an  open-readclose  pattern. the content identifier received from the protocol handler is a url with a hierarchical path name identifying the content item. from this path name we identify the name of the package the item belongs to. given the package name  we can locate the set of rights associated with the package.  
the webguard rights specification mechanism allows content publishers to specify rights at an arbitrarily fine level of granularity. this is important for protected packages that contain large numbers of individual content items-e.g.  courseware  photography collections  literature anthologies  to which publishers may wish to allow different levels of access. for example  they may wish to offer the first section of a course at no charge  but require users to purchase access to the remaining sections. the rights specification mechanism we developed for webguard allows fine-grained specification  but is space-efficient and has a rights-lookup time of o lg n .  
1. user interface control module 
an application handling protected content must prevent the user from invoking unauthorized operations on the content. to provide this function for an application in a transparent manner proved to be one of the more challenging tasks in the project. we developed a mechanism that allows us to control the userinterface operations of microsoft windows tm -based applications. we rely on the event-handler structure of windows programs and the ability of other program modules to register themselves as listeners of the events and to receive them before the application does. in this way  if the received event represents an operation that should be blocked  according to the rights in effect for the subject content  the application can be prevented from receiving the event. 
webguard's user interface control module  uicm  operates on an application-specific event-to-action map  which tells it which application events represent which controllable actions  such as print  save  and copy . this map is generated through a manual process of inspecting the execution of an application using a tool such as microsoft spy++ to determine which events are generated by certain user actions  and which windows they occur in. the information yielded by the inspection is used to create the event-to-action map. 
because users may acquire different sets of rights to content  the policy of the uicm is dynamic. upon each request for content  the drmc sets the control policy of the uicm. if  for example  the rights to a particular web page included  view:yes  print:no   the drmc would return the content to the protocol handler but would set the uicm's control policy such that if the user chose the  print...  command from the application's menu  a dialog box would pop up and inform the user that they had not acquire the  print  right. 
using the same method of window subclassing that we have described here  an intruder could attempt to disable our security model by re-subclassing the windows which we had already subclassed. this way  the intruding program could intercept the window messages before our uicm receives them. then the intruder could pass these messages to the original handler. in order to prevent this  we detect any such additional subclassing and terminate the application immediately. 
1. conclusions 
we have presented webguard  a system that provides digital rights management to off-the-shelf web browsers and browser plug-ins. webguard pioneers the concept of transparent drm  and we are currently developing techniques to extend transparency to general applications  beyond web browsers. 
