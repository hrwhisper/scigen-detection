　note that  while users have the ability to specify queries by entering formulae directly into a formula box  the intention is that most users will not use this feature  and indeed that it will usually be turned off.
　mashmaker also enables users to casually specify operations over collections of data by example. for instance  much like using a spreadsheet  a mashmaker user can query a collection of elements by first defining a query for an individual element and then copying this query to all elements in the collection. to do this  the user can browse into a node  define new computed nodes with the property that they are interested in for just that node  and then apply a  copy to all  action to copy the new property to all sibling nodes. as an example  if my data is a list of houses  i might browse into one house  use a  crime level  widget to compute a property node whose value is the crime level near that house  and then use the  copy to siblings  action to give all other houses a crime level property. i might then use the  sort  widget to create a new copy of the house list that is sorted by crime level.
　note that  since mashmaker data is live  the  copy to all  action does not just copy the selected property to the current siblings  but to all future siblings as well. if the data is updated to include additional sibling nodes  then the property is copied into them as well. the underlying model behind this is that every node contains a  normally  hidden #prototype property that contains properties that should be copied to new siblings.
1 collaborative exploration
　mashmaker allows users to collaboratively share and explore data and queries. users can share data  widgets  and widget suggestions - all using a simple social network dynamically maintained by mashmaker. if a user has created some data that they think might be of interest to their friends  they can then publish this to their friends  either as writable or read-only data. this allows users to create their own ad-hoc social-networking applications  making use of data published by friends to define data they publish themselves. similarly  users can share widgets they have created  and the set of mashmaker-suggested widgets dynamically adapts based on the widgets shared/used across a user's social network.
1. demonstration scenario
　the user is planning to rent a house  and wants to know which of the houses available has the most good restaurants nearby. first  the user goes to a housing website and clicks the  add to mashmaker  icon on their browser bookmark bar. mashmaker starts up and the list of houses on the website is displayed in the data tree  with one node for each house  and the properties of each house reflecting the information provided.
　the user selects one of the house nodes  and mashmaker automatically suggests that the user apply the  things nearby  widget to search for things nearby. the user clicks on this suggestion and is presented with a query box to allow them to configure the query. mashmaker has automatically filled in the address of the house as the location to search from and the user enters  food  as what they want to search for  and  food nearby  as the property name.
　seeing this list  the user decides that they would like to know how many restaurants there are within 1 miles with a rating of three stars or higher. the user clicks on the  filter  widget  which mashmaker automatically suggested  and uses the filter widget's custom interface to set up these criteria. they then use the  count  widget  to count how many restaurants meet this criteria  calling it  restaurant count . they then click  copy to all  to give all the other houses a  restaurant count  property  allowing the user to compare the houses.
　the user decides that this  restaurant count  property is useful  so they click the  make new widget  to save this property as a widget that they can again use in the future. mashmaker asks the user which of the values  restaurant count  depended on should be treated as arguments  and the user selects the house  and the kind of thing being searched for. the user types a description  uploads an icon  and publishes the new widget. now  the next time one of the user's friends looks at a house  this new widget will be suggested.
　the user goes on to create additional widgets that compute the number of the user's friends that live within a mile of each house  and the user's commute time to work for each house. the user then plots all the houses on a map  color coded according to how they rate on these scores.
