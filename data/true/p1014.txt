service models. when a consumer provides data to a service provider  he wants to ensure that it is used in a manner consistent with his policy. to verify if this will be the case  the consumer requests a model of the service  which captures the manner in which the service uses consumer data. the model captures how the information provided to the service can flow to various principals. for instance  the model of the air ticket booking service might be described as  origin/destination cities and credit card information are sent to jetblue  southwest and orbitz.  if the service does not use other services in turn  then there is only one principal involved  namely the service provider itself. if the provider uses other services  the providers of these services will also need to be represented in the model.
　a model can use wildcards for principal names  e.g.  the rental car reservation service may state that credit card information may be sent to unspecified principals. wildcards may be used either if the provider considers the principal information to be proprietary  or if there are far too many principals to list them all in a model.
　to facilitate privacy preservation in the context of composite services where data can flow from one service to another service in the composition code  each service model is also required to describe how the input information to the service can flow to the outputs of the service. constraints  such as exact dependence or quantitative dependence  can be defined on these flows to specify how much information contained in the inputs is flowed to the outputs. the composition code will make use of these flows and their associated constraints to propagate data labels from one service to another for policy compliance checks.
policy enforcement. when a consumer receives the model  she can check if the model is compatible with her policies. to do this  the consumer labels each of the data items that she is providing as input to the service and labels every principal mentioned in the service model.  in reality  labels will  in most cases  be generated automatically by a user application . in addition  she provides her privacy policy. to perform policy compliance check  the consumer's application uses the model to discover the labels on the data that will be sent to different principals mentioned in the model. then it checks if the consumer's policy allows data with these labels to be sent to those principals. if the check succeeds  the application forwards the request to the service provider. if the policy is violated  there are several possible solutions:
  relax privacy policy so that the service can be used. in this case  the user is told the manner in which the policy is being violated  e.g.  credit card information is being sent by service b to unspecified principals; or
  forward additional privacy obligations to providers  e.g.  specify to service b that it is authorized to share the credit card information only with hertz and avis; or
  look for an alternate service provider that satisfies user policies.
　the composition code is transformed to add code for data label tracking and privacy policy enforcement. the basic idea of the transformation is to introduce an auxiliary variable for each program variable  which holds the data labels of the program variable. these data label variables are maintained at runtime along with updates to program variables and are used for policy enforcement.
1. implementation context
　to illustrate the practicality and utility of our framework  we have built several demonstrative composite web services  e.g. an electronics comparison shopping service  a travel management service  in which the preserving of privacy is based on our framework.
　our implementation is based on personalized information agents  pias    which are intelligent agents that are capable of navigating web sites to access the capabilities provided by the web site without requiring explicit navigation actions by the user. they provide a programmatic interface to access these capabilities. thus  pias can be thought of as a  wrapper  that layers over web sites that are intended for use by humans  and in effect  turn them into web services. this factor enables us to proceed with the implementation without having to be constrained by the limited deployment of open web services.
