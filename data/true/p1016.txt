　we describe a simple approach to  point-in-time  file sharing based on time expiring web links and personal webservers. this approach to file sharing is useful in environments where instant messaging clients are varied and don't necessarily support  compatible  file transfer protocols. we discuss the features of such an approach along with a successfully deployed implementation now in wide use throughout the ibm corporation.
categories: h.1  office automation : groupware
general terms: human factors  security
keywords: instant messaging  file sharing  personal web server
1. introduction
　instant messaging  im  is already a fundamental communication mechanism both inside and outside the workplace. its use within the ibm corporate intranet is pervasive: even an experimental internal messaging client attracts over 1 users every month   and the officially supported corporate instant messaging client  ibm lotus instant messaging  is used by substantially more. instant messaging conversations regularly lead to the need for sharing content contained within files stored on the local file system. we call such sharing of file system content point-in-time file sharing  since the need to share the file is immediate and often unanticipated.
　a common solution for im-based point-in-time file sharing is to develop and include a proprietary transfer protocol within the im client itself. the resulting proliferation of proprietary and often unreliable protocols has created a situation where users who are perfectly able to chat with one another regularly find themselves unable to share files. rather than propose yet another proprietary file transfer method for addressing the point-in-time file sharing problem  we have developed and deployed a solution that exploits the ubiquity of the world-wide web. the advantage of this approach is full interoperability: it allows file sharing between disparate clients regardless of their  lack of  support for proprietary transfer protocols. with our solution  the file sender simply sends a special url to the receiver  which can be clicked by the receiver to invoke the transfer. almost every im client will launch the default browser in response to clicking on a link  allowing the browser to perform the download without requiring any special hooks. the approach naturally supports distributing files to multiple people participating in multi-user chats  and can leverage the proven security of existing web standards such as https for authentication and encryption.
　file sharing through personal or centralized web servers has been around since the advent of the web. the idea of using  out of band  file transfer methods such as http within an instant messaging framework is also well known  having even been formalized as part of the jabber instant messaging framework . but most users find the approach too cumbersome for use in the point-in-time context  as it involves  1  copying or uploading the file to the appropriate location   1  forming the appropriate url  1  sending the url to the recipient  and  1  removing the file from the web server once it 

copyright is held by the author/owner s .
www 1  may 1  1  chiba  japan. 1-1/1
sebastian thomschke
     ibm deutschland gmbh nahmitzer damm 1  1 berlin sebastian.thomschke de.ibm.com
is downloaded. the security conscious must in addition set appropriate access permissions to avoid having the file disclosed beyond the intended recipient. this burdens the recipient  who must obtain and remember login information  and provide it before retrieving the file. firewalls and network address translators  nats   which can render local webservers inaccessible  are another impediment that has prevented this approach from achieving any widespread use.
　our solution to the point-in-time file sharing problem involves simplifying  streamlining  and securing the cumbersome webserver-based approach as follows: 
  rather than require the user manually copy or upload the file and then manually formulate the url  our solution provides contextmenu support for immediately generating a special url that allows the file to be downloaded from its existing location.
  instead of requiring that users remove shared files once they have been downloaded and/or manually assign appropriate access permissions  the url generated by our implementation is tamper proof and time-expiring. the url itself therefore serves as the necessary authorization credentials  which expire after a brief period to minimize opportunities for misuse.
  we eliminate the firewall/nat issue and avoid any dependence on a large and expensive centralized infrastructure by leveraging the personal web server framework described in .
1. description
　this section illustrates how file-sharing is accomplished by endusers of our web-based point-in-time file sharing tool. the tool is implemented as a plugin  called securelink  for the youserv personal web-serving system   which runs on a variety of operating systems. the plugin has been available within the ibm intranet on an experimental basis for the last 1 months  during which it has been used by over 1 unique users to send over 1 files ranging in size from a few bytes to hundreds of megabytes. 
　only the file sender needs to install and run the youserv/ securelink software in order to share files. to share a file  the sender first locates the file using the host system's file system navigator  right-clicks the file  and selects  create a securelink   figure 1 . the result of this operation is a dialog indicating that the necessary information has been copied to the clipboard. the sender then pastes the clipboard contents into the im window and sends the message to the recipient  figure 1 . once the message is received  the receiver can simply click the link to retrieve the file. note that the im containing the link includes information such as the file's name and size  along with a description should the sender chooses to provide one. the message also indicates the expiration period after which the link becomes invalid. clicking the link launches the default browser to a welcome page that immediately pops up a save/open dialog for retrieving the file. the welcome page also provides help information in case the receiver has concerns about the process  and a link to restart the transfer in case the dialog is dismissed or the transfer fails. 
1　because each step of this file transfer process uses only standard operating-system provided features  this approach can be used with any im or chat client both on the sending and receiving sides. the only requirement is that the sender and receiver are capable of exchanging text messages.
　to further streamline the process  we have implemented some simple integration into the ibm community tools  ict  client  which is a popular alternative to the ibm corporate standard client. the im window provided by this client is depicted in figure 1. the  send file  button at the bottom of the window can be clicked to bring up a file-select dialog. the dialog provides a standard file system navigator and also supports drag and drop. once a file is selected by either of these methods  a url to the file is generated and sent to the receiver  bypassing the intermediate clipboard step required of the non-integrated approach. we note that this feature requires only the file sender to use an integrated client. the requirements of the receiver's client are as before. 

figure 1.  user designates the file to share with the file navigator and the securelink right-click menu item.

figure 1.  im partner receives a link that can be clicked to retrieve the file.
1. implementation
　securelink is implemented as a plugin for the youserv webhosting system. each youserv node is an http server with additional features that allow nodes to form a web serving  grid.  among other things  participating nodes can exploit peer-to-peer proxying and relaying in order to circumvent firewalls and nats. youserv plugins are delegated all http requests that are appropriately prefixed  http:// user's domain / plugin / securelink   allowing them to implement dynamic content as well as more interesting features by leveraging other aspects of the youserv infrastructure.
　the securelink plugin handles requests for issuing urls to specified files and requests to serve the specified files. the url issuing function of the plugin allows an appropriately authenticated user or application to generate a url to any file on the host system. each such url contains a 1des encrypted payload consisting of the file's path name f   the time the url expires t   and the value sha1 f t  where sha1     is the sha1 cryptographically secure hash function and  |  is the concatenation operator. before serving any content  the plugin  1  decrypts the url's payload   1  computes sha1 f t  where f and t are taken from the decrypted payload  and  1  compares the value computed by step 1 to the hash embedded within the payload. if the two hash values fail to match  the plugin will return an error page as it knows the payload has been tampered with or is otherwise corrupted. note that the only state the plugin must maintain is the 1des key used to generate and decrypt the url payload.
　if the youserv node run by the sender supports encrypted connections  as most do   the securelink plugin will issue an https url for downloading the specified file. an https encrypted transfer prevents the request as well as the transfer from being intercepted or replayed. if the im client itself uses an encrypted channel for message exchange  as is the case for most corporate im clients   there is no unencrypted information exchanged that could allow eavesdropping on or hijacking of the transfer. for youserv sites or im clients that do not support encrypted connections  it is possible for the url and/or transfer to be intercepted by eavesdroppers  but the eavesdroppers cannot use this information to retrieve other files on the server it does not already have access to.
　once the link is clicked by the receiver  the securelink plugin on the sender's machine receives the resulting request  decrypts and verifies integrity of the payload as described earlier  and serves the welcome page if the url is valid and unexpired. this welcome page includes a meta-refresh directive that redirects to another payload protected url in order to prompt the browser to display the save/open dialog via the http content-disposition header. the response body for this redirected request delivers the designated file if the request payload passes the integrity and expiration tests. a connection between two end users may be unreliable and will sometimes break  but most browsers will transparently resume broken transfers through appropriate specification of http range headers in subsequent requests. our implementation extends the expiration period of urls gradually based on the first byte offset of the range request in order to prevent expiration from blocking attempts at transfer resumption.
acknowledgements
　we are indebted to the ict development team for their assistance in developing and deploying an integrated file-transfer solution. we also thank hanspeter jochmann who originally suggested the concept of a right-click context menu for supporting file sharing via unmodified im clients. finally  we are grateful for the invaluable feedback we have received from the users of our system  and the ibm corporation for allowing intranet users access to our experimental tools.
