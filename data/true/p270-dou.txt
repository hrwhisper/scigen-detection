event-related potentials  erp  are brain electrophysiological patterns created by averaging electroencephalographic  eeg  data  time-locking to events of interest  e.g.  stimulus or response onset . in this paper  we propose a generic framework for mining and developing domain ontologies and apply it to mine brainwave  erp  ontologies. the concepts and relationships in erp ontologies can be mined according to the following steps: pattern decomposition  extraction of summary metrics for concept candidates  hierarchical clustering of patterns for classes and class taxonomies  and clustering-based classification and association rules mining for relationships  axioms  of concepts. we have applied this process to several dense-array  1-channel  erp datasets. results suggest good correspondence between mined concepts and rules  on the one hand  and patterns and rules that were independently formulated by domain experts  on the other. data mining results also suggest ways in which expert-defined rules might be refined to improve ontology representation and classification results. the next goal of our erp ontology mining framework is to address some long-standing challenges in conducting large-scale comparison and integration of results across erp paradigms and laboratories. in a more general context  this work illustrates the promise of an interdisciplinary research program  which combines data mining  neuroinformatics and ontology engineering to address real-world problems.
categories and subject descriptors
h.1  database applications : data mining; j.1  life and medical science : neuroscience; i.1  knowledge representation formalism and methods : ontology
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee.
kdd'1  august 1  1  san jose  california  usa. copyright 1 acm 1-1-1/1 ...$1.
dtucker egi.com
general terms
theory  design
keywords
ontology mining  clustering-based classification  temporal pca  erp  semantic web
1.	introduction
　research in cognitive and clinical neuroscience has given rise to a wealth of data over the past several decades. it is becoming increasingly clear that management and distribution of these data will require advanced tools for data representation  mining  and integration. in this paper  we propose a generic framework for mining and developing domain ontologies and apply it to mine brainwave  erp  ontologies. techniques are applied to several dense-array  1-channel  datasets acquired during studies of visual word comprehension. development of these erp ontologies will support future work on semantic mapping discovering  multi-modal data integration  and cross-laboratory data sharing.
1	eeg and erp data
　electroencephalography  eeg  is a widespread  noninvasive method for imaging brain activity. eeg data are acquired by placing sensors on the head to measure electrical signals that are generated in the cortex and conducted to the scalp surface. compared with other noninvasive imaging techniques  such as positron emission tomography  pet  and functional magnetic resonance imaging  fmri   eeg methods have two advantages: first  they provide a direct measure of neuronal activity  pet and fmri measure the hemodynamic response  which is closely linked with neuronal activity   and second  they have excellent temporal resolution - on the order of milliseconds  compared with 1 seconds or more for hemodynamic measures. given that most sensory-motor and cognitive processing takes place within a few hundred milliseconds  fine-grained representation of the time course of brain activity is extremely important. in addition  with the advent of dense-array methodologies  modern eeg methods are now characterized by high spatial  scalp topographic   as well as high temporal  dimensionality. with the application of tools for anatomical source localization  dense-array eeg can be used for noninvasive brain functional mapping  supporting a wide range of clinical and basic research applications.
　event-related potentials  erps  are derived by averaging across segments of eeg data  time-locking to events of interest  e.g.  onset of a visual or auditory stimulus . signals that are not event-related tend towards zero as the number of averaged trials increase. in this way  averaging increases the signal-to-noise ratio  snr  and provides measures of electrical activity that are specifically linked to stimulus processing  e.g.  figure 1 a  .
　at each time point  many parts of the brain may be simultaneously active  contributing overlapping  or  superposed   patterns to the measured signal. erp research aims to separate and classify these patterns  or  components   and to relate them to specific brain and cognitive functions. distinct patterns are characterized by their time course  e.g.  early or late   polarity  positive or negative   and scalp distribution  or topography. for example  as illustrated in figure 1  the  p1 component   which was extracted from the superposed data  a  using principal components analysis  has a peak latency of approximately 1ms  b  and is positive over occipital areas of the scalp  c .

figure 1:  a 1-channel eeg waveplot; positive voltage plotted up.  b  time course of p1 factor for same dataset  extracted using principal components analysis.  c  topography of p1 factor  negative on top and positive at bottom .
　although there is general agreement on how to characterize erp patterns or  components   in reality  such patterns can be difficult to identify  and definitions vary across research labs. furthermore  methods for erp data summary and analysis differ widely across research sites. this variability can make it hard to compare results across experiments and across laboratories  limiting the generalizability of research results and  therefore  the ability to generate high-level integration and interpretation of patterns.
1	domain ontologies and ontology mining
　to address these issues  we have proposed a new framework  called  neural electromagnetic ontologies   or nemo. the nemo project proposes to develop ontologies to support erp data representation and integration.
　in general  an ontology can be defined as the formal specification of a vocabulary of concepts and the relationships among them in a specific domain. in traditional knowledge engineering and in emerging semantic web research  ontologies play an important role in defining the semantics of data. the adoption of domain ontologies in biomedical research has enabled several major scientific advances   which are exemplified in projects such as the gene ontology   umls  and the national center of biomedical ontology . most biomedical ontologies are developed through a top-down or knowledge driven approach  i.e.  domain experts define the concepts and relationships based on their domain knowledge with the help of ontology engineers. currently there are no formal erp ontologies  and in fact there is little neuroinformatics research in this important area  although there are a variety of statistical techniques that are emerging for analysis of spatiotemporal patterns in eeg and erp research . the reason for this gap may be linked to the absence of robust methods for identification of erp patterns  concepts . perhaps the greatest challenge  at this stage of the ontology development  is to develop and test a framework for separating and classifying complex spatiotemporal patterns that are superposed in measured eeg. in this paper  we describe some general concepts  i.e.  patterns  and rules  i.e.  the high-level pattern representations  that have emerged from our prior work on neuroscience  and detail the methodology used to mine and develop initial erp ontologies which formally represent and store these concepts  their taxonomies and high-level representations  i.e.  rules .
　there are several popular ontology languages which are based on different logics  such as the web ontology language  owl   based on description logic  kif  based on first order logic and okbc   i.e.  the protocol used by protege-frames  based on frame-logic. in general  the vocabulary and relationships in an ontology can be roughly divided into several categories:
  class and class taxonomy: the basic structure of an ontology is a set of classes  types  arranged in a subclass hierarchy. each class corresponds to a specific set of entities. the class names  terms  and hierarchy  taxonomy  are assumed to refer in well-defined ways to concepts and provide the basic metadata for various domains.
  relationships among classes and data types: to represent the relationships between two classes  owl uses objectproperties  okbc uses slots and kif uses binary predicates. the relationships can also be between one class and one data type  e.g.  string and number . in that case  owl uses datatypeproperties  kif and okbc still use binary predicates or slots. if the relationships are n-ary  n 1  relations among different classes and data types. owl divides the n-ary relations into multiple objectproperties and datatypeproperties. kif uses n-ary predicates and okbc uses facets.
  arbitrary relationships or constraints among concepts: the relationships can be among different properties  slots  facets   or between classes and properties. the constraints can be cardinalities or other more complex forms which are related to classes or properties. in general  the arbitrary relationships or constraints can be presented as axioms  i.e.  logic rules  in ontology languages  and they can support reasoning about the concepts.
　the objective of ontology mining is to mine domain specific  i.e.  real world  data to acquire a vocabulary of concepts  to establish a concept taxonomy  and to discover the relationships among the concepts. in this paper  we will mainly use owl to describe the classes  properties and axioms to be mined  since owl has become the w1c standard web ontology language. we note that most concepts described in owl can also be represented in kif or okbc. the reminder of the paper is organized as follows. in section 1  we will first give a brief overview of related work on ontology mining and erp data analysis. in section 1  we describe our generic framework for ontology mining which includes a sophisticated combination of  hierarchical  clustering  classification and association rule mining. specifically  we apply our framework to mine an erp domain ontology. in section 1  we present results for erp ontology mining based on data collected from three eeg experiments on visual word comprehension. the input to our ontology mining framework are extracted from spatiotemporal erp data using temporal principal components analysis  pca . the mined erp ontology is conceptually transparent for domain experts  and in particular  the mined rules  axioms  correspond closely with the labeling classification rules that were independently defined by domain experts. in section 1  we discuss more robust data preprocessing  ontology mining  and future data integration directions for the nemo project. finally  in section 1  we draw some general conclusions about our contribution regarding state-ofthe-art techniques for erp ontology mining  representation  and integration.
1.	related work
　erp data consist of time series  representing temporal fluctuations in the eeg that are time-locked to events of interest  e.g.  word or picture stimuli . in dense-array eeg and erp research  these time series are measured across multiple locations on the scalp surface. a variety of tools are available for erp preprocessing and pattern analysis. for example  net station  is a suite of tools  which includes data cleaning  statistical extraction and visualization techniques. eeglab  is a matlab toolbox that provides advanced statistical methods for eeg/meg and erp processing  including independent component analysis  ica  and joint time-frequency analysis  tfa . apecs is a matlab toolbox that contains tools for data cleaning  ica and related techniques  and evaluation of data decomposition results . the dien pca toolbox  includes principal component analysis  pca  tools that are optimized for erp data decomposition.
　ontology mining is a process for learning an ontology  including classes  class taxonomy  properties and axioms. in the existing work  researchers mainly focus on mining the ontologies from text documents  e.g.  web content   or other web data  web usage  web structure and web user profiles  . in   clustering is used to discover the concepts in the ontology. association rule mining has been adopted to discover the relationships between different concepts . the netaffx gene ontology mining tool  is an interactive platform for visualizing and analyzing microarray data.
　in this paper  we propose a generic framework for developing and mining domain ontologies  with specific application to the development of a first-generation erp ontology. the target data type consists of spatiotemporal data  erps   and summary statistics  e.g.  the  latent  or principal components that emerge from statistical analysis of erp data . in addition to identifying classes  a hierarchy of classes and part-of relations of classes  our approach includes classification methods for mining properties and axioms  rules . this is also an important extension from our previous work   which focuses only on erp pattern mining. in this paper  we first use the previous erp pattern mining results  data from experiment 1  to develop erp classes. furthermore  we adopt hierarchical clustering methods to generate class taxonomies and association rules to discover the property relations respectively from a new dataset  experiment 1 .
1.	framework
　based on existing ontology mining approaches and our previous work for mining erp patterns   we summarize and propose the following four general procedures for mining the concepts and their relationships in domain ontologies:
1. classes   clustering-based classification: if there exists n clusters in existing domain dataset d based on some clustering algorithm  we first define n candidate classes for the domain and assign them arbitrary names  such as  c1    c1  for each class. after the data instances of each cluster are labeled by the assigned class name  each class  i.e.  each cluster  will be formally defined by classification rules. the arbitrary class names may be updated to more meaningful ones by domain experts based on their understanding of classification rules.
1. class taxonomy   hierarchical clustering: more granular classes and their taxonomy  hierarchy  will be determined by a hierarchial clustering algorithm. again  we can assign arbitrary names for each new class for the clustering-based classification process. domain experts may give more meaningful names for new classes based on classification rules.
1. properties   classification: the classification process for defining rules for classes will also be used to determine candidate properties between different classes or between classes and data types.
1. axioms   association mining and classification: the association rules between different properties will be used for defining the axioms  rules  between properties. and the classification rules will also be defined as the axioms  rules  among different classes and properties. the interaction of classification and association rule mining will be used for rule optimization  the detail will be discussed in section 1.1 .
　all of the above four procedures and their interactions are shown in figure 1 and the outputs  i.e.  classes  class hierarchy  properties  axioms  are put together into a domain ontology. it is a semi-automatic framework because we need  expert labeling  to give meaningful names for classes. the input data are put into some semi-structured formats  such as the spreadsheet  after data preprocessing. otherwise  some statistical or text processing step needs to be done as a part of data preprocessing.
　to further explain why our ontology mining framework based on the four general procedures makes sense  we first suppose there exists a domain ontology  i.e.  semantics of data  for a set of data instances in some specific domain  e.g.  erp . our goal is to find what classes  properties

figure 1: a semi-automatic framework for mining domain ontologies.
and axioms can be mined to compose that domain ontology. from a machine learning point of view  the domain ontology is the target function to be learned and it includes several components such as classes  class hierarchy  properties and axioms. a reasonable assumption is that the data instances which belong to the same class must be similar by sharing some properties  the data instances which belong to different classes must be dissimilar. therefore  determining what and how many classes should be included in an ontology is typically a clustering problem. it is a natural extension that finding the hierarchy of classes  clusters  is a hierarchial clustering problem. on the other hand  what properties and values the data instances in the same class should share is a typical classification problem. the selection of attributes for classification  e.g.  information gain selection  can be used for property selection in ontology mining. the classification rules can also be treated as the relationships  axioms  of properties and classes. the association rules between different properties can be treated as relationships  axioms  of two or multiple properties themselves  which will be a good complementary for the ontology.
　in summary  our generic framework includes data preprocessing  clustering  hierarchical clustering  clustering-based classification and association mining. the data input into four procedures are in some semi-structured format  e.g.  spreadsheet  after data preprocessing. the outputs  i.e.  classes  class hierarchy  properties  axioms  will be used to compose a domain ontology. we will elaborate the details of our framework with the description of experiments of mining erp ontologies in the following section 1.
1.	experiments on erp data
1	data preprocessing
　in this paper  we analyzed data collected in three studies of neural activity during visual word comprehension  experiment 1 - 1 . data were acquired using a 1-channel eeg sensor net . sampling rate was 1hz. the eeg were segmented into 1ms epochs  beginning 1ms before stimulus onset  total number of samples = 1 .
　the data from experiment 1 and experiment 1 comprise 1 subjects and 1 experimental conditions  number of observations = 1 . a description of the experiment paradigm  behavioral measures  scalp erps  and cortical  source  waveforms can be found in . for cross-validation of our pattern classification and labeling procedures  subjects were randomly assigned to one of two groups  resulting in 1 subjects per subgroup. subgroups were matched in proportion of males to females and in mean age and handedness. data from a new experiment   experiment 1  dataset consist of 1 subjects and 1 experiment conditions  number of observations = 1 .
1.1	temporal pca decomposition
　erp data represent a mixture of  signal   functional brain patterns  and  noise   extracerebral artifacts and brain activity that is not related to the events of interest . data decomposition methods can help separate signal from noise and disentangle overlapping patterns. a variety of statistical decomposition methods have been applied to erp data in the past few decades  such as independence component analysis  ica   wavelets and principal component analysis  pca . in this paper  principal component analysis  is used to decompose the erp data. pca belongs to a family of dimension reduction procedures. it projects the data into a new space of lower dimension.
　in the present study  we used temporal pca  as implemented in the dien pca toolbox . the dataset used as input to the pca is organized with the variables corresponding to time points. the number of variables is equal to the number of samples  number = 1 . the waveforms vary across subjects  channels  number = 1  and experimental conditions. pca extracts as many factors as there are variables. after rotation of extracted factors  a small subset of the factors are retained for further analysis. in this experiment  we retained the first 1 pca factors  accounting for most of the variance    1% . the remaining factors are assumed to contain  noise.  this assumption is verified by visual inspection of the time course and topographic projection of each factor.
1.1	summary metrics extraction
　for each pca factor  we extracted summary metrics representing spatial  temporal and functional dimensions of the erp patterns of interest. after preprocessing  the experiment 1 and experiment 1 datasets consist of vectors containing 1 spatial  temporal and functional attributes derived from the automated measure generation. thus  the data represent the individual pca factors of each subject and condition as points in a 1 dimensional attribute space. for the experiment 1 dataset  we increase the number of attributes to 1 by adding more intensity attributes  such as  pseudo-known   difference in mean intensity over region of interest at time of peak latency  nonwords-words  .
attributedescriptionin-minmin amplitudein-maxmax amplitudein-meanmean amplitude for a specified channel setroiregion of interestsp-corcross-correlation between factor fa  topography and topography of target patternsp-maxchannel with max weighting for factor fasp-max  roi channel grouping roi  to which the max channel belongssp-minchannel with min weighting for factor fasp-min roi channel grouping roi  to which the min channel belongsti-maxmax latency time of max amplitude eventevent type  stimon  respon  ekg-r  etc. stimstimulusmodmodality of stimulustable 1: intensity  spatial  temporal and functional met-
rics
table 1 lists some common attributes that are used for all the datasets. the datasets were put into spreadsheets and each column corresponds to an attribute. domain experts labeled 1 kinds of pattern factors for experiment 1 group 1 data  1 for experiment 1 group 1 data and 1 for experiment 1 data. for example  four spatiotemporal patterns relating to visual object processing are: the p1  an occipital positivity  peaking at 1ms   n1  an occipital negativity  peaking at 1ms   n1  a left temporal pattern  peaking at
1ms   and p1  a parietal positivity from 1 to 1ms .
1	mining erp classes with clustering
　traditionally  erp patterns are identified through visual inspection of grand-averaged erp data. however  the precise definition of a target pattern  its operationalization  and measurement across individual subjects  can vary considerably across research groups. in our framework  we use clustering to automatically separate erp patterns  as they are distributed across  latent   pca  factors. the factors extracted through pca are weighted across individual subjects and experiment conditions. summary metrics extracted from each observation  subject and condition  are then input into clustering tool. observations that belong to the same pattern are expected to map to the same cluster using this method. the larger aim is to develop an automatic pattern classification method  which can support robust erp pattern definitions.
1.1	expectation-maximization clustering
　the expectation-maximization  em  algorithm  is often used to approximate distributions using mixture models. it is an iterative procedure that circles around the expectation and maximization steps  i.e.  e-step and m-step . em clustering can assign each object to a cluster according to a weight representing the probability of membership. the goal is to  maximize  the likelihood of the distributions given the data. we also tried other classical clustering algorithms  such as k-means and k-medoids. it seems em works better than others  especially in the scenario that the number of clusters  e.g.  erp patterns  is indefinite.
cluster/pattern11p11n11laten1/n11table 1: em clustering results for experiment 1 group
1 pattern factors
cluster/pattern11p111n111laten1/n111p111table 1: em clustering results for experiment 1 group 1 pattern factors
　in the e-step for clustering  the algorithm calculates the posterior probability that a data instance  e.g.  a data tuple with 1 attributes in our erp experiment  belongs to a cluster. in the m-step  em algorithm searches for optimal parameters that maximize the sum of log-likelihood probabilities. em algorithm automatically selects the number of clusters by maximizing the logarithm of the likelihood of future data. the detailed implementation of em clustering can be found at . and we use em clustering algorithm in weka  in the experiments.
1.1	clustering results
　for each of the experimental datasets  we applied em clustering to the summary metrics described previously in table 1. in the current study  the data in each cluster were compared with the human labeling result  which are generated with the rules defined by domain experts  to determine the distribution of the pre-defined erp patterns amongst the clusters. the number of clusters was set equal to the number of patterns that were identified by domain experts. observations were then assigned to clusters using this semi-automatic approach. table 1  1 and 1 show the clustering results for experiment 1 group 1  experiment 1 group 1 and experiment 1 data. the resulting assignment of observations to clusters corresponded closely with the pattern labeling results based on expert judgments. compared with our generic framework shown in figure 1  domain experts actually did  expert labeling  for all data instances before the clustering step. however  we did not input the
c/p1111p11111n11111n11111laten1/n11111p1r1111mfn1111n11111p11111table 1: em clustering results for experiment 1 pattern factors.  c/p  means  cluster/patten. 
labels into the em clustering. instead  we only use them to compare with clustering result and replace arbitrary cluster  class  names by corresponding patter names. in more general cases  we believe that  expert labeling  can only happen with the help of discovered classification rules. the data instances with labels do not always exist before the clustering step. on the other hand  there was not a strict one-to-one mapping between clusters and labeled patterns. rather  the results showed some pattern  splitting   where observations belonging to a target pattern were assigned to more than one cluster. the proper diagnosis and interpretation of such results will require careful system evaluation to determine the source of this  misallocation of variance. 
　based on the clustering result  we can generate the following owl classes:
 rdf:rdf xmlns:time= http://www.isi.edu/~pan/damltime/time.owl#  xmlns:owl= http://www.w1.org/1/owl#  
 owl:class rdf:id= erppattern  
 rdfs:subclassof rdf:resource= time#temporalentity / 
 /owl:class 
 owl:class rdf:id= p1  
 rdfs:subclassof rdf:resource= #erppattern / 
 /owl:class 
 owl:class rdf:id= n1  
 rdfs:subclassof rdf:resource= #erppattern / 
 /owl:class 
 owl:class rdf:id= laten1/n1  
 rdfs:subclassof rdf:resource= erppattern / 
 /owl:class 
 owl:class rdf:id= p1  
 rdfs:subclassof rdf:resource= erppattern / 
 /owl:class  ...
1	mining erp class taxonomy with
hierarchical clustering
　the experiment 1 and experiment 1 only include 1 or 1 patterns  classes  and it is hard to show how to mine another important component  class taxonomy  for an erp ontology. to show that  we analyzed the experiment 1 data. according to prior erp research  we would expect to find about 1 patterns between 1 to 1ms after presentation of a visual word stimulus. these patterns include the p1  n1  laten1/n1  n1  mfn  n1  p1r  and p1. we expect the hierarchical clustering to discover these patterns automatically  and also to generate a taxonomy of these patterns.
1.1	methodology
　we have applied em clustering in a hierarchical way to discover the class taxonomy  using both divisive and agglomerative strategies. in the divisive approach  we first put all the data from 1 erp patterns  classes  into one cluster. our goals is to sub-divide this cluster into 1 clusters by setting up the number of clusters. then we repeatedly sub-divide each cluster until the majority of data instances from each pattern forms a cluster.
　in each step  the data instances of a particular pattern  class  labeled by domain experts may go to different clusters. we always keep the majority of data instances for each pattern in one cluster but take out those in other clusters. in agglomerative approach  we first put the data instances into 1 clusters to reflect expert hypotheses regarding the number of distinct patterns. then we try to merge them into 1 clusters by setting up the number of clusters. again  we only keep the majority data instances for each pattern. we continue to merge them into fewer clusters until all data instances can be put into one cluster  if possible.
1.1	clustering results
　for the eight patterns our neuroscientists want to discover from the data  both divisive and agglomerative clustering approaches result in the same hierarchy shown in figure 1.

figure 1: the hierarchy graph of 1 erp patterns  classes   where  p1  means p1   n1  means laten1/n1   n1  means n1   n1  means n1.
the hierarchy in figure 1 shows that the mfn and n1 patterns belong to the same cluster  class . likewise  the n1 and p1r patterns belong to the same cluster. these results suggest one of two possibilities. first  it is possible that patterns previously assigned distinct labels in the erp literature reflect one and the same underlying process. second  it is possible that these patterns are in fact distinct  but our analyses failed to separate them. in this second case  it will be important to refine human labeling steps to capture fine-grained distinctions between spatiotemporal patterns. finally  it will be critical to include data collected across a range of experiment paradigms  to provide a broader range of functional data that can be used for pattern analysis.
　the discovered hierarchy  class taxonomy  can be represented in owl and added into the erp ontology like:
 owl:class rdf:id= mfn/n1/p1/n1/n1/n1/p1r  
 rdfs:subclassof rdf:resource= #erppattern / 
 /owl:class 
 owl:class rdf:id= mfn/n1/p1  
 rdfs:subclassof rdf:resource= mfn/n1/p1/n1/n1/n1/p1r / 
 /owl:class 
 owl:class rdf:id= mfn/n1  
 rdfs:subclassof rdf:resource= mfn/n1/p1 / 
 /owl:class 
 owl:class rdf:id= p1  
 rdfs:subclassof rdf:resource= mfn/n1/p1 / 
 /owl:class  ...
1	mining properties and axioms  rules  with clustering-based classification
　the em clustering process can partition pattern factors into several clusters  i.e.  owl classes  in a hierarchical way  such that each cluster is mainly comprised of one or several categories of pattern factors. our next goal is to discover the axioms  rules   which specify the properties and their relationships with defined classes.
1.1	methodology
　after em clustering and hierarchical clustering  we use c1 classification algorithm  to build a decision tree to classify factors in each cluster. c1 is a standard decision learning algorithm which works well for continuous values. some erp attributes have continuous values. on the other hand  the classification rules derived from the decision tree are meaningful to human experts. the discovered rules will be used for defining the axioms in the erp ontology which specify the properties and their relationships with defined classes.
　considering the number of clusters needs to be referred to the labeling efforts of domain experts  the current process is semi-automatic for mining erp ontologies. once the data mining process becomes more robust  we will not need the data labeling effort from domain experts. but we will need domain experts to give meaningful names for classes based on the classification rules.
　we use j1 in weka  which is an implementation of the c1 algorithm  to classify the data. the input of the decision tree classifier is the pattern factor metrics vector and their arbitrary cluster names are used as classification labels. we built decision trees based on the clusters discovered from experiment 1 and experiment 1 data  and also the cluster hierarchy from experiment 1 data. we use information gain  as an attribute selection measure in building the decision tree. it always chooses the attribute that is most capable of differentiating different classes of data at each level of the tree. those selected attributes will be considered as properties in erp ontology.
1.1	classification results
　figure 1 shows the decision tree learner trained on experiment 1 group 1 data. it achieves a precision of 1% on the training data.
from figure 1  we can see that although 1 attributes are input to the learning process  only 1 of them are used in the final decision tree classifier. for instance  table 1 is a

figure 1: decision tree classifier.
attributeaverage-meritaverage rankingti-max11in-mean  roi 11in-mean  rocc 11sp-cor11.........table 1: information gain of summary metrics
table of information gain of attributes. in the rules provided by domain experts  only ti-max and in-mean  roi  are used. however  information gains of the attributes show that in-mean  rocc  is also important in the classification of patterns.
　therefore  we consider the top attributes in table 1 as the candidate properties. the information gain selection help us  including domain experts  to determine which properties should be in the erp ontology. for example  in owl  a subset of properties can be represented as
 owl:datatypeproperty rdf:id= in-mean roi  maxvalue  
 rdfs:domain rdf:resource= #erpfactor / 
 rdfs:range rdf:resource= xsd#float  / 
 /owl:datatypeproperty 
 owl:datatypeproperty rdf:id= in-mean roi  minvalue  
 rdfs:domain rdf:resource= #erpfactor / 
 rdfs:range rdf:resource= xsd#float  / 
 /owl:datatypeproperty 
 owl:datatypeproperty rdf:id= ti-max maxvalue  
 rdfs:domain rdf:resource= #erpfactor / 
 rdfs:range rdf:resource= xsd#integer  / 
 /owl:datatypeproperty 
 owl:datatypeproperty rdf:id= ti-max minvalue  
 rdfs:domain rdf:resource= #erpfactor / 
 rdfs:range rdf:resource= xsd#integer  / 
 /owl:datatypeproperty 
expert-defined ruledecision tree rule n  fan = n1 if n  fan （ cluster1 if1   ti   max  = 1ti   max   1…in   mean roi     1…|in   mean roi |   1…ev ent = stimon…sp   cor   1…modality = visual…in   max   1 n  fan = laten1/n1 if n  fan （ cluster1 if1   ti   max  = 1ti   max   1…in   mean roi     1…|in   mean roi |   1…ev ent = stimon
modality = visual…sp   cor  = 1…
table 1: expert-defined rules vs. decision tree generated rules from experiment 1 group 1 dataset
1.1	rule comparison with domain experts
　one advantage of using decision tree is that we can generate rules from decision tree and compare them with the ones that are defined by domain experts. it can help domain experts to determine  i.e.  expert labeling   the names of clusters if their names were arbitrarily assigned. table 1 compares the rules for n1 and laten1/n1 patterns  where cluster1 and cluster1 correspond to n1 and laten1/n1 respectively. from it  we can see that decision tree uses more attributes. the values for event and modality are the same for all the data in experiment 1 group 1. therefore event and modality are not selected by decision tree classifier. on the other hand  the attribute values of decision tree rules can not be exactly the same as domain expert rules  although they are basically consistent. we believe the attributes that are used in the decision tree and their values can be a good reference for domain experts to refine their rules.
1.1	rule representation in erp ontologies
　the classification rules derived from the decision tree will be used to determine what axioms in the ontology can describe the relationships between properties and classes. however  what will be a standard logic language for rules is still an open question in the semantic web research. swrl  can be a choice and it is a subset of first order logic. for example  the decision tree rule related to cluster1  corresponding to laten1/n1  in table 1 can be represented in swrl like:
 ruleml:imp 
 ruleml:body rdf:parsetype= collection  
 swrlx:classatom 
 owlx:class owlx:name= &erp;factor  / 
 ruleml:var f /ruleml:var 
 /swrlx:classatom 
 swrlx:datavaluedpropertyatom swrlx:property= ti-max minvalue  
 swrl:argument1 rdf:resource= #f  / 
 owlx:datavalue owlx:datatype= &xsd;int  
1 /owlx:datavalue 
 /swrlx:datavaluedpropertyatom 
 swrlx:datavaluedpropertyatom swrlx:property= in-mean roi  minvalue  
 swrl:argument1 rdf:resource= #f  / 
 owlx:datavalue owlx:datatype= &xsd;int  
                             1 /owlx:datavalue   /swrlx:datavaluedpropertyatom  ...
 /ruleml:body 
association ruletable 1: association rules from experiment 1 dataset
 ruleml:head rdf:parsetype= collection  
 swrl:individualpropertyatom 
 swrl:propertypredicate rdf:resource= #labeled as / 
 swrl:argument1 rdf:resource= #f  / 
 swrl:argument1 rdf:resource= #laten1/n1  / 
 /swrl:individualpropertyatom 
 /ruleml:head 
 /ruleml:imp 
　in this paper  to save the space  we may just use general first order logic axioms to represent the above swrl rule. it looks like:

1	discovering axioms among properties with association rules mining
　clustering and classification methods induce the axioms to distinguish different patterns  classes  using properties. relationships between properties themselves is also of interests of domain experts and can be put as axioms into the erp ontology. in this paper  we use association rule mining to discover the relationships between different properties.
1.1	methodology
　association rule mining aims at finding frequent patterns in certain data sets. in our case  association rule mining is used to seek the properties that frequently co-occur for the specific erp pattern factors. after decision tree classification  we quantify the values of each attribute by using their splitting point value in the tree. this converts the numeric values of each attribute to categorical values. then  we applied the well-used apriori algorithm  in weka  to find association rules of these attributes. table 1 lists a subset of the association rules we generated. we only selected those association rules with high confidence  i.e.   1%  and put them into the erp ontology.
　association rules should also be represented as logic  e.g.  swrl  axioms in the erp ontology. for example  the first and fourth association rules in table 1 can be represented in general first order axioms:

1.1	rule optimization
　as the number of erp patterns and attributes increases  the decision tree generated by classification step expands. the path from root node to the leaf node in a tree  which corresponds to one rule for a cluster  becomes longer. however  we can use association rules to trim the classification rules. an important inference rule  in logic is:
 a ★ b  …  b … a ★ c     a ★ c 
　it can be applied when the parameters  e.g.  a and b  in the condition of a classification rule  e.g.  b … a ★ c  are closely related to an association rule  e.g.  a ★ b or b ★ a . for instance  there is one rule for cluster1  which corresponds to n1 pattern  from the experiment 1 dataset:

we can use the fourth association rule in table 1 to optimize the above classification rule to:

we have built an ontology inference engine  ontoengine  which can be extended to implement this kind of optimization  transformation  for axioms . the inference process will continue until no rule can be trimmed anymore.
1.	discussion and future work
　in this paper  we have outlined a new framework for mining erp ontologies based on clustering  classification and association rule mining. our first-generation erp ontology consists of 1 classes  1 properties and 1 axioms. we show a partial view of this preliminary erp ontology in figure 1.

figure 1: a partial view of a mined erp ontology.
　figure 1 shows 1 classes  i.e.  factor and pattern taxonomy. patterns have temporal  spatial and functional attributes  some of which are listed in the graph  such as event  modality etc.  which are represented as properties of the  pattern  class in the erp ontology. ti-max  inmean roi  etc are properties of  factor  which have number values.  factor  relates to  pattern  by a  labeledas  property.
　as described here  this approach can be highly informative when applied to pca-based metrics generated from highdensity erp data. part of the ongoing work is focused on further refinements to our clustering process. for example  in the present set of experiments  some patterns  split  across  were assigned to  more than one cluster. inspection of temporal pca results suggested that refinements to the data decomposition process  as well as additional metrics that capture temporal and spatial attributes more accurately  may reduce this  misallocation  of pattern variance. to achieve accuracy in system evaluation  we will compare system results with a  gold standard   which will be established by expert labeling of early visual-evoked erp patterns  e.g.  p1v  n1v  and n1v .
　to show our ontology mining framework is generic and robust  we will apply a variety of data preprocessing techniques besides pca decomposition. it will also be interesting to try our ontology mining framework in a range of experimental paradigms  including auditory as well as visual stimulus processing  and nonlinguistic as well as languagerelated paradigms.
　another important aim of the nemo project is to store high-level pattern descriptions in an erp ontology database  which is automatically modeled based on the semantics of an erp ontology. the next phase of the nemo project will be focused on development of an ontology-based integration system which will facilitate the representation and dissemination of erp data across studies and labs. different labs will create their own erp ontologies and ontology databases. ontology-based integration in nemo will study semantic mapping rules between different erp ontologies. given the mapping rules  once the user query comes in  various erp ontology databases can be searched for answers to the query. we reported an efficient ontology-based data integration system  ontograte  in   which will be extended to support nemo. we will implement the data exchange and query answering components through the inference engine by reasoning with erp ontologies and mapping rules.
　in general  we expect that this ontology-based methodology can be extended for integrating other types of neuroscience data  e.g.  fmri data  and support other biomedical data sharing efforts  e.g.  the gene ontology .
1.	conclusion
　in this paper  we introduce a generic framework for mining domain ontologies and present some results of our work on development of a first-generation erp ontology. this work aims at exploring methods for differentiating different erp pattern factors and selecting important concepts and rules for ontology definition.
