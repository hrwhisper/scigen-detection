the resource discovery network  rdn  has developed tools that allow educational institutions and other organizations to access and display the output from its web services with their own branding and look-and-feel. this paper describes the need for such tools and the architectural approach to their development. a potential application of this approach to the incorporation of news feeds is also given.
keywords
resource discovery  subject gateways  content sharing  re-use  news feeds  rss  xml.
1. background
the resource discovery network  rdn   is a national service funded by jisc to provide access to high quality internet resources for the uk higher and further education communities. the rdn is a cooperative network of subject gateways  including sosig   social science  business and law   eevl   engineering  mathematics and computing  
biome   health  medicine and life sciences   humbul  humanities  and psigate   physical sciences .
individual gateways provide search and browse access to databases containing descriptions of high quality internet resources in their subject area as well as other communityspecific services. although each gateway presents its own webbased user-interface  they all work within a shared architectural framework that supports interoperability between the services  including the ability to cross-search all the rdn gateways. this results in increased functionality for the end-user and the institutions that make use of rdn services.
1. the institution's view
the subject gateways have proved popular with the end-user community  and with those institutions that understand the resource commitments required in order to maintain links to high quality resources . however  as web services play a greater role in their marketing  those institutions are beginning to show increasing concern over the branding of their web services and a reluctance to provide links to external services which may be perceived  albeit incorrectly  to be in competition with the services they provide. furthermore  for end-users there is some benefit in being able to access remote services  such as the rdn  in such a way that they retain the institutional look-and-feel with which they are accustomed.
1. the rdn-include solution
rdn-include  has been developed to enable institutions to provide access to the rdn cross-search and top-level browse interface  whilst maintaining an institutional look-and-feel and url. rdn-include allows the institution to embed an rdn search form and top-level browse hierarchy into appropriate points in their web site. search results are also returned with an institutional look-and-feel.
to make use of rdn-include the institution must install the rdn-include cgi script on one of their web servers. all enduser interaction is handled by this script  thus retaining an institutional url. if the script is not passed any search parameters  it reads a template file held locally. the template file is essentially a normal html or xhtml web page  formatted with a local look-and-feel. rdn content  the rdn search box and browse hierarchy  is added to this template dynamically at run time by including in it one or more xml 'rdni:tag' elements of the form:
 rdni:tag val= rdn* / 
where * represents a unique service identifier. these tags are defined in a tag definition file at the rdn. based on these tags  the rdn-include cgi script collects appropriate content from the rdn web server using http. in this way the rdn can update and/or create tags as new services are developed. any new tags immediately become available to rdn-include hosts  so the rdn can add new services without the need to update the rdn-include script installed on each institutional machine.

figure 1: rdn-include
if search parameters are passed to the rdn-include script  it passes these on to a cgi search script running on the rdn web server. this script cross-searches all the available rdn gateways  using the search protocols defined in the rdn interoperability and standards framework   and returns results as 'plain' html that can be embedded within the institutional template.
rdn-include has been implemented as both a perl cgi script and using asp.
this approach is:
simple - installating rdn-include only requires access to a web server that supports cgi perl or asp 
robust - failure of the rdn web server  or network problems  does not prevent the institutional content of the page being displayed 
flexible - control over the content of the page is shared between the institution and the rdn  scalable - the rdn can offer new functionality by developing new rdn-include 'rdni:tag' elements.
1. the rdni-lite solution
one problem with the approach provided by rdn-include is the need for the support of the web server administrator  since it requires the installation of a cgi perl or asp script. system administrators have legitimate concerns over the security of third-party scripts. in addition there may be local political barriers to the deployment of such scripts.
an alternative approach is to develop an rdn-include solution that can be deployed directly by html authors. rdni-lite provides this solution through the use of javascript.

figure 1: rdni-lite
to make use of rdni-lite  an html author simply has to embed a javascript  script  element into a normal html page. the 'src' attribute of the script element points to a cgi perl script running on the rdn web server. the cgi script generates a set of document.write   javascript statements that  when executed by the web browser  embed the appropriate rdn content into the web page. the cgi script takes several optional arguments that provide 'rdni:tag' parameters. the search form generated by the script calls a separate search cgi script hosted by the rdn that will  optionally  gather a template file from the local web server in order to format results with a particular look-and -feel.
this approach means that there is no need for the owner of the web page to have access privileges to install a cgi perl or asp script. however  it does require that javascript be enabled in the web browser.
1. application to news feeds
in a related set of activities  we have developed a web service called rss-xpress   which provides a suite of cgi tools for creating  updating  parsing and viewing rdf site summary  rss   files. rss is an xml application for sharing metadata about 'news' content in the form of rss channels. in many cases  adding support for remote rss channels to your web site involves installing and configuring a cgi rss viewer software that gathers one or more remote rss channels and displays them as html  typically embedded within other local content . we are currently working on a lightweight mechanism for embedding rss channels in html pages using the same techniques adopted for rdni-lite. by using a javascript  script  element that points to a remote cgi-based rss parser  html page authors will be able to embed 'news' content into their pages dynamically without needing to install perl scripts  php  asp or other local scripting technologies.
1. conclusions
our work on rdn-include has convinced us of the benefits of offering rdn content in a form that allows others to embedded it within local services. however  even the minimal technical requirements of rdn-include present a significant hurdle for some service providers. it is hoped that the development of lightweight solutions that can be used directly by html authors  such as rdni-lite  will overcome some of these problems and encourage the use of shared content.
