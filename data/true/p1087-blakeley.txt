the integration of the .net common language runtime  clr  into the sql server dbms enables rich business logic written in modern .net languages to run close to the data. database application developers can write business logic as functions  stored procedures  and triggers. they can also extend the native capabilities of the dbms by adding new scalar data types  and aggregates. a previous paper  described the architecture and design principles of the integration of the clr inside sql server. here we present new aspects of this work. first  we describe the extensibility contracts for user-defined types and aggregates in detail. second  we present the advances to the clr integration in sql server 1 which significantly enhances the breath of applications supported by sql server. in particular  we describe the support for large  greater than 1 byte  user-defined types and aggregates  multiple-input user-defined aggregates  and orderaware table valued functions. third  we show how we leveraged scalar type extensibility to provide a hierarchical identifier data type that enables encoding of keys describing hierarchies as well as built-in support for spatial applications. this support includes both flat- and round-earth spatial types  as well as a spatial index. fourth  we present how we use language integrated query  linq  enhancements in .net languages to improve developer productivity when creating routines that require data access. finally  we present preliminary performance results showing the efficiency of streaming tvfs and aggregates relative to equivalent native features. 
categories and subject descriptors: 
h.1  database management   d.1  programming languages  
general terms: algorithms  management  design  languages 
keywords: server programming  extensibility  abstract data types 
1. introduction 
the ability to run application code inside the database in a reliable  secure  scalable  and efficient manner adds significant flexibility to the design of applications that require complex business logic to run close to the data and cannot afford the cost of shipping data to a middle-tier process to perform computation outside the database. this is becoming more important as data volumes continue to explode from terabytes to petabytes and exabytes. 
a previous paper  described the architecture and design principles of the integration of the clr inside sql server and briefly mentioned some of the features enabled by this integration. this paper provides a detailed description of the extensibility contracts for functions  types  and aggregates. stored procedures  triggers  and functions usually need to execute sql queries and updates. in  we presented how data access was achieved via an in-process version of the ado.net api. this paper presents how the new linq query expressions are used to enhance programmers' productivity when creating routines that need data access.  
the rest of the paper is organized as follows. section 1 recaps some basic .net and clr integration concepts. section 1 presents the extensibility contracts for scalar and table functions. sections 1 and 1 describe user-defined types and user-defined aggregates and their extensibility contracts  including multi-input aggregates. these sections include preliminary performance results demonstrating the efficiency of user-defined aggregates and tvfs relative to equivalent features implemented natively by sql server. section 1 describes the in-proc data access strategy  including language integrated query  linq . section 1 describes support for hierarchical and spatial data added natively to sql server 1 using the extensibility framework described in the previous sections. section 1 describes the development experience for the extensibility features based on the visual studio tools suite. section 1 presents a summary of previous work and section 1 presents our conclusions and future work. 
1. basic concepts 
