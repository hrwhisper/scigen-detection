xqbe  xquery by example     a visual dialect of xquery  uses hierarchical structures to express transformations between xml documents. xslt  the standard transformation language for xml  is increasingly popular among programmers and web developers for separating the application and presentation layers of web applications. however  its syntax and its rule-based execution paradigm are rather intricate  and the number of xslt experts is limited; the availability of easier  dialects  could be extremely valuable and may contribute to the adoption of xml for developing datacentered web applications and services. with this motivation in mind  we adapted xqbe to serve as a visual interface for expressing xml-to-xml transformations and generate the xslt code that performs such transformations.
categories and subject descriptors
d.1  design tools and techniques : user interfaces; h.1  languages : data manipulation languages  dml   query languages; d.1  visual programming 
general terms
xml  visual query languages
keywords
semi-structured data  xquery  visual query languages
1. motivation and design issues
　the diffusion of xml in most applicative fields is accompanied by the increasing success of xslt for generating different views of the same web site  in order to allow its fruition to different users with different kinds of devices. this diffusion poses a pressing need for providing a wide spectrum of professionals with the capability to transform xml data  including those with limited computer programming skills  like many html designers . we describe here a user friendly interface  based on an intuitive visual paradigm  developed for this purpose aiming at both the unskilled users and the experienced ones  who may want to rapidly draft their transformations and refine them later on. the w1c  world wide web consortium  promotes two textual languages to express xml document transforma-
copyright is held by the author/owner.
www 1  may 1  1  chiba  japan. acm 1-1/1.
tions and to query xml data  xslt  and xquery  respectively. these languages  however  are far too complicated for occasional or unskilled users  who might need to specify document mappings or transformations only being aware of the basics of the xml data model and approximately familiar with the schema of the documents they have to manage. nevertheless  even this basic knowledge of the task should be enough to allow such users to express their queries and transformations with the core primitives of a simple manipulation language; otherwise  xml will never step up to the status of a universally and successfully adopted data representation format.
　xqbe  xquery by example   was initially designed with both the objectives of being intuitive  according to the aforementioned principles  and of being directly mappable to xquery  so as to work as a gui capable of running on top of any existing xquery engine. the xqbe prototype implementation has now been enriched with the capability of generating xslt stylesheets performing xmlto-xml transformations  including xml-to-html transformations  as html can be regarded as one particular xml language. we kept in special consideration the case of html: we defined and implemented some abbreviated constructs that allow to compactly introduce the typical components of html pages  such as lists  tables  etc.
1. xqbe and xslt
　query in figure 1 reads  build an html table with each book in a different row and with a column for the title and a column for the price . in xslt:
 xsl:template match= /  
 table   xsl:for-each select= bib/book  
 tr   td   xsl:value-of select= title /   /td 
 td   xsl:value-of select= price /   /td   /tr 
 /xsl:for-each   /table 
 /xsl:template 
the basic interpretation of a visual transformation is that the xml data matching the description on the left are transformed into the data described on the right. all transformations have a vertical line in the middle  that separates the source part  on the left  from the construct part  on the right ; both parts contain labelled graphs that represent xml fragments and express structural properties of such fragments and conditions upon values. tags are represented by rectangles  attributes and pcdata content by black and white circles respectively. the source part describes the xml data to be matched in order to construct the result  while the construct part specifies which parts are to be retained in the result and  optionally  which newly generated xml items are to be inserted  represented as trapezia .
1

figure 1: snapshot of the xqbe interface
the correspondences are expressed by explicit binding edges that connect the nodes of the source part to the nodes that will take their place in the output document.
　in figure 1 one table row is constructed for each book  according to the interpretation of the binding edge that connects the book in the source part to the tr in the construct part. in each row two tds are inserted  each one in turn containing an element projected from the matched books. table and td are trapezoids as they are new w.r.t. the data source  while title and price are dashed as they specify how to access data but are not included in the result.
1. implementation
　two snapshots of the tool at work are shown in figure 1. users draw queries in windows composed of two parts  corresponding to the source and construct parts. graphs are built choosing the graphical constructs from a toolbar on the left. the graphical constructs and the graphs themselves are internally represented as xml data. xqbe queries can also be saved and exported as xml data. once the users complete their queries they can compile them and execute the corresponding xquery or xslt statements. the tool assists the user during the editing process and provides syntactic feedback in several forms  to facilitate the drawing of correct queries. many incorrect configurations are prevented  on line  by not allowing to connect two nodes or to draw a component in a place where it makes no sense. the syntactic feedback is not limited to  topological  errors  but
figure 1: a shortcut for constructing html tables
makes default automatic and semi-automatic corrections to typical frequent errors  both during the editing process and at compile time. another interesting application of xqbe as a language for specifying mappings is that of porting the content of a message from one schema to another  which is often necessary whenever different web services have to cooperate exchanging xml data. this can be regarded as a case of special interest within the general problem of porting the content of a document from one schema to another. our xqbe visual editor allows to load xml schema specifications and accordingly construct the query graphs with few mouse clicks. users can load a dtd or xml schema definition for the target data  thus enabling the tool to suggest the possible subelements of each selected item by showing its first-level expansion.
1 macros for generating html documents
　xml-to-html transformations are so frequent that we defined a set of  macros  that allow to save time  and query space  when generating html code in the construct part. these macros allow to compactly denote with one node several recurrent html constructs such as headers  lists  links  images  tables  etc.  which are atomic concepts but require many tags and attributes to be specified. a plain xqbe transformation would force to fill the query graph with many trapezoidal nodes that are almost irrelevant to the semantics of the transformation  while the shortcuts allow to focus on the data-centric aspects of the xml-to-html mapping. these macros are expanded into regular xqbe nodes at compile time. figure 1 a  shows the most complex macro  the one for generating tables. the external binding associates the table to a node in the source part  to impose the cardinality of rows ; an arbitrary number of columns can be defined and filled by projecting the implicit context or importing new values by means of additional binding edges. figure 1 b  shows the equivalent in  plain  xqbe.
