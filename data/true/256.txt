yngvi bjornsson  markus enzenberger  robert holte  jonathan schaeffer and peter yap 
department of computing science  university of alberta  edmonton ab  canada t1g 1 
{yngvi  emarkus  holte  jonathan  petery} cs.ualberta.ca 

abstract 
pathfinding on a map is a fundamental problem in many applications  including robotics and computer games. typically a grid is superimposed over the map where each cell in the grid forms a unique state. a state-space-based search algorithm  such as a* or ida*  is then used for finding the optimal  shortest  path. in this paper we analyze the search behavior of both a* and ida* using different grid representations  providing various new insights via analytical and empirical results. 
1 introduction 
commercial games are a multi-billion-dollar industry and still growing. in the past better graphics have been one of the main driving forces of sales; however  this is no longer true and good graphics alone is not sufficient to fuel sales. instead consumers are increasingly looking for a more realistic gaming experience. for many type of games  especially real-time-strategy  rts  and role-playing games  rpg   realistic real-time pathfinding is one of the fundamental hurdles to overcome. in many state-of-the-art games a grid is typically superimposed over the map and an algorithm such as a* or ida* is used to find a path in the abstract grid space. 
　in this paper we compare four different grid topologies for abstraction: tiles  octiles  hexes  and texes. tiles are squares where movement is restricted to the four cardinal compass directions  n  e  s  w . octiles are also squares but allow additional diagonal moves  ne  se  sw  nw . a hex grid consists of hexagons with six degrees of movement. one problem with a hex grid is that it cannot be implemented as effectively as a square-based grid  an important consideration in computer games . thus we introduce texes  a square-based representation of a hexagonal grid. the four different grid structures are depicted in figure 1. 
1 analytical comparison 
in this section we analyse the search complexity of ida* for each of the different grid topologies discussed above. in our analysis we assume unit-cost edge weights  as is customary . 
　the asymptotic search complexity of a* on a grid is 1 d1  independent of grid representation  where d is the 

figure 1: different grid representations 
depth of the solution. on the other hand  the search complexity of ida* is  where b is the effective branching factor  in this analyses we exclude the effect of the heuristic estimate . the choice of a grid representation affects not only the branching factor b  but also the solution depth d. this poses the question: which grid representation is the most efficient  
　as for the branching factor  there is no need to explore again the cell that the search just departed from  thus the effective branching factor of ida* is at least one less than the number of adjacent cells. however  for hexes  texes and octiles we can further reduce the branching factor by observing that none of the neighbors shared with the previously visited cell need to he expanded. for example  in figure 1 the shaded cells need not be expanded at node curr given that it was last entered via node last. intuitively  because of unit-cost terrain  the cost of reaching these neighboring cells from curr is necessarily greater than if they were instead visited directly from last. the effective branching factor of hexes and texes is thus only 1  same as for tiles  whereas for octiles the asymptotic branching factor is 1  1 for horizontal/vertical moves and 1 for diagonal movcs  l . surprisingly  this observation has been overlooked in previous studies. 
　as for the search depth d  it can be mathematically shown that given the same distance from a start to a goal  if a tile grid searches to a depth d then a hex grid searches only to a depth 1d and an octile grid to a depth  the analytical result is summarized in table 1. 

poster papers 	1 table 1: summary of grids 	table 1: summary of a* experiments 

	grid 	adj. 	branch. 	average 	complexity 
	type 	nodes 	factor 	depth 	a* 	ida* 
hex 1 1 1 id tex 1 1 1id 1{d1  1.1d  octile 1 1 1id 1 d1  1.1d  tile 1 1 1d o 1d  
1 testing framework 
the above analytical study gives us a good idea of the merits of the different grid representations  at least when used with ida*. however  for a* it does not provide much insight. an empirical study of these algorithms is thus important  especially given that no comparison study exists on their behavior when pathfinding on a map. a problem with previous work is that different studies use disparate testing environments making individual results hard to compare. also  the  random  maps typically used are not necessarily representative of maps one would encounter in practice. 
　to address both of the above mentioned problems we developed a generic framework for testing state-space based search algorithms. this framework consists of three layers  allowing implementation of each layer independently of the others. the bottom layer abstracts away the details of the grid topology  the middle layer consists of a state-spacebased search algorithm  whereas the top layer provides facilities for automatic testing  collection of statistics  and tools for importing game maps. the plan is to make this software public to encourage more realistic and uniform test-beds for pathfinding research. 
　in this framework  we implemented both a* and ida* in the middle-layer  and tile-  octile-  and tex-representations of maps in the bottom layer  there is no need to include hex grids because tex grids have the same search properties while allowing a more efficient implementation . 
1 empirical comparison 
we used the aforementioned test environment to empirically evaluate a* and ida* using different grid structures. the following map categories were used: obstacle-free maps  j1   maps with randomly placed obstacles  1    and maps extracted from the popular computer game baldur's gate ii by bioware  b . for each category 1 maps were used  ranging in size from approximately 1 x 1 to 1 x 1. for each map 1 randomly chosen start/goal states were searched. 
the result of the a* experiment is summarized in table 
1. each entry shows the average number of nodes expanded over 1 searches  1 trials x 1 maps  as well as the standard error. the heuristic used for each grid representation is perfect given that no obstacles are present  e.g. manhattan distance for tiles . we can see that the exact graph representation does not make a big difference for a*. however  any improvement is beneficial because multiple units are typically traversing a game world simultaneously  each requiring a path be found in a matter of milliseconds. for example  we can state with a high statistical significance for all three map 

categories that octile grids expand fewer nodes on average than the alternative grid structures. 
　identical experiments were conducted for ida*. because of its exponential growth rate  normal ida* performed poorly on the larger maps  often unable to find a path even after expanding millions of nodes. instead we used a memoryenhanced variant of ida* for our evaluation  a simplified version of the transposition table enhancement described in  . the result is summarized in table 1. when comparing this result with the a* result we notice that ida* expands many more nodes on average  because it needs to revisit nodes on each iteration . however  despite expanding more nodes  the overall run-time for ida* was considerably less than a* s for both empty and random maps  less work per-node . also of interest is that tiles clearly work better than the other grid topologies when used in conjunction with enhanced ida*. the data also shows a big performance difference between random and game maps. on game maps ida* searches an order of magnitude more nodes than on random maps  resulting in a* being the preferred algorithm for these game maps  even when considering run-time . 

1 conclusions 
analytical results show that normal ida* performs best on tex  or hex  grid abstraction. unfortunately  normal ida* is impractical for larger maps  including realistic game maps. in practice  a* performs best on octile grids and memoryenhanced ida* on tile grids. this result is based on maps typical of computer games in terms of size and level of detail. for ida* and a* we use the fact that only a subset of neighboring nodes need to be visited  an often overlooked fact. the result also shows that one must be careful when carrying insights gained from random maps over to  realistic  maps. 
acknowledgments 
this research was supported by grants from nserc  icore  and iris. 
