recently  the web has been rapidly  deepened  by many searchable databases online  where data are hidden behind query forms. for modelling and integrating web databases  the very first challenge is to understand what a query interface says- or what query capabilities a source supports. such automatic extraction of interface semantics is challenging  as query forms are created autonomously. our approach builds on the observation that  across myriad sources  query forms seem to reveal some  concerted structure   by sharing common building blocks. toward this insight  we hypothesize the existence of a hidden syntax that guides the creation of query interfaces  albeit from different sources. this hypothesis effectively transforms query interfaces into a visual language with a non-prescribed grammar- and  thus  their semantic understanding a parsing problem. such a paradigm enables principled solutions for both declaratively representing common patterns  by a derived grammar  and systematically interpreting query forms  by a global parsing mechanism. to realize this paradigm  we must address the challenges of a hypothetical syntax- that it is to be derived  and that it is secondary to the input. at the heart of our form extractor  we thus develop a 1p grammar and a best-effort parser  which together realize a parsing mechanism for a hypothetical syntax. our experiments show the promise of this approach- it achieves above 1% accuracy for extracting query conditions across random sources.
1. introduction
　in the recent years  the web has been rapidly  deepened  by many searchable databases online. unlike the surface web providing link-based navigation  these  deep web  sources support query-based access- data are thus hidden behind their query interfaces. with the myriad databases online  at the order of 1  1  1   the deep web has clearly

 this material is based upon work partially supported by nsf grants iis-1 and iis-1. any opinions  findings  and conclusions or recommendations expressed in this publication are those of the author s  and do not necessarily reflect the views of the funding agencies.
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage  and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee.
sigmod 1 june 1  1  paris  france.
copyright 1 acm 1-1/1 . . . $1.
rendered large-scale integration a real necessity and a real challenge.
　guarding data behind them  such query interfaces are the  entrance  to the deep web. these interfaces  or html query forms  express query conditions for accessing objects from databases behind. each condition  in general  specifies an attribute  one or more supported operators  or modifiers   and a domain of allowed values. a condition is thus a threetuple  attribute; operators; domain   e.g.  cauthor =  author; { first name...    start...    exact name }; text  in interface qam  figure 1 a  . users can then use the condition to formulate a specific constraint  e.g.   author =  tom clancy   by selecting an operator  e.g.   exact name   and filling in a value  e.g.   tom clancy  .
　for modelling and integrating web databases  the very first step is to  understand  what a query interface says- i.e.  what query capabilities a source supports through its interface  in terms of specifiable conditions. for instance  amazon.com  figure 1 a   supports a set of five conditions  on author  title  ...  publisher . such query conditions establish the semantic model underlying the web query interface. this paper studies this  form understanding  problem: to extract such form semantics.
　automatic capability extraction is critical for large-scale integration. any mediation task generally relies on such source descriptions that characterize sources. such descriptions  largely constructed by hands today  have been identified as a major obstacle to scale up integration scenarios . for the massive and ever-changing sources on the web  automatic capability extraction is essential for many tasks:
e.g.  to model web databases by their interfaces  to classify or cluster query interfaces   to match query interfaces  or to build unified query interfaces.
　such form understanding essentially requires both grouping elements hierarchically and tagging their semantic roles: first  grouping associates semantically related html elements into one construct. for instance  cauthor in qam is a group of 1 elements: a text  author   a textbox  three radio buttons and their associated text's. such grouping is hierarchical with nested subgroups  e.g.  each radio button is first associated with the text to its right  before further grouping . second  tagging assigns the semantic roles to each element  e.g.  in cauthor   author  has the role of an attribute  and the textbox an input domain. 
　such extraction is challenging  since query forms are created autonomously. this task seems to be rather  heuristic  in nature: with no clear criteria but only a few fuzzy heuristics- as well as exceptions. first  grouping is hard  because a condition is generally n-ary  with various numbers of el-
composition parsing
　　　　figure 1: hidden-syntax hypothesis. ements nested in different ways.   heuristics : pair closest elements by spatial proximity.  exception : grouping is often not pairwise.  second  tagging is also hard- there is no semantic labelling in html forms.   heuristics : a text element closest to a textbox field is its attribute.  exception : such an element can instead be an operator of this or next field.  finally  with various form designs  their extraction can be inherently confusing - the infamous florida  butterfly  ballots in us election 1 indicates that ill-designed  forms  can be difficult  even for human voters  to simply associate candidates with their punch holes. this incident in fact generated discussions1 on web-form designs.
　our approach builds on the observation that  across myriad sources  query forms seem to reveal some  concerted structure : they appear to be  modularly  constructed upon a small set of building blocks. those condition patterns present query conditions in certain visual arrangement- figure 1 c  shows several examples. for instance  pattern 1 represents a common format for conditions of the form  attribute; {contains}; text   by arranging attribute to the left of a textbox. such conditions represent keyword search  by an implicit contains operator  on a textual attribute  e.g.  author .
　to capture this insight  we hypothesize the existence of a hidden syntax behind web query interfaces  across different sources. as figure 1 illustrates  we rationalize the phenomenon of concerted-structure by asserting query-form creation as guided by such a hypothetical syntax  which connects semantics to presentations. this hypothesis effectively transforms the problem into a new paradigm: we view query interfaces as a visual language  whose composition conforms to a hidden  i.e.  non-prescribed  grammar. their semantic understanding  as the inverse  is thus a parsing problem.
　this  language  paradigm enables principled solutions- to a problem that at first appears heuristic in nature- with the essential notions of a grammar and a parser:
  for pattern specification  the grammar provides a declarative mechanism. such patterns  e.g.  figure 1 c   are simply declared by productions  i.e.  grammar rules  that encode their visual characteristics.
  for pattern recognition  the parser provides a global mechanism for systematically constructing a parse tree as a coherent interpretation of the entire query interface. such a parse naturally groups elements  nested in subtrees  and tags their semantic roles  by grammar symbols   thus achieving form understanding.
　however  the hypothesis itself entails challenges in its realization: first  as the hidden syntax is hypothetical  we must derive a grammar in its place- what should such a derived grammar encode  for capturing this  hidden syntax   further  any derived grammar will be inherently incomplete
tokenizerhtml 
layout 
engineinput:output:
　html query capabilities query form
 author; {contains}; text 
 title; {contains}; text 
 price; { }; {1  1  1} 
figure 1: form extractor for web query interfaces.
 with uncaptured patterns  and ambiguous  with conflicting patterns . thus  a derived grammar is only secondary to any input - unlike traditional parsing  our parser cannot reject any input query form  even if not fully parsed  as  illegal.  to work with a hypothetical syntax  what should be the semantics and machinery for such a soft parser 
　for understanding web query interfaces  this paper presents our form extractor  which essentially realizes the hiddensyntax hypothesis. as figure 1 shows  given an html query form  the form extractor tokenizes the page  parses the tokens  and then merges potentially multiple parse trees  to finally generate the query capabilities. at its heart  we develop a 1p grammar and a best-effort parser  which together realize a non-traditional parsing mechanism for a hypothetical syntax. our experiments show the promise of this approach- it achieves above 1% accuracy for extracting query conditions across random sources. in summary  this paper makes the following contributions:
  hidden-syntax hypothesis: motivated by the concerted structure  our key hypothesis transforms the seemingly heuristic problem into a novel paradigm  section 1 .
  1p grammar: for capturing the hidden syntax  we develop a grammar mechanism that encodes not only patterns but also their precedence  section 1 .
  best-effort parser: coping with the derived grammar that is inherently ambiguous and incomplete  we develop a best-effort parsing algorithm  section 1 .
  experimental evaluation: we extensively evaluate the effectiveness of the framework  section 1 .
1. related work
　while understanding query interfaces automatically is an important problem for many applications  e.g.  integration of web databases   the efforts invested are very limited. in this section  we relate our work to others from three aspects: works with similar basis on structure regularity  works addressing the same problem of interface understanding  and works developing techniques in visual language parsing.

 1   1   1   1   a  query interface qam: amazon.com.  b  query interface qaa: aa.com.  c  examples of condition patterns. figure 1: query interfaces examples.　first  many works that address extracting the underlying structure of web pages rely on the regularities of such structures  among which wrapper induction  1  1  1  has been extensively studied. while those works deal with result pages as responses to a submitted query  our work focus on query interfaces - the entrance to the database. the work by crescenzi  and arasu  are closest to ours in that we both view web pages as generated from a grammar. however  in their settings  the existence of a grammar is not an assumption but reality  because the collection of web pages studied are homogeneously generated from the same background template. in our problem  the syntax is only hypothetical based on the observations of heterogeneous query interfaces. further  their works are essentially addressing a grammar derivation problem  while ours a parsing problem with the hypothesis of a hidden syntax.
　second  the problem of understanding query interfaces is mentioned  but not as focus  in several works  1  1  1 . quite a few works that rely on automatic form filling  1  1  1  either only deal with simple keyword query forms or make use of only selection lists for easy interaction. in particular  reference  proposed to use simple heuristics such as proximity and alignment to associate pairwise elements and texts in the forms  while we explore a parsing paradigm with a hidden syntax to derive a global interpretation for the input  which can generally capture not only complex compositions but also sophisticated features other than proximity or alignment.
　third  by abstracting query interfaces as a visual language  we are able to leverage the formalisms  1  1  1  and techniques  1  1  1  developed in visual languages  meanwhile still develop our own strategy to address specific challenges in our problem  as we will see in the following sections.
1. towards parsing paradigm
　this section develops our key insight of the hidden-syntax hypothesis and the approach it enables. we first report our motivating observations  section 1   which leads to the key hypothesis  section 1 . as the hypothesis brings forward  we must also address the challenges entailed by a hypothetical syntax  section 1 . overall  our solutions develop a language-parsing framework for building an automatic form extractor  which section 1 gives an overview.
1 observations: concerted structure
　as query interfaces are created autonomously  automatic extraction of form semantics is clearly challenging. is such  form understanding  even possible  as section 1 hinted  there seems to be some common  patterns  emerging from heterogeneous query forms. this impression suggests that web forms are not entirely chaotic  which  if so  would render automatic extraction unlikely . consider these patterns as the building blocks  or vocabulary  for constructing query forms. we ask: what is this vocabulary  how large is it 
　to answer these puzzles  we performed an informal survey: using search engines  e.g.  google.com  and web directories  e.g.  invisibleweb.com   we collected a total of 1 sources  which we call the basic dataset  with 1 in each of books  automobiles  and airfares domains.  many sources are familiar ones  e.g.  amazon.com and aa.com in figure 1.  we chose these domains as they are schematically dissimilar and semantically unrelated- and thus constitute a diverse  sample  of web sources.
　our survey found that the query interfaces reveal some concerted structure: there are only 1 condition patterns overall- which is surprisingly small as a vocabulary for online queries. figure 1 a  summarizes the occurrences of 1  more-than-once  patterns. the figure marks  x y  with a  +  if pattern y occurs in source x. as more sources are seen  along the x-axis   the growth  along y  of the vocabulary slows down and thus the curve flattens rapidly. further  we observe that the convergence generally spans across different domains  e.g.  automobiles and airfares are mostly reusing the patterns from books   which indicates that most condition patterns are quite generic and not domain specific. second  we observe that the distribution is extremely nonuniform: figure 1 b  ranks these 1 patterns according to their frequencies  for each domain and overall. we observe a characteristic zipf-distribution  which means that a small set of top-ranked patterns is very frequently used.
　as implications  first  the small and converging vocabulary  which occurs across autonomous sources and even across diverse domains  indicates that there are conventions  or  design patterns   emerging among web query forms. while each form is different  together they seem to share a relatively small set of vocabulary. second  the non-uniform distribution of patterns suggests that  to leverage such conventions  even if we can not exhaustively cover all patterns  a few frequent ones will likely pay off significantly.
1 hypothesis: hidden syntax
　the concerted-structure hints that form understanding can be promising  by leveraging presentation conventions. intuitively  given a query form  we may build our understanding of it by decomposing into some known patterns  each of which we have seen before- thus  we assemble an interpretation of an interface unseen before  by the patterns we know of. this  divide-and-conquer  approach seems promising  since we have observed a small vocabulary of such patterns shared across diverse query forms.
　while this approach is intuitively appealing  to realize it  what would be a principled computation paradigm  the task seems to be heuristic in nature- to use these layout patterns  as previous works also explored; section 1   it is tempting to  simply  code up each pattern as a rule-ofthumb  e.g.  the pairwise-proximity grouping heuristic  section 1 . to specify these patterns  such procedural description will involve convoluted code  lacking both generality and extensibility. further  to recognize these patterns  it is far from clear  beyond individual heuristics  how they together form a coherent interpretation of the query form.
1 1 1 1 1
sources1 1 1 1 1
condition patterns in ranked order a  vocabulary growth over sources. b  frequencies over ranks.figure 1: query vocabulary: condition patterns as building blocks for query interfaces.　toward our insight  we hypothesize the existence of a hidden syntax behind web query interfaces  across different sources. this hypothesis rationalizes the observed concerted structure. as figure 1 illustrates  we view queryform creation as guided by such a hypothetical syntax  which connects semantics  i.e.  query conditions  to presentations  i.e.  query forms . such a hidden syntax represents the presentation conventions across web forms. unlike traditional string languages  e.g.  programming languages   this syntax uses visual effects to express the embedded semantics  e.g.  pattern 1 in figure 1 c  arranges the attribute to be left-adjacent and bottom-aligned to the input field .
　this hypothesis brings forward a new paradigm: we now view query interfaces as a formal language  and in particular  a visual language  whose composition conforms to a hidden  i.e.  non-prescribed  grammar. their semantic understanding  as the inverse  is thus a parsing problem.
　this  language  paradigm further enables a principled algorithmic framework for form understanding- a task that appears inherently heuristic at first. by the hidden-syntax hypothesis  we can now resort to a formal framework for languages: the dual notions of a grammar and a parser together provide a systematic framework for both specifying and recognizing common patterns.
　for pattern specification  the grammar provides a declarative mechanism. such patterns  e.g.  figure 1 c   are simply declared by productions  i.e.  grammar rules  that encode their visual characteristics. the specification of patterns is thus declarative  fully separated from and independent of how they are recognized individually and assembled globally- by the parser. it is general: by incorporating arbitrary spatial relations  instead of  say  only proximity   we can describe complex visual patterns. by building productions upon productions  we can describe patterns of different  orders.  it is also extensible: we simply augment the grammar to add new patterns  leaving parsing untouched.
　for pattern recognition  the parser provides a global mechanism for systematically constructing a parse tree as a coherent interpretation of the entire query interface. such a parse naturally structures elements in nested subtrees  thus satisfying the grouping requirement  section 1 . further  it assigns grammatical alphabet symbols  terminals and nonterminals  to each construct  thus satisfying the tagging requirement. finally  we stress that  such parsing leverages not only individual patterns but also their coherent assembly into an entire query form  thus resolving local conflicts by a global context. parsing thus systematically realizes the intuitive  divide-and-conquer  approach.
1 challenges: hypothetical syntax
　as the hidden syntax is simply hypothetical  while it enables a new paradigm  we must address the challenges it entails: as this hypothetical nature implies  our grammar is non-prescribed: instead of being prescribed before query forms are created  it is simply derived from whatever conventions naturally emerging. further  our grammar is thus secondary to any language instance: instead of dictating form creation  it relies on the language's natural convergence to derive any convention. our challenges are thus two-folded:
　first  for capturing this hypothetical syntax  what should such a derived grammar encode  such a syntax represents  conventions  used for web form presentation. what types of conventions are necessary to enable parsing  while we want ideally to capture all patterns across many forms  unlike in a carefully-orchestrated grammar  these patterns may not be mutually  compatible.  we must thus rethink the right mechanism for such a derived grammar  to capture necessary conventions for enabling parsing.
　second  for working with a hypothetical syntax  what should be the semantics and machinery for a soft parser   a derived grammar will be inherently incomplete  with uncaptured patterns  and ambiguous  with conflicting patterns . thus  such a grammar is only secondary to any input: unlike traditional parsing  our parser cannot reject any input query form  even if not fully parsed  as  illegal.  that is  our parser is no longer a language  police  for checking and enforcing grammar rules. it must now be a  soft  parser that accepts any input. we must thus rethink the right semantics for such a soft parser  and further  its realization.
1 solutions: 1pgrammar & best-effortparser
　our solutions build upon the traditional language framework  dealing with the specific challenges outlined above. first  as a derived grammar for capturing the hypothetical syntax  the 1p grammar encodes not only  patterns  but also their  precedence.  second  as a soft-parser directed by a hypothetical syntax  when a single perfect parse does not exist  the best-effort parser resolves ambiguities as much as possible and constructs parse trees as large as possible.
