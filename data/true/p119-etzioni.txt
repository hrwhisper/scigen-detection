as product prices become increasingly available on the world wide web  consumers attempt to understand how corporations vary these prices over time. however  corporations change prices based on proprietary algorithms and hidden variables  e.g.  the number of unsold seats on a flight . is it possible to develop data mining techniques that will enable consumers to predict price changes under these conditions 
　this paper reports on a pilot study in the domain of airline ticket prices where we recorded over 1 price observations over a 1 day period. when trained on this data  hamlet - our multi-strategy data mining algorithm - generated a predictive model that saved 1 simulated passengers $1 by advising them when to buy and when to postpone ticket purchases. remarkably  a clairvoyant algorithm with complete knowledge of future prices could save at most $1 in our simulation  thus hamlet's savings were 1% of optimal. the algorithm's savings of $1 represents an average savings of 1% for the 1 passengers for whom savings are possible. overall  hamlet saved 1% of the ticket price averaged over the entire set of 1 simulated passengers. our pilot study suggests that mining of price data available over the web has the potential to save consumers substantial sums of money per annum.
categories and subject descriptors
i.1  artificial intelligence : learning
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  to republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee.
sigkdd '1  august 1  1  washington  dc  usa.
copyright 1 acm 1-1/1 ...$1.
keywords
price mining  internet  web mining  airline price prediction
1.	introduction and motivation
　corporations often use complex policies to vary product prices over time. the airline industry is one of the most sophisticated in its use of dynamic pricing strategies in an attempt to maximize its revenue. airlines have many fare classes for seats on the same flight  use different sales channels  e.g.  travel agents  priceline.com  consolidators   and frequently vary the price per seat over time based on a slew of factors including seasonality  availability of seats  competitive moves by other airlines  and more. the airlines are said to use proprietary software to compute ticket prices on any given day  but the algorithms used are jealously guarded trade secrets . hotels  rental car agencies  and other vendors with a  standing  inventory are increasingly using similar techniques.
　as product prices become increasingly available on the world wide web  consumers have the opportunity to become more sophisticated shoppers. they are able to comparison shop efficiently and to track prices over time; they can attempt to identify pricing patterns and rush or delay purchases based on anticipated price changes  e.g.   i'll wait to buy because they always have a big sale in the spring...  . in this paper we describe the use of data mining methods to help consumers with this task. we report on a pilot study in the domain of airfares where an automatically learned model  based on price information available on the web  was able to save consumers a substantial sum of money in simulation.
the paper addresses the following central questions:
  what is the behavior of airline ticket prices over time  do airfares change frequently  do they move in small increments or in large jumps  do they tend to go up or down over time  our pilot study enables us to begin to characterize the complex behavior of airfares.
  what data mining methods are able to detect patterns in price data  in this paper we consider reinforcement learning  rule learning  time series methods  and combinations of the above.
  can web price tracking coupled with data mining save consumers money in practice  vendors vary prices based on numerous variables whose values are not available on the web. for example  an airline may discount seats on a flight if the number of unsold seats  on a particular date  is high relative to the airline's model. however  consumers do not have access to the airline's model or to the number of available seats on the flights. thus  a priori  price changes could appear to be unpredictable to a consumer tracking prices over the web. in fact  we have found price changes to be surprisingly predictable in some cases.
　the remainder of this paper is organized as follows. section 1 describes our data collection mechanism and analyzes the basic characteristics of airline pricing in our data. section 1 considers related work in the areas of computational finance and time series analysis. section 1 introduces our data mining methods and describes how each method was tailored to our domain. we investigated rule learning   qlearning   moving average models   and the combination of these methods via stacked generalization . next  section 1 describes our simulation and the performance of each of the methods on our test data. the section also reports on a sensitivity analysis to assess the robustness of our results to changes in the simulation. we conclude with a discussion of future work and a summary of the paper's contributions.
1.	data collection
　we collected airfare data directly from a major travel web site. in order to extract the large amount of data required for our machine learning algorithms  we built a flight data collection agent that runs at a scheduled interval  extracts the pricing data  and stores the result in a database.
　we built our flight data collection agent using agentbuilder1 for wrapping web sites and theseus for executing the agent . agentbuilder exploits machine learning technology  that enables the system to automatically learn extraction rules that reliably convert information presented on web pages into xml. once the system has learned the extraction rules  agentbuilder compiles this into a theseus plan. theseus is a streaming dataflow execution system that supports highly optimized execution of a plan in a network environment. the system maximizes the parallelism across different operators and streams data between operations to support the efficient execution of plans with complex navigation paths and extraction from multiple pages.
　for the purpose of our pilot study  we restricted ourselves to collecting data on non-stop  round-trip flights for two routes: los angeles  lax  to boston  bos  and seattle  sea  to washington  dc  iad . our departure dates spanned january 1 with the return flight 1 days after departure. for each departure date  we began collecting pricing data 1 days in advance at three-hour intervals; data
for each departure date was collected 1 times a day.1 overall  we collected over 1 fare observations over a 1 day period for six different airlines including american  united  etc. we used three-hour intervals to limit the number of http requests to the web site. for each flight  we recorded the lowest fare available for an economy ticket. we also recorded when economy tickets were no longer available; we refer to such flights as sold out.
1	pricing behavior in our data
　we found that the price of tickets on a particular flight can change as often as seven times in a single day. we categorize price change into two types: dependent price changes and independent price changes. dependent changes occur when prices of similar flights  i.e. having the same origin and destination  from the same airline change at the same time. this type of change can happen as often as once or twice a day when airlines adjust their prices to maximize their overall revenue or  yield . independent changes occur when the price of a particular flight changes independently of similar flights from the same airline. we speculate that this type of change results from the change in the seat availability of the particular flight. table 1 shows the average number of changes per flight aggregated over all airlines for each route. overall  1 price changes occurred across all the flights in our data. 1% of the changes can be classified as dependent changes based on the behavior of other flights by the same airline.
routeavg. number of price changeslax-bos1sea-iad1table 1: average number of price changes per route.
　we found that the round-trip ticket price for flights can vary significantly over time. table 1 shows the minimum price  maximum price  and the maximum difference in prices that can occur for flights on each route.
routemin pricemax pricemax price changelax-bos11sea-iad11table 1: minimum price  maximum price  and maximum change in ticket price per route. all prices in this paper refer to the lowest economy airfare available for purchase.
　for many flights there are easily discernible price tiers where ticket prices fall into a relatively small price range. the number of tiers typically varies from two to four  depending on the airline and the particular flight. even flights from the same airline with the same schedule  but with different departure dates  can have different numbers of tiers. for example  there are two price tiers for the flight in figure 1  four price tiers in figure 1 and three price tiers in figure 1 and figure 1.

date
figure 1: price change over time for united airlines roundtrip flight#1 lax-bos departing on jan 1. this figure is an example of two price tiers and how consumers might benefit from the price drop.

date
figure 1: price change over time for american airlines roundtrip flight#1  lax-bos departing on jan 1. this figure shows an example of rapid price fluctuation in the days priori to the new year.
　price matching plays an important role in airline pricing structure. airlines use sophisticated software to track their competitors' pricing history and propose adjustments that optimize their overall revenue. to change the price  airlines

figure 1: price change over time for american airlines roundtrip flight#1  lax-bos departing on jan 1. this figure shows an example of three
price tiers and low price fluctuation

date
figure 1: price change over time for alaska airlines roundtrip flight#1  sea-iad departing on jan 1. this figure shows an example of four price tiers.
need to submit the change to the airline tariff publishing company atpco  1 the organization formed by leading airlines around the world that collects and distributes airline pricing data. the whole process of detecting competitors' fare changes  deciding whether or not to match competitors' prices  and submitting the price update at atpco can take up to one day .
　price changes appear to be fairly orderly on some flights  e.g.  figure 1   and we see evidence of the well-known 1 and 1 day  advance purchase  fares. however  we also see plenty of surprising price changes. for example  flights that depart around holidays appear to fluctuate more  e.g.  figure 1. figure 1 and figure 1 show how pricing strategies differ between two flights from american airlines that have the same schedule but fly on different dates. figure 1 shows a flight that departs around the new year  while figure 1 shows the flight that departs one week after the first flight. both flights have the tier structure that we described earlier in this section  but ticket prices in the first flight fluctuate more often.
　in terms of pricing strategy  we can divide the airlines into two categories. the first category covers airlines that are big players in the industry  such as united airlines  and american airlines. the second category covers smaller airlines that concentrate on selling low-price tickets  such as air trans and southwest. we have found that pricing policies tend to be similar for airlines that belong to the same category. fares for airlines in the first category are expensive and fluctuate often  while fares for airlines in the second category are moderate and appear relatively stable. however  there are some policies that every airline seems to use. for example  airlines usually increase ticket prices two weeks before departure dates and ticket prices are at a maximum on departure dates.
1.	related work
　previous work in the ai community on the problem of predicting product prices over time has been limited to the trading agent competition  tac  . in 1  tac focused on the travel domain. tac relies on a simulator of airline  hotel  and ticket prices and the competitors build agents to bid on these. the problem is different from ours since the competition works as an auction  similar to price-
line.com . whereas we gathered actual flight price data from the web  tac simulates flight prices using a stochastic process that follows a random walk with an increasingly upward bias. also  the tac auction of airline tickets assumes that the supply of airline tickets is unlimited. several tac competitors have explored a range of methods for price prediction including historical averaging  neural nets  and boosting. it is difficult to know how these methods would perform if reconfigured for our price mining task.
　there has been some recent interest in temporal data mining  see  for a survey . however  the problems studied under this heading are often quite different from our own  e.g.   . there has also been algorithmic work on time series methods within the data mining community  e.g.   . we discuss time series methods below.
　problems that are closely related to price prediction over time have been studied in statistics under the heading of  time series analysis   1  1  1  and in computational finance  1  1  1  under the heading of  optimal stopping problems . however  these techniques have not been used to predict price changes for consumer goods based on data available over the web. moreover  we combine these techniques with rule learning techniques to improve their performance.
　computational finance is concerned with predicting prices and making buying decisions in markets for stock  options  and commodities. prices in such markets are not determined by a hidden algorithm  as in the product pricing case  but rather by supply and demand as determined by the actions of a large number of buyers and sellers. thus  for example  stock prices tend to move in small incremental steps rather than in the large  tiered jumps observed in the airline data. nevertheless  there are well known problems in options trading that are related to ours. first  there is the early exercise of american calls on stocks that pay dividends. the second problem is the exercise of american puts on stocks that don't pay dividends. these problems are described in sections 1 and 1 respectively of . in both cases  there may be a time before the expiration of an option at which its exercise is optimal. reinforcement learning methods have been applied to both problems  and that is one reason we consider reinforcement learning for our problem.
　time series analysis is a large body of statistical techniques that apply to a sequence of values of a variable that varies over time due to some underlying process or structure  1  1  1 . the observations of product prices over time are naturally viewed as time series data. standard data mining techniques are  trained  on a set of data to produce a predictive model based on that data  which is then tested on a separate set of test data. in contrast  time series techniques would attempt to predict the value of a variable based on its own history. for example  our moving average model attempts to predict the future changes in the price of a ticket on a flight from that flight's own price history.
　there is also significant interest in bidding and pricing strategies for online auctions. for example  in  harshit et al. use cluster analysis techniques to categorize the bidding strategies being used by the bidders. and in   luckingreiley et al. explore the various factors that determine the final price paid in an online auction  such as the length of the auction  whether there is a reserve price  and the reputation of the seller. however  these techniques are not readily applicable to our price mining problem.
　comparison shopping  bots  gather price data available on the web for a wide range of products.1 these are descendants of the shopbot  which automatically learned to extract product and price information from online merchants' web sites. none of these services attempts to analyze and predict the behavior of product prices over time. thus  the data mining methods in this paper complement the body of work on shopbots.
1.	data mining methods
　in this section we explain how we generated training data  and then describe the various data mining methods we investigated: ripper   q-learning   and time series  1  1 . we then explain how our data mining algorithm  hamlet  combines the results of these methods using a variant of stacked generalization  1  1 .
　our data consists of price observations recorded every 1 hours over a 1 day period. our goal is to learn whether to buy a ticket or wait at a particular time point  for a particular flight  given the price history that we have recorded. all of our experiments enforce the following essential temporal constraint: all the information used to make a decision at particular time point was recorded before that time point. in this way  we ensure that we rely on the past to predict the future  but not vice versa.
1	rule learning
　our first step was to run the popular ripper rule learning system  on our training data. ripper is an efficient separate and conquer rule learner. we represented each price observation to ripper as a vector of the following features:
  flight number.
  number of hours until departure  denoted as hoursbefore-takeoff .
  current price.
  airline.
  route  lax-bos or sea-iad .
the class labels on each training instance were 'buy' or
'wait'.
　we considered a host of additional features derived from the data  but they did not improve ripper's performance. we did not represent key variables like the number of unsold seats on a flight  whether an airline is running a promotion  or seasonal variables because hamlet did not have access to this information. however  see section 1 for a discussion of how hamlet might be able to obtain this information in the future.
　some sample rules generated by ripper are shown in figure 1.
　in our domain  classification accuracy is not the best metric to optimize because the cost of misclassified examples is highly variable. for example  misclassifying a single example can cost from nothing to upwards of $1. metacost  is a well-known general method for training costsensitive classifiers. in our domain  metacost will make a learned classifier either more conservative or more aggressive about waiting for a better price  depending on the cost if hours-before-takeoff  = 1 and price  = 1
and route = lax-bos then wait
if airline = united and price  = 1
and hours-before-takeoff  = 1 then wait
figure 1: sample ripper rules.
of misclassifying a 'buy' as a 'wait' compared with the cost of misclassifying a 'wait' as a 'buy'. we implemented metacost with mixed results.
　we found that metacost improves ripper's performance by 1 percent  but that metacost hurts hamlet's overall performance by 1 percent. as a result  we did not use metacost in hamlet.
1	q-learning
　as our next step we considered q-learning  a species of reinforcement learning . reinforcement learning seems like a natural fit because after making each new price observation hamlet has to decide whether to buy or to wait. yet the reward  or penalty  associated with the decision is only determined later  when hamlet determines whether it saved or lost money through its buying policy. reinforcement learning is also a popular technique in computational finance  1  1  1 .
the standard q-learning formula is:
q a s  = r s a  + γmaxa1 q a1 s1  
here  r s a  is the immediate reward  γ is the discount factor for future rewards  and s1 is the state resulting from taking action a in state s. we use the notion of state to model the state of the world after each price observation  represented by the price  flight number  departure date  and number of hours prior to takeoff . thus  there are two possible actions in each state: b for 'buy' and w for 'wait'.
　of course  the particular reward function used is critical to the success  or failure  of q-learning. in our study  the reward associated with b is the negative of the ticket price at that state  and the state resulting from b is a terminal state so there is no future reward. the immediate reward associated with w is zero as long as economy tickets on the flight do not sell out in the next time step. we set γ = 1  so we do not discount future rewards.
　to discourage the algorithm from learning a model that waits until flights sell out  we introduce a  penalty  for such flights in the reward function. specifically  in the case where the flight does sell out at the next time point  we make the immediate reward for waiting a negative constant whose absolute value is substantially greater than the price for any flight. we set the reward for reaching a sold-out state to be  1. this setting can best be explained below  after we introduce a notion of equivalence classes among states. in short  we define the q function by
flight sells out after s.
	 w s 	=	1
	max q b s   q w s   	otherwise.
　to generalize from the training data we used a variant of the averaging step described in . more specifically  we defined an equivalence class over states  which enabled the algorithm to train on a limited set of observations of the class and then use the learned model to generate predictions for other states in the class.
　to define our equivalence class we need to introduce some notation. airlines typically use the same flight number  e.g.  ua 1  to refer to multiple flights with the same route that depart at the same time on different dates. thus  united flight 1 departs once daily from lax to boston at 1pm. we refer to a particular flight by a combination of its flight number and date. for example  ua1-jan1 refers to flight 1 which departs on january 1th  1. since we observe the price of each flight eight times in every 1 hour period  there are many price observations for each flight. we distinguish among them by recording the time  number of hours  until the flight departs. thus  ua1-jan1 is the price observation for flight ua1  departing on january 1  which was recorded on january 1nd  1 hours before the flight departs on the 1th . our equivalence class is the set of states with the same flight number and the same hours before takeoff  but different departure dates. thus  the states denoted ua1-jan1 and ua1-jan1 are in the same equivalence class  but the state ua1-jan1 is not. we denote that s and s  are in the same equivalence class by s ゛ s .
thus  our revised q-learning formula is:
q a s  = avgs ゛s r s  a  + maxa1 q a1 s1   
　the reason for choosing -1 is now more apparent: the large penalty can tilt the average toward a low value  even when many q values are being averaged together. suppose  for example  that there are ten training examples in the same equivalence class  and each has a current price of $1. suppose now that in nine of the ten examples the price drops to $1 at some point in the future  but the flight in the tenth example sells out in the next state. the q value for waiting in any state in this equivalence class will be   1 1 1 /1 =  1  or still much less then the q value for any equivalence class where no flight sells out in the next state. thus the choice of reward for a flight that sells out will determine how willing the q-learning algorithm will be to risk waiting when there's a chance a flight may sell out. using a hill climbing search in the space of penalties  we found -1 to be locally optimal.
　q-learning can be very slow  but we were able to exploit the structure of the problem and the close relationship between dynamic programming and reinforcement learning  see   to complete the learning in one pass over the training set. specifically  the reinforcement learning problem we face has a particularly nice structure  in which the value of q b s  depends only on the price in state s  and the value of q w s  depends only on the q values of exactly one other state: the state containing the same flight number and departure date but with three hours less time left until departure. applying dynamic programming is thus straightforward  and the initial training step requires only a single pass over the data. in order to compute averages over states in the same equivalence class  we keep a running total and a count of the q values in each equivalence class. thus  the reinforcement learning algorithm just makes a single pass over the training data  which bodes well for scaling the algorithm to much larger data sets.
　the output of q-learning is the learned policy  which determines whether to buy or wait in unseen states by mapping them to the appropriate equivalence class and choosing the action with the lowest learned cost.
1	time series
　time series analysis is a large and diverse subfield of statistics whose goal is to detect and predict trends. in this paper  we investigated a first order moving average model. at time step t  the model predicts the price one step into the future  pt+1  based on a weighted average of prices already seen. thus  whereas q-learning and ripper attempt to generalize from the behavior of a set of flights in the training data to the behavior of future flights  the moving average model attempts to predict the price behavior of a flight in the test data based on its own history.
　at time t  we predict the next price using a fixed window of price observations  pt k+1 ... pt.  in hamlet  we found that setting k to one week's worth of price observations was locally optimal.  we take a weighted average of these prices  weighting the more recent prices more and more heavily. formally  we predict that pt+1 will be

where α i  is some increasing function of i. we experimented with different α functions and chose a simple linearly increasing function.
　given the time series prediction  hamlet relies on the following simple decision rule: if the model predicts that pt+1   pt  then buy  otherwise wait. thus  our time series model makes its decisions based on a one-step prediction of the ticket price change. the decision rule ignores the magnitude of the difference between pt+1 and pt  which is overly simplistic  and indeed the time series prediction does not do very well on its own  see table 1 . however  hamlet uses the time series predictions extensively in its rules. in effect  the time series prediction provides information about how the current price compares to a local average  and that turns out to be valuable information for hamlet.
1	stacked generalization
　ensemble-based learning techniques such as bagging   boosting   and stacking  1  1   which combine the results of multiple generalizers  have been shown to improve generalizer accuracy on many data sets. in our study  we investigated multiple data mining methods with very different characteristics  ripper  q-learning  and time series  so it makes sense to combine their outputs.
　we preferred stacking to voting algorithms such as weighted majority  or bagging  because we believed that there were identifiable conditions under which one method's model would be more successful than another. see  for example  the sample rule in figure 1.
　standard stacking methods separate the original vector representation of training examples  level-1 data in wolpert's terminology   and use the class labels from each level-1 generalizer  along with the example's true classification as input to a meta-level  or level-1  generalizer. to avoid over-fitting   care is taken to ensure that the models are formed from a batch of training data that does not include the instance in question  .
　in our implementation of stacking  we collapsed level-1 and level-1 features. specifically  we used the feature representation described in section 1 but added three additional features corresponding to the class labels  buy or wait  comlet ts be the output of the time series algorithm  and let ql be the output of q-learning.
if hours-before-takeoff  = 1 and airline = united
and price  = 1 and ts = buy and ql = wait then wait
figure 1: a sample rule generated by hamlet.
puted for each training example by our level-1 generalizers. to add our three level-1 features to the data  we applied the model produced by each base-level generalizer  ripper  q-learning  and time series  to each instance in the training data and labeled it with 'buy' or 'wait'. thus  we added features of the form ts = buy  time series says to buy  and ql = wait  q-learning says to wait .
　we then used ripper as our level-1 generalizer  running it over this augmented training data. we omitted leaveone-out cross validation because of the temporal nature of our data. although a form of cross validation is possible on temporal data  it was not necessary because each of our base learners did not appear to overfit the training data.
　our stacked generalizer was our most successful data mining method as shown in table 1 and we refer to it as hamlet.
1	hand-crafted rule
　after we studied the data in depth and consulted with travel agents  we were able to come up with a fairly simple policy  by hand . we describe it below  and include it in our results as a baseline for comparison with the more complex models produced by our data mining algorithms.
　the intuition underlying the hand-crafted rules is as follows. first  to avoid sell outs we do not want to wait too long. by inspection of the data  we decided to buy if the price has not dropped within 1 days of the departure date. we can compute an expectation for the lowest price of the flight in the future based on similar flights in the training data.1 if the current price is higher than the expected minimum then it is best to wait. otherwise  we buy.
　more formally  let minprice s t  of a flight in the training set denote the minimum price of that flight over the interval starting from s days before departure up until time t  or until the flight sells out . let expprice s t  for a particular flight number denote the average over all minprice s t  for flights in the training set with that flight number. suppose a passenger asks at time t1 to buy a ticket that leaves in s1 days  and whose current price is curprice. the hand-crafted rule is shown in figure 1.
if expprice s1 t1    curprice
and s1   1 days then wait
else buy
figure 1: hand-crafted rule for deciding whether to wait or buy.
　we also considered simpler decision rules of the form  if the current time is less than k days before the flight's departure then buy.  in our simulation  described below  we
tested such rules for k ranging from 1 to 1  but none of these rules resulted in savings and some resulted in substantial losses.
1.	experimental results
　in this section we describe the simulation we used to assess the savings due to each of the data mining methods described earlier. we then compare the methods in table 1  perform a sensitivity analysis of the comparison along several dimensions  and consider the implications of our pilot study.
1	ticket purchasing simulation
　the most natural way to assess the quality of the predictive models generated by the data mining methods described in section 1 is to quantify the savings that each model would generate for a population of passengers. for us  a passenger is a person wanting to buy a ticket on a particular flight at a particular date and time. it is easy to imagine that an online travel agent such as expedia or travelocity could offer discounted fares to passengers on its web site  and use hamlet to appropriately time ticket purchases behind the scenes. for example  if hamlet anticipates that a fare will drop by $1  the agent could offer a $1 discount and keep $1 as compensation and to offset losses due prediction errors by hamlet.
　since hamlet is not yet ready for use by real passengers  we simulated passengers by generating a uniform distribution of passengers wanting to purchase tickets on various flights as a function of time. specifically  the simulation generated one passenger for each fare observation in our set of test data. the total number of passengers was 1. thus  each simulated passenger has a particular flight for which they need to buy a ticket and an earliest time point at which they could purchase that ticket  called the  earliest purchase point  . the earliest purchase points  for different simulated passengers  varied from 1 days before the flight to the day of the flight.
　at each subsequent time point  hamlet decides whether to buy a ticket immediately or to wait. this process continues until either the passenger buys a ticket or economy seats on the flight sell out  in which case hamlet will buy a higher priced business-class ticket for the flight.1 we defined upgrade costs as the difference between the cost of a business class ticket and the cost of an economy ticket at the earliest purchase point. in our simulation  hamlet was forced to  upgrade  passengers to business class only 1% of the time  but the total cost of these upgrades was quite high  $1 in table 1 .1
　we recorded for each simulated passenger  and for each predictive model considered  the price of the ticket purchased and the optimal price for that passenger given their earliest time point and the subsequent price behavior for that flight. the savings  or loss  that a predictive model yields for a simulated passenger is the difference between the price of a ticket at the earliest purchase point and the price
of the ticket at the point when the predictive model recommends buying. net savings is savings net of both losses and upgrade costs.
1	savings
　table 1 shows the savings  losses  upgrade costs  and net savings achieved in our simulation by each predictive model we generated. we also report on the frequency of upgrades as a percentage of the total passenger population  the net savings as a percent of the total ticket price  and the performance of each model as a percent of the maximal possible savings.
the models we used are the following:
  optimal: this model represents the maximal possible savings  which are computed by a  clairvoyant  algorithm with perfect information about future prices  and which obtained the best possible purchase price for each passenger.
  by hand: this model was hand-crafted by one of the authors after consulting with travel agents and throughly analyzing our training data  see figure 1 .
  time series: this model was generated by the moving average method described earlier.
  ripper: this model was generated by ripper.
  q-learning: this model was generated by our qlearning method.
  hamlet: this model was generated by our stacking generalizer which combined the results of ripper  qlearning  and time series.
　table 1 shows a comparison of the different methods. note that the savings measure we focus on is savings net of losses and upgrade costs. we see that hamlet outperformed each of the learning methods as well as the hand-crafted model to achieve a net savings of $1. furthermore  despite the fact that hamlet had access to a very limited price history and no information about the number of unsold seats on the flight  its net savings were a remarkable 1% of optimal. finally  while an average net savings of 1% may not seem like much  passengers spend billions of dollars on air travel each year so 1% amounts to a substantial number of dollars.
　we believe that our simulation understates the savings that hamlet would achieve in practice. for close to 1% of the passengers in our test set  savings were not possible because prices never dropped from the earliest purchase point until the flight departed. we report the percent savings in ticket prices over the set of flights where savings was possible   feasible flights   in table 1. these savings figures are of interest because of the unrealistic distribution of passengers in our simulation. because we only gathered data for 1 days before each flight in our test set  passengers  arrived  at most 1 days before a flight. furthermore  due to the uniform distribution of passengers  1% of the passengers arrived at most 1 days before the flight's departure  when savings are hard to come by. in fact  on our test data  hamlet lost money for passengers who  arrived  in the last 1 days prior to the flight. we believe that in practice we would find additional opportunities to save money for the bulk of passengers who buy their tickets more than 1 days before the flight date.
methodnet savingsoptimal1%by hand1%ripper1%time series1%q-learning1%hamlet1%methodsavingslossesupgrade cost% upgradesnet savings% savings% of optimaloptimal$1$1$1%$11%1%by hand$1$1$11%$11%1%ripper$1$1$11%$11%1%time series$1$1$11%-$1-1%-1%q-learning$1$1$11%$11%1%hamlet$1$1$11%$11%1%table 1: savings by method.table 1: comparison of net savings  as a percent of total ticket price  on feasible flights.
1	sensitivity analysis
　to test the robustness of our results to changes in our simulation  we varied two key parameters. first  we changed the distribution of passengers requesting flight tickets. second  we changed the model of a passenger from one where a passenger wants to purchase a ticket on a particular flight to one where a passenger wants to fly at any time during a three hour interval. the interval model is similar to the interface offered at many travel web sites where a potential buyer specifies if they want to fly in the morning  afternoon  or evening.
　we used the following distributions to model the earliest purchase point  i.e.  the first time point at which passengers  arrive  and need to decide whether to buy a ticket or to wait :
  uniform: a uniform distribution of simulated passengers over the 1 days before the flight's departure date;
  linear decrease: a distribution in which the number of passengers arriving at the system decreased linearly as the amount of time left before departure decreased;
  quadratic decrease: a distribution like linear decrease  but with a quadratic relationship;
  square root decrease: a distribution like linear decrease  but with a square root relationship;
  linear increase: a distribution like linear decrease  except that the number of passengers increase as the amount of time left before departure decreased;
  quadratic increase: a distribution like linear increase  but with a quadratic relationship;
  square root increase: a distribution like linear increase  but with a square root relationship.
　table 1 reports the net savings  as a percentage of the total ticket price  under the different distributions. hamlet saved more than 1% of the ticket price in all cases  and it saved more than any other method on all distributions except the quadratic decrease distribution  where it performed slightly worse than the hand-crafted decision rule. hamlet's savings were above 1% of optimal in all cases.
　table 1 reports on the performance of the different methods under the modified model where a passenger requests a ticket on a non-stop flight that departs at any time during a particular three hour interval  e.g.  morning . this different model does not change our results qualitatively. hamlet still achieves a substantial percentage of the optimal savings  1%  and its percentage of upgrades drops to only 1%. finally  hamlet still substantially outperforms the other data mining methods.
methodnet savings% of optimal% upgradesoptimal$11%1%by hand$11%1%ripper$11%1%time series-$1-1%1%q-learning$11%1%hamlet$11%1%table 1: performance of algorithms on multiple flights over three hour interval.
　overall  our analysis confirms that hamlet's performance on the test data is robust to the parameters we varied.
1.	future work
　there are several promising directions for future work on price mining. we plan to perform a more comprehensive study on airline pricing with data collected over a longer period of time and over more routes. we plan to include multi-leg flights in this new data set. the pricing behavior of multi-leg flights is different than that of non-stop flights because each leg in the flight can cause a change in the price  and because pricing through airline hubs appears to behave differently as well.
　we also plan to exploit other sources of information to further improve hamlet's predictions. we do not currently have access to a key variable - the number of unsold seats on a flight. however  on-line travel agents and centralized reservation systems such as sabre or galileo do have this information. if we had access to the number of unsold seats on a flight  hamlet could all but eliminate the need to upgrade passengers  which is a major cost.
　to use the methods in this paper on the full set of domestic and international flights on any given day would require collecting vast amounts of data. one possible way to address this problem is to build agents on demand that collect the required data to make price predictions for on a particular future flight on a particular day. the agents would still need
distributionby handq-learntime seriesripperhamletquadratic decrease1%1%-1%1%1%linear decrease1%1%-1%1%1%sqrt decrease1%1%-1%1%1%uniform1%1%-1%1%1%sqrt increase1%1%-1%1%1%linear increase1%1%-1%1%1%quadratic increase1%1%-1%1%1%table 1: sensitivity of methods to distribution of passengers' earliest purchase points. the numbers reported are the savings  as a percentage of total ticket price  achieved by each algorithm under each distribution. we see that hamlet outperforms q-learning  time series  and ripper on all distributions.to collect data for multiple flights  but the amount of data would be much smaller. this type of agent would fit well within the electric elves system  1  1   which deploys a set of personalized agents to monitor various aspects of a trip. for example  elves can notify you if your flight is delayed or canceled or let you know if there is an earlier connecting flight to your destination.
　beyond airline pricing  we believe that the techniques described in this paper will apply to other product categories. in the travel industry  hotels and car rental agencies employ many of the same pricing strategies as the airlines and it would be interesting to see how much hamlet can save in these product categories. similarly  online shopping sites such as amazon and wal-mart are beginning to explore more sophisticated pricing strategies and hamlet will allow consumers to make more informed decisions. finally  reverse auction sites  such as half.com  also provide an opportunity for hamlet to learn about pricing over time and make recommendations about purchasing an item right away or waiting to buy it. in general  price mining over time provides a new dimension for comparison shopping engines to exploit.
　we recognize that if a progeny of hamlet would achieve wide spread use it could start to impact the airlines'  already slim  profit margins. could the airlines introduce noise into their pricing patterns in an attempt to fool a price miner  while we have not studied this question in depth  the obvious problem is that changing fares on a flight in order to fool a price miner would impact all consumers considering buying tickets on that flight. if the price of a ticket moves up substantially  then consumers are likely to buy tickets on different flights resulting in a revenue loss for the airline. similarly  if the price moves down substantially  consumers will be buying tickets at a discount resulting in a revenue loss again. thus  to avoid these distortions  the airlines are forced to show the prices that they actually want to charge for tickets. of course  there are more prosaic methods of trying to block a price miner such as placing prices inside gif files or blocking the ip address of the price miner. however  an  industrial strength  price miner would not rely on  scraping  information from web sites  but would access a fare database directly.
1.	conclusion
　this paper reported on a pilot study in  price mining  over the web. we gathered airfare data from the web and showed that it is feasible to predict price changes for flights based on historical fare data. despite the complex algorithms used by the airlines  and the absence of information on key variables such as the number of seats available on a flight  our data mining algorithms performed surprisingly well. most notably  our hamlet data mining method achieved 1% of the possible savings by appropriately timing ticket purchases.
　our algorithms were drawn from statistics  time series methods   computational finance  reinforcement learning  and classical machine learning  ripper rule learning . each algorithm was tailored to the problem at hand  e.g.  we devised an appropriate reward function for reinforcement learning   and the algorithms were combined using a variant of stacking to improve their predictive accuracy.
　additional experiments on larger airfare data sets and in other domains  e.g.  hotels  reverse auctions  are essential  but this initial pilot study provides the first demonstration of the potential of price mining algorithms to save consumers substantial amounts of money using data available on the internet. we believe that price mining of this sort is a fertile area for future research.
1.	acknowledgments
　we thank haym hirsh  john moody  and pedro domingos for helpful suggestions. this paper is based upon work supported in part by the air force office of scientific research under grant number f1-1 to usc. the views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements  either expressed or implied  of any of the above organizations or any person connected with them.
