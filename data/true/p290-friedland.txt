we present a family of algorithms to uncover tribes-groups of individuals who share unusual sequences of affiliations.  while much work inferring community structure describes large-scale trends  we instead search for small groups of tightly linked individuals who behave anomalously with respect to those trends. we apply the algorithms to a large temporal and relational data set consisting of millions of employment records from the national association of securities dealers. the resulting tribes contain individuals at higher risk for fraud  are homogenous with respect to risk scores  and are geographically mobile  all at significant levels compared to random or to other sets of individuals who share affiliations. 
categories and subject descriptors 
h.1  database management : database applications - data mining; i.1  pattern recognition : models - statistical; j.1  social and behavioral sciences . 
general terms 
algorithms  performance  design. 
keywords 
social networks  dynamic networks  anomaly detection. 
1. introduction 
in relational and social network data sets  social structure among individuals offers vital explanatory power for prediction tasks. achieving a clearer view of the connections between entities  particularly in dynamic temporal domains  promises to aid analyses of the data. this research seeks to infer close relationships among certain co-workers  given a database of affiliation histories. specifically  we search for groups of individuals  which we call tribes  that have anomalously similar job sequences within a large industry. we want to identify employees who were co-workers at multiple jobs  and to distinguish those who worked together intentionally from those who simply shared frequently occurring employment patterns in the industry. 
relational knowledge discovery  exploits connections among individuals  as well as intrinsic attributes  to identify patterns and make predictions. in relational  or network-structured  data sets  linked entities often display underlying dependencies such as autocorrelation  or homophily: the tendency of connected entities to have similar attribute values . when the links are specified in source data  they can be used to infer large-scale structure  for instance at the level of groups or communities     . however  in other cases  the links themselves must first be inferred  whether by preprocessing to extract real-world entities   or by modeling their interactions. in this work  we identify fine-grained  strong associations among individuals in a large data set by finding small groups that are anomalously similar. 
this novel task was inspired by a case study  but it can be applied to a number of domains. the important properties in the scenario are that  individuals   or one type of entity  are affiliated with  organizations   another type of entity  and that the affiliations change over time. we form a model of  typical  sequences of affiliations  which allows us to score any given sequence of affiliations based on its likelihood. then  for each pair of individuals  we find the sequence they have in common  if any  and score it. the score correlates with the likelihood that two  individuals shared the given affiliations by chance alone  under the null hypothesis of independent movement.  
other tasks with this structure include finding students that select classes together  given a table of students and their enrollments; inferring sets of cars traveling in caravan on a highway  given sightings at different locations and times ; and discovering family structure in animal groups  from tagged individuals frequently sighted together   see related work . if we remove the temporal aspect of the problem and simply require a bipartite graph of affiliations  then a generalized version of the model could identify people with unusually similar tastes in movies  highly related documents sharing words that rarely co-occur  or friends within an album or yearbook containing photos of large groups. 
our model is particularly suited to situations involving large organizations  where the original data does not describe detailed associations among individuals. for instance  in our employment domain from the securities industry  thousands of people often share a loose relation of working at the same branch. in such cases  we can benefit from learning a model of typical affiliation patterns. then  against this background  small groups doing 

 
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  or republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee. 
kdd'1  august 1  1  san jose  california  usa. 
copyright 1 acm 1-1-1/1...$1. 
unusual things stand out in contrast.  
1. motivation 
the national association of securities dealers  nasd  regulates securities firms in the united states  with responsibility for preventing and discovering misconduct among its registered representatives  also called  reps.  with over 1 reps under its jurisdiction  nasd must focus its investigatory resources on those reps most likely to commit fraud or other violations of securities regulations. in conversations over the course of related projects     nasd representatives suggested that fraud is sometimes committed by colluding groups of reps that pass together through multiple places of employment. if we could identify  tribes  of reps moving together from job to job  we could test them for elevated rates of one or more indicators of fraud risk. of course  finding tribes will certainly also identify harmless sets of friends that worked together in the industry  perhaps recruiting one another to new jobs. our hope is that we will discover groups in which the reps tend to be homogenous with respect to fraud risk: mostly low-risk or mostly high-risk. such tribes could then serve as starting points for detecting new fraud rings. 
our source data is a table of employment histories: for each rep  a series of records contains the branch identifier  start date  and end date for every employment the rep has held in the securities industry. the data set is large  containing  after some preliminary cleaning  1 million records describing employments of 1 million reps at 1 branch offices. the branches range in size from 1 to 1 employees. the branch identities themselves have been inferred  through an earlier process of link consolidation from office addresses   from the 1 firms that have ever registered with nasd. the employment histories span the twentieth century through today  though most records are from the past fifteen years.  
two features of the real-world data shape our approach. first  many employment histories include simultaneous  overlapping jobs or leave gaps between employments. this muddies the concept of a transition between jobs: a rep does not necessarily leave one job when starting another  nor vice versa. overlapping jobs are too common to consider discarding from the data: 1% of employees hold more than one job at some point  and 1% even begin multiple jobs  up to 1  on the same day. with transition dates ill defined  we cannot formulate this task as a search for employees changing jobs within a common interval of time. therefore  we direct our attention to the times and places that people have been co-workers  as opposed to the boundaries between them. 
 
figure 1. example  hypothetical  of branch-branch transition patterns. the left-most edge indicates that 1% of the reps 
who ever worked at i&d insurance were later employed by  
cumulative sentences. only edges with high percentages are shown. 
the second key feature is that mass movements of employees between jobs are common. in addition to continual flows between firms  e.g.  common career paths within a given city   the businesses change: branches are closed or opened; firms merge or are acquired. reps in these flows could end up being colleagues at multiple organizations without even knowing each other. we can visualize such trends as transition diagrams  as in figure 1  to create a map of the whole industry. the meaning of the numbers along the edges will be discussed and refined in section 1; roughly speaking  they indicate the percentage of employees at one branch that later work at the linked  destination  branch.  
many of these transition percentages are high  which establishes that job movement in the industry is not random. for instance  among branches of fewer than ten employees  about 1% have some destination where at least 1% of the employees later end up. among larger branches  1% of the branches have some destination where at least 1% of their employees go. these figures increase slightly if we ask which transitions are common within a given year-to spotlight abrupt shifts like mergers-as opposed to throughout the life of a branch office. this structured transition pattern is what we hope to factor out in order to find genuinely tight associations among individuals. 
1. task description and approach 
1 formulation 
in the most general setting  we define this task to be the identification  of anomalously related entities. as input  we require a bipartite graph g=  r¡Èa e  of entities 
r = {r1  r1  ...  rn} and attributes  in this case  organizations  a = {a1  a1  ...  am}. the entities should connect to at least several attributes  on average  so at not to be too simply characterized.  each attribute should attach to a large number of entities  enough so that the behavior of this set of entities can be modeled.  the current formulation requires that an entity's attributes be sequentially ordered  e.g.  chronologically   while a more general extension would consider an unordered set. 
the groups of entities we wish to return are those sharing unusual combinations of attributes. our strategy for this task revolves around developing a good definition of  unusual.  for an entity group to be considered anomalous  the shared attributes themselves need not be unusual  but the particular configuration of them should be; entity sets that are alike in typical ways are not part of our target. our scores are similar in spirit to tf-idf weights in that they emphasize unusual shared attributes ; however  our method for estimating joint likelihoods is unique. in this paper  we approximate a joint distribution over sets of attributes by modeling the co-occurrence rate  or transition rate  of each pair of attributes.  then  the likelihood of an attribute set can be computed as a function of the pairwise co-occurrence rates. 
1 basic tribe-finding process 
we are given a bipartite graph g=  r¡Èa e  of reps and organizations. in the nasd data  each edge e¡Ê e is annotated with a time interval: e =  ri  aj  tstartij  tendij . the general tribediscovery process  assuming we are given such time intervals  is summarized in figure 1. for our application  it begins with listing all pairs fij =  ri  rj  of individuals that have ever worked together. this can be a large list  1 billion pairs  in our case   generated by iterating through the branches and recording every pair of reps fij =  ri  rj  whose employment stints at a branch intersect.  
find-tribes g =  r  a  e   timeannotations  
 
1 	determine-candidate-pairs g =  r  a  e    timeannotations : 
1 f = null  pairannots = null 
1 for each org of a 
1 get all reps associated with org  	1 	 	for each pair  ri  rj  of reps 
1 if timeinterval ri  org  and  
timeinterval rj  org  overlap then 
1 f = f   ri  rj  
1 pairannots ri  rj  appends org  
and times 
1 return  graph h =  r  f   pairannots  1 	score-candidate-pairs f  modelparameters  
1 	recover-tribes h  d : 
1 for each fij in f 
1 if score fij    d then delete fij 
1 return  tribes = connectedcomponents h   figure 1. tribes algorithm. 
for each pair  we then summarize their co-worker relationships  keeping track of the jobs where they coincide. we note additional information  such as the date the reps first coincide at each job  and the total time spent at overlapping jobs. the algorithm stores the pairs in a new graph h =  r  f   where f = {fij}  and each edge is annotated with:  
pairannotsij = { the sequence of jobs {ax  ay  ...} shared by ri and rj ¡È additional information described above}.  
for purposes of efficiency  we retained only the rep pairs that had at least three jobs in common. this left us a graph h' =  r  f'   with |r| = 1 million  and |f'| = approximately 1 million pairs of individuals that are co-workers multiple times: the candidates for tribes.  
the algorithm proceeds by identifying all significant pairs. we compute a score cij pairannotsij  for each edge in f'  measuring how significant or unusual its sequence of shared jobs is. section 1  which follows  discusses the choice of function to use for cij. 
once the significance scores are computed  we pick a threshold d for the scores and remove all edges fij for which cij   d. then  we compute the connected components of h'  which are designated the tribes. the output of the algorithm is a list of tribes: sets of reps within components of size two or higher in h'.  
computationally  step 1 of figure 1 is the most expensive.  if the maximum degree of a branch is k  then we must consider o |a|k1  potential pairs and store information about each pair.  once we have created the graph h and pared it to a smaller h'  the remaining steps are in o |f'| .  estimating the model parameters will generally require o |e|   one pass through the source data. 
1. scoring/ranking functions 
the choice of scoring methods constitutes the heart of the task.  we also use the term  ranking method   since we only use the scores to rank the pairs.  we propose and compare several. 
1 simple measures 
given a sequence of jobs  we must decide whether it is unusual for a pair of co-workers to have worked together at all of these jobs. two straightforward methods for ranking the pairs are:  
  jobs = the number of jobs in the shared sequence 
  years = the number of years of overlap 
computing jobs is a straightforward count of the job sequence. for years  we choose to add up the length of each overlap period  so that if a pair of reps works simultaneously at two branches for ten years  this counts as twenty years of overlap. 
these simple methods treat all branches equivalently. as described earlier  however  reps in the securities industry do not behave as if they are picking jobs out of a hat. instead  they tend to follow patterns caused by industry events and influenced by geographical and other factors. accounting for these patterns motivates the probabilistic models that follow. 
1 probabilistic model 
in developing a simplified model for the job history data  there is a tradeoff between flexibility and performance. we want the model to flexibly mimic the characteristics of each branch without exactly reproducing the original data. in addition  the procedure must be tractable on a large data set. the process of computing all pairs of co-workers is time- and space-intensive  so it would be infeasible  for example  to generate random replicates of the network and re-compute shared job sequences. attempting to strike the right balance  we model rep movement across branches as a modification of a markov chain over organizations  ignoring timing and duration. 
if each rep held one job at a time  and changed it at each time step  we could model movement using an ordinary markov chain  as follows: each rep picks a start branch randomly. then at each step  the rep's next branch is decided probabilistically based only on the current branch. we ignore actual time spent at each job; at each step in the markov process  a rep either moves to a new branch  or leaves the workplace. we also assume that transition probabilities are static over time and that each rep chooses jobs independently. using this model  we could estimate the probability of a rep having a job sequence such as in figure 1a as  x  = p branch a ¡ú branch b ¡ú branch c ¡ú branch d  
= pa   tab   tbc   tcd. 
the quantities to estimate are pi  = p start at branch i  
 	=  # reps ever at branch i  /  # reps in database  tij = p transition from branch i to branch j |  given that  currently at branch i  
 	=  # reps who leave branch i and next go to branch j  /  # reps ever at branch i . 
under the null hypothesis of independent movement  if p rep 1 holds this sequence of jobs  = x  then p reps 1 and 1 each hold this sequence of jobs  = x1.  since ranking by x is equivalent to ranking by x1  it is enough to calculate x. similarly  it is not necessary to compute the denominator of pi.  
if job sequences in the database were as simple as figure 1a  this model would be sufficient. however  figure 1b is more typical of the data. the reps in this example start at the same branches  split apart for a few years  come back together  and then both begin two jobs  branches c and d  at the same time. to allow for these more complex situations  we adjust the model such that it is no longer a markov chain  while keeping the probability calculations almost the same. 
 a  
  
 
 figure 1. job sequences to score. nodes represent branches. in  b   we display differing trajectories for two reps  but only the shared jobs  in bold  are used for scoring.  dates describe start dates for each rep at each job. 
the first modification is to allow reps to have different paths between shared jobs  such as from branch b to branch c in figure 1b. to do this  we replace the quantity tij with a new quantity vij:  
vij 	= p move to branch j at any point after branch i | currently at branch i  
    	=  # reps who go to branch j at any point after working at branch i  /  # reps ever at branch i . 
now  each vij ¡Ý tij  and the transition probabilities leaving a branch no longer sum to 1   ¡Ætij = 1  but ¡Ævij ¡Ý 1 . we cannot 
	i	i
generate sequences as part of a markov process using the vij probabilities  but we can still score an existing sequence of jobs using these estimates of how likely each transition is to occur. for figure 1b  we now calculate p branch b¡ú branch c  without regard for the intermediate branches. this modification is much cleaner than an alternate approach that might attempt to compute direct transition probabilities along all possible paths.  the other modification is to allow for simultaneous jobs. we treat the shared job sequences as if they are in a definite order  but the underlying situations can be complicated. for example  in figure 1b  the reps work at branches c and d simultaneously  not one after the other. to extend the model to handle these situations  we replace the quantity vij with a new quantity wij: 
wij 	= p move to branch j at any point simultaneous to or after branch i | currently at branch i  
    	=  # reps who start at branch j at any point simultaneous to or after starting at branch i  /  # reps ever at branch 
i . 
the same caveats apply as for vij: the transition probabilities become less precise and correct with respect to direct transitions  but they can now be used in these more general situations. 
1 probabilistic family 
the probabilistic scoring model described above  which we refer to as prob  treats jobs in a sequence as being ordered by time  but it does not take into account when the transitions occur. a transition is considered equally probable whenever it takes place. we create two variations on the model by changing the treatment of time. 
first  we account for varying transition probabilities. we hypothesize that the scoring will be more accurate if we can represent single-event mass movements  as well as changes in industry patterns over time. for instance  consider the case where 1% of reps at branch a eventually move to branch b  but in 1 branch a was purchased by branch b  so 1% of the reps who were at branch a in 1 also worked at branch b in 1. to account for such variations  rather than scoring a transition based on the probability of a rep moving from branch a to branch b  we describe a more specific event. now  the rep is moving from branch a at time x  to branch b at time y 
 specifically  the rep is first seen at branch a at time x  and then first seen at branch b at time y which is equal to or later than time x . time is divided into bins  with bins representing one year or more. each branch has its own bin divisions  depending on the number of employees at the branch in different years. we allocate the bins so that there are at least 1 people who worked at each branch in each bin period  provided the branch has had that many employees during its history. 
the parameters needed for this new model  called prob-timebins  require changing pi and  again  wij. we now compute 
pix = # reps ever at branch i during time x / # reps in db yixjy = # reps ever at branch i during time x and at branch j during time y  where y ¡Ý x / # reps ever at branch i during time x. 
we take the opposite extreme for the second variation. the prob model is not very informed about time: because the wij values describe the probability of being at branch j anytime after or simultaneous to being at branch i  only the relative order of i and j matter. to find out how important that directionality of time is  we create a simpler model  prob-notime  which ignores even the order of job moves. for this model  we use the original pi  again  no need to compute the denominator   and a transition quantity zij  representing the raw number of reps who are at both branches i and j during their careers. there is an ambiguity in this formulation  in that now we should be able to score a set of shared branches regardless of the order in which they are presented; however   
transition probability from branch i to branch j  
=  zij / # reps ever at branch i    
¡Ù  zij / # reps ever at branch j   
= transition probability from branch j to branch i. 
as prob-notime turns out to work almost as well as prob  see section 1  and allows this framework to be applied to situations without a time ordering  we hope to explore the issue of ordering the branches in future work. for now  we use the same  temporal  ordering of branches as used in the other methods. 
the jobs ranking falls out as a trivial probabilistic model.  if all branch transitions are considered to have the same probability  and all branches have the same probability of serving as a starting branch  then the ranking is equivalent to counting the number of shared jobs. 
1. evaluation and results 
ideal tribes consist of reps that know each other and have coordinated their movements among jobs. since we cannot verify the personal relationships among thousands of securities reps across the country  we evaluate our tribes using indirect measures.  first  we examine structural characteristics of the tribes produced with the various scoring methods.  then  we analyze the tribes' patterns of risk scores and geographic movement. 
1 tribe structure 
using the basic process described in section 1  we compiled a list  the edges f'  of the 1 million pairs of reps in the database that shared at least three different jobs. we ranked these pairs using the five scoring functions described in section 1: jobs  years  
prob  prob-timebins  and prob-notime. all but jobs give quasicontinuous values as scores. for these  we can choose a threshold d to keep any desired number of pairs. when we compute the connected components of these pairs  we get a set of tribes of assorted sizes and a corresponding set of reps in these tribes. for jobs  the scores are discrete: all pairs have at least 1 jobs  and the maximum number of shared jobs is 1. to compare the different scoring functions  for each continuous method we determine a cutoff d such that the resulting number of reps in the tribes matches  +/- 1  the number of reps in tribes formed with jobs.  
figures 1 and 1 display structural characteristics of some tribe sets matched in this manner. we omit these characteristics for the variations on prob  prob-timebins and prob-notime   as they are substantially similar to those for prob. figure 1 indicates that 
prob creates more tribes  and smaller tribes  than jobs or years. figure 1 further shows that the majority of pairs created by the prob ranking go into tribes of size two-pairs of associated reps. in contrast  jobs and even more so years  in order to get an equally large set of reps  provide many more pairs-edges in the graph f'-but the additional edges go to fill in the enormous components1  instead of creating new  small groups.  
 
¡¡figure 1.  number of tribes and maximum tribe size for equal-size sets of reps produced using jobs  j   prob  p   or years  y  to rank pairs. 
 
¡¡figure 1.  number of pairs  and number of pairs in twoperson tribes  for equal-size sets of reps produced using jobs  j  j   prob  p  p   or years  y  y . 
we can see this effect from another perspective by considering the rarity of high-ranked job sequences.  for jobs and prob  the scores are based solely on the job sequence; therefore  if a number of reps all share an identical job sequence  then the scores of their edges are equal. if that  shared  score passes the threshold  then the whole set of reps will be included in the tribes. for this reason  a ranking that scores common job sequences as significant will have large connected components among its tribes.  
table 1 shows the average  for each pair included in tribes  of the number of times its shared job sequence occurs among the 1 million pairs.  the low averages for the prob ranking confirm that this model succeeds in scoring rare sequences as significant. jobs also brings in fairly rare sequences.  for years  when one pair passes the threshold d  others with the same job sequence do not necessarily cross it  since the score depends on how long the coworkers are together.  however  we see that the reps working together for the longest times tend to have common sequences of jobs. for comparison  among all 1 million pairs  the job lists repeat an average of 1 times. 
table 1. average number of times a job sequence occurs among all pairs of reps.   
ranking # reps in tribes 1 1 1 1 prob 1 1 1 1 jobs 1 1 1 1 years 1 1   	1 1  
figure 1  below  gives a sense of how diverse the resulting tribes are. it shows  for several cutoffs  the percentage overlap between the set of reps produced by prob and the equal-size set produced by each other ranking. we see that the prob variations  particularly prob-notime  give results fairly close to prob. the rep sets created by jobs are related but substantially different  while those of years have almost no overlap.  

figure 1. disclosure scores of the top-ranked reps.  bar widths reflect the number of reps in each set.  
figure 1. percent overlap of rep set with that from prob. 
1 disclosure scores 
as part of their oversight  nasd and other regulatory organizations require disclosures to be filed on reps for a variety of actions they commit and events that take place. these disclosures span categories such as customer complaints  bankruptcies  criminal charges  and regulatory actions; some are mundane and merely reflect administrative reporting requirements  while others represent serious breaches of trust. we can use these disclosures as assessments of past behavior or as predictors of future fraud risk. we compute a  disclosure score  for each rep as a weighted sum of their disclosures  where serious categories are weighted more highly  the weights were developed in consultation with nasd ; in this system  the vast majority of reps are assigned a score of zero. 
when we examine the disclosure scores of reps in tribes  we find that they score well above average  and that the scores of reps at the top of the rankings are higher than those lower down. figure 1 displays the average disclosure scores of reps under different ranking systems. the reps are ordered and placed into bins based on which cutoff causes the rep to be included in the set of tribes. the bin widths correspond to the number of reps in the bin. within each bin  the four bars correspond to sets of reps produced by jobs  prob  prob-timebins  and prob-notime. 
results for years are not displayed  as its scores are low: all fall below the higher dashed line. in fact  for the highest-ranked reps  the values are below the lower dashed line  and unlike with the other ranking systems  they rise as we move down the list of reps  reaching 1 for the largest set of reps. this may imply that the reps who have worked together for many years are least of all likely to commit fraud. 
one alternative explanation for the high disclosure scores seen among these top reps is that the reps who have held such sequences of jobs together may simply have longer careers than average  and so have accumulated more disclosures over the years. we tested this explanation by dividing all reps into groups based on the number of jobs they have held and the number of years they have spent in the industry. given a top-ranked set of reps from the tribes  we replaced the disclosure score of each rep with the average score from the rep's matched group  and recalculated the average for the set. if the matched disclosure scores were elevated  then our top-ranked reps would simply have long histories. in fact  the matched scores all give averages close to 1  the height of the dashed line  which means that length of career does not explain the high scores.  
1 disclosure score correlation within tribes 
if the tribes are of good quality and the conjecture is correct that reps at high risk of disclosures often move in tribes  then we would expect each tribe's disclosure scores to be homogenous. that is  disclosure scores of individuals within a tribe would be correlated: some tribes would have multiple members with high scores  while other tribes would have low scores. judging tribes by the properties of their members' disclosure scores is not ideal  since the outcome depends on that second conjecture. in addition  since the frequency of disclosures is very low  under this lens only high-risk tribes look conclusively like high-quality tribes; low-risk tribes are hard to distinguish from random sets of reps. finally  note the potential problem of incomplete information: reps that appear low-risk compared to their tribe-mates might just have evaded detection. it is precisely these individuals that the nasd may be interested in investigating in the future. 
we performed several experiments to test whether the tribes are homogenous with respect to disclosure scores. first  we examined individual pairs of reps  using a chi-square test to assess whether reps with positive disclosure scores pair with others with positive scores more often than expected at random. if we used all the pairs that formed tribes  then reps in large components would be represented more than once; to avoid this  we only performed this test on the tribes of size 1. since the rankings are all significant at the p ¡Ü 1 level  we compared them using the phi-square statistic  which is chi-square normalized to have a maximum value of 1. by this measure  all five rankings are more or less equally significant  as shown at the top of figure 1. 
 
figure 1. comparison of tribe homogeneity  using cutoff criterion of 1 reps. 
next  we set up a prediction task with the tribes: we tried to predict the disclosure score of each rep. for each target rep  we took the other reps in the same tribe  averaged their disclosure scores  and used this average as the predicted value. we can compute an auc  area under the roc curve  for these predictions if the classification task is binary. the auc values shown are for the task  is the rep's score higher than the average for this set   by this measure  jobs comes out a little more correlated than prob-timebins  followed by the other prob rankings  and years trails. 
1 geographic movement 
the final indirect measure we use is the postal codes of the branches. if groups of reps move geographically  particularly large distances  this suggests they are staying together intentionally. reps participating in the natural patterns of branch changes are less likely to move to far-off places together. we use the five-digit zip codes associated with most branches as a way to estimate geographic movement. the first digit designates a broad region of the united states  and the first three correspond to a particular large city or local region. counting the number of unique one-digit or three-digit zip code prefixes associated with a rep pair's list of shared branches gives an idea of the geographic mobility of the pair. as with disclosure scores  since we expect many high-quality tribes will not have geographic movement  this measure can only be used to evaluate tribes in the aggregate. 
figure 1 displays information about geographic movement. for each pair in the set  we calculated how many unique one-digit and three-digit zip codes are covered by the shared jobs  as well as how many shared jobs there are with zip code information  1% of the branches have zip codes available . the values shown are the averages over the distinct shared job lists among the pairs. 
the prob rankings show the greatest mobility when we look at the number of zip codes covered. this is more surprising when we consider that the pairs in jobs have a greater number of shared jobs  yet move less geographically. pairs in the years ranking move least of all  even less than the average among the 1 million scored pairs   which means that long-term co-workers tend to settle down. these long-term years tribes-judging from their low disclosure scores  low overlap with the others  and low movement-do not seem to be the type of tribes we are looking for. 
 
 figure 1. comparison of geographic mobility using cutoff criterion of 1 reps.  for the distinct job sequences among 
each ranking's pairs  bars show average numbers of branches and zip code prefixes. 
1 discussion 
to sum up what we have seen  the rankings jobs  prob  prob-
timebins  and prob-notime create tribes whose reps have higher disclosure scores  on average  than random  section 1 . reps with high  or non-zero  disclosure scores are associated in tribes with other such reps under these rankings. at the cutoffs giving 1 reps  prob-timebins has a higher phi-square than the others  whereas jobs gives the highest auc; these results vary at other cutoffs  with phi-square remaining highest for either probtimebins or jobs  and the highest auc traded among jobs and all the prob-based models  section 1 . the prob models create tribes that cross more zip codes among their shared jobs  even though the reps in jobs have a higher number of shared jobs  section 1 . the prob models produce more individual pairs in tribes  while jobs and years produce larger connected components as tribes  section 1 . 
the fact that the jobs and prob models perform comparably at various cutoffs  yet pick different sets of reps  suggests that there is room for improvement by combining the best of both systems. of the tribes ranked highly by jobs but not prob  some  on inspection  appear to be just the types we hoped to avoid: pairs of reps taking a large number of very common transitions together. others look like good tribes  and it appears prob may miss them because of poor probability estimates at small branches. when both reps at a two-person branch move to the same new job  it is impossible to tell whether they moved together because their firm was bought  or because they wanted to stay together. the prob model assumes the former  calculating the move as 1% likely to occur by chance  but this may not be the best policy. more generally  the prob model seems to favor large firms  either because the probability estimates are more stable there  or perhaps because it is possible to create smaller transition probabilities 

from larger firms. we have not yet succeeded in correcting for this property  and the conclusion might be that the model is simply better suited for situations with large branches. 
qualitatively  many of the tribes look convincing when the reps' job histories are displayed together. it is a compelling feature that transition dates often coincide closely  even though the model did not use them. 
 
figure 1.  example tribe ranked highly by prob but not by 
jobs. nodes indicate branches and their sizes. arrows leading into a node show the starting dates of employment and the transition probabilities. solid lines are moves executed by 
both reps in the pair; dashed and dotted lines are moves by one member only. firm names are fictitious.   
figure 1. example tribe ranked highly by jobs but not by prob. firm names are fictitious. 

as examples  figures 1 and 1 display the career histories of two potential tribes.  each of these tribes consists of a single pair of reps. the pair in figure 1 was scored by prob as highly significant  while that in figure 1  even though it has a long history together and was ranked highly by jobs  appears to be following typical patterns; it was scored as not significant by prob. as it turns out  the reps from the significant pair have disclosure scores of 1 and 1  primarily since in april 1 they were both fired  disclosures show an internal review and a termination for each .  one of the reps from the non-significant pair has no disclosures  while the other was fired in 1 for  diversion of profitable trades to personal   for which they received a score of 1.  
1. related work 
our task of identifying small  anomalously similar groups is novel within relational knowledge discovery but has analogs in other fields. within the analysis of complex relational and social networks  it is common to cluster the graph or otherwise infer hidden group structure     but usually the aim is to find large-scale communities  such as among webpages   employees in a single organization   or bottlenose dolphins . in addition  these algorithms are typically designed for static or time-collapsed networks  whereas the temporal aspect is important for us. 
in time series analysis  there is research within the database community on efficiently finding identical or similar sequences   and on constructing flexible definitions of similarity . econometrics has a related concept called cointegration: two time series x and y  e.g.  of stock prices  may be cointegrated if xt is useful for predicting yt+1 . however  in these fields  time series are traditionally numerical. furthermore  in our task we wish to find sequences that are not just similar  but also anomalous. 
anomaly detection  often applied to the security task of intrusion detection  does highlight unusual time-sequence patterns against a background of normal activity  often learning a background model from the data . a recent paper by eskin  offers a clear formulation that treats the data as a mixture model of normal with anomalous sequences  a technique that could be useful for scoring pairs in our scenario  although we would still need to specify the form of the normal model as we do here. for anomaly detection in relational data  lin and chalupsky  offer a measure of path rarity that can be used to find the closest match to a given individual  although it does not compare one set of individuals to another. 
