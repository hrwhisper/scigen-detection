a lot of research has been conducted by the database community on methods and techniques for efficient xpath processing  with great success. despite the progress made  significant opportunities for optimization of xpath still exist. one key to further improvements is to utilize more effectively existing facilities of relational rdbses for the processing of xpath queries. after taking a comprehensive look at such facilities  we present techniques for xpath processing that work by identifying the best relational join algorithms  indices and file organization strategies for xpath queries. our techniques both reduce the latency of the resulting sql translations and guarantee their pipelined execution. we also propose a new technique for xml reconstruction from relations-mapped xml that  splits the difference  between schema-aware and schema-oblivious xml-to-relational mapping for a significant performance improvement. an extensive experimental study confirms the performance benefits of our optimization techniques and shows that a system implementing these techniques on top of a commercial rdbms is competitive with respect to query performance with other native and relationalbased state-of-the-art xpath processing systems  commercial as well as research prototypes. 
categories and subject descriptors 
h.1  information systems : systems - query processing  relational databases. 
general terms 
algorithms  measurement  performance  experimentation. keywords: xml  xpath  relational databases  xml 
reconstruction  schema mapping  structural joins  indices  dewey encoding 
1. introduction 
there is today wide and increasing use of xml for a variety of data exchange  data processing  and data integration tasks. xml is used in many application domains where there are large quantities 
  research supported by the pened programme of the greek secretariat of research and technology. 
permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise  or republish  to post on servers or to redistribute to lists  requires prior specific permission and/or a fee. 
sigmod'1  june 1  1  beijing  china. 
copyright 1 acm  1-1-1/1...$1.  	 	 	vasilis vassalos 
                athens university of economics and business    
      1 patission str  gr 1 athens  greece  	           vassalos aueb.gr 
of semistructured data to be exchanged or processed  from bioinformatics  to astronomy  to large corporate data processing.  
the wide applicability of xml and the difficulties in processing xml data  arising from its semistructured and hierarchical nature  the rich schema query language facilities  and the diverse application requirements  have led the data management community to devote a lot of effort to the xml processing challenge . 
even though these efforts have yielded very efficient systems and techniques  there is still significant room for improvement in a variety of areas related to xml processing  and especially in using relational infrastructure for xml processing . we have identified two such distinct areas of possible improvement:  
  reconstructing xml results from relational tables resulting from xml shredding . 
  exploiting existing relational facilities for xml processing. to the extent that relational back-ends are used to store and process decomposed  i.e.  shredded  xml data  it seems natural to try to use the existing relational facilities in as efficient a manner as possible. not much effort has been devoted to  fitting  sql translations of xml queries to the abilities of their relational  hosts .  
with regards to the second point  we take a comprehensive look at the choices open to an xml-to-relational mapping system  and the corresponding choices for xml-to-sql translation. we identify four key issues and devise techniques to improve performance in each case:  
a  choosing the right relational join technique. we compare relational join techniques and conclude that index nested loop joins are superior to sort merge for queries processing shredded xml data  for a variety of reasons  section 1.1 . 
b  eliminating redundant ordering and duplicate elimination operations  which affect both latency and time to first result. the properties of order encoding schemes used in xml-torelational mapping allow us to prove that often structural joins produce correctly sorted results. in the other cases  performance is improved by pushing ordering down the plan tree. both result in generation of sql statements with fewer  or none  order by and distinct clauses  sec. 1.1 .  
c  generating pipeline-able plans  to improve  first result  and total query performance. using index nested loop joins  making the effort to create pipeline-able plan trees  improves performance further  as we discuss in section 1.1.  
d  picking the right physical organization. among the many available options  indexed file organization is shown to be the best choice  section 1  
all of the above choices are validated with extensive experiments over synthetic and real data presented in section 1. we also note that the relational optimizer  when left alone  makes the wrong choices  so we create a relational-based system for xpath processing that automatically inserts the appropriate optimizer instructions  i.e.  hints  in sql translations.  
concerning the first point  we propose a new xml reconstruction technique that decomposes xml in relations in two different ways to combine the benefits of  schema-aware  and  schemaoblivious  xml-to-relational mapping. this hybrid xml reconstruction technique has significant performance benefit  as shown in our experimental study in section 1.     
we implement a system on top of a commercial relational engine that includes all the techniques we propose to exploit the observed inefficiencies. in section 1  we compare this system with a variety of other state-of-the-art xpath processing systems  commercial as well as research prototypes.    
1. related work 
a lot of research work has been done for both relational  and native  xml processing. a number of systems have been developed  such as natix  monetdb/xquery  and timber  that are able to store and query large collections of xml documents. commercial rdbmss have also enhanced their functionalities with xml management capabilities . 
many techniques have been developed to improve xml query performance. special index structures and joins algorithms have been developed  and existing relational facilities for indexing  such as b-trees  have been used . in the context of xml-to-relational mapping  several techniques  have been proposed to explore among mapping alternatives and pick the best for certain application characteristics. not much attention has been paid to better exploiting the full set of relational facilities  e.g.  join algorithms  indices  file organization methods  to speed up xml querying.       
a key issue for xpath and xquery processing is xml  re construction  especially for relational-based systems. in schema-oblivious xml-to-relational mapping  xml data is shredded into a single element relation  and an order encoding scheme  e.g. dewey or pre/post encoding   is used for structural relationships. these can be used to easily retrieve all descendants of a given element . in schema-aware mapping  xml data is mapped to a relational schema derived from the xml schema of the data. little work has been done on xml reconstruction in this case. in   an xml schema-to-relational mapping that uses inlining is enhanced with range encoding only for handling xml reconstruction. for a given element  its xml descendants are retrieved by issuing as many queries as the number of relations that potentially store descendant elements. the results of these queries are unioned and sorted in document order outside the relational engine. the xml subtree is created from the sorted relation as in . hence  several queries must be executed for every result element of an xpath expression. in   a technique for xml reconstruction based on storing preparsed xml fragments as blobs is proposed.    
